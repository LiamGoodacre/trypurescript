// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Bind -----------------------------------------------------------------------

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };

  //- ModuloSemiring -------------------------------------------------------------

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };

  //- Ring -----------------------------------------------------------------------

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.refIneq = function (r1) {
    return function (r2) {
      return r1 !== r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };

  exports.showCharImpl = function (c) {
    return c === "'" ? "'\\''" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    return JSON.stringify(s);
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];       
  var Unit = function (x) {
      return x;
  };
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var Ring = function (__superclass_Prelude$dotSemiring_0, sub) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.sub = sub;
  };
  var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.div = div;
      this.mod = mod;
  };
  var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
      this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
      this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
  };
  var Num = function (__superclass_Prelude$dotDivisionRing_0) {
      this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BoundedOrd = function (__superclass_Prelude$dotBounded_0, __superclass_Prelude$dotOrd_1) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this["__superclass_Prelude.Ord_1"] = __superclass_Prelude$dotOrd_1;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var $dollar = function (f) {
      return function (x) {
          return f(x);
      };
  };
  var $hash = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var $minus = function (dictRing) {
      return sub(dictRing);
  };
  var showUnit = new Show(function (v) {
      return "unit";
  });
  var showString = new Show($foreign.showStringImpl);
  var showOrdering = new Show(function (v) {
      if (v instanceof LT) {
          return "LT";
      };
      if (v instanceof GT) {
          return "GT";
      };
      if (v instanceof EQ) {
          return "EQ";
      };
      throw new Error("Failed pattern match at Prelude line 863, column 1 - line 868, column 1: " + [ v.constructor.name ]);
  });
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Prelude line 841, column 1 - line 845, column 1: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var semiringUnit = new Semiring(function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, unit, unit);
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupOrdering = new Semigroup(function (v) {
      return function (y) {
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          if (v instanceof EQ) {
              return y;
          };
          throw new Error("Failed pattern match at Prelude line 413, column 1 - line 418, column 1: " + [ v.constructor.name, y.constructor.name ]);
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var ringUnit = new Ring(function () {
      return semiringUnit;
  }, function (v) {
      return function (v1) {
          return unit;
      };
  });
  var ringNumber = new Ring(function () {
      return semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return semiringInt;
  }, $foreign.intSub);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var not = function (dict) {
      return dict.not;
  };
  var negate = function (dictRing) {
      return function (a) {
          return $minus(dictRing)(zero(dictRing["__superclass_Prelude.Semiring_0"]()))(a);
      };
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var $times = function (dictSemiring) {
      return mul(dictSemiring);
  };
  var moduloSemiringUnit = new ModuloSemiring(function () {
      return semiringUnit;
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return function (v1) {
          return unit;
      };
  });
  var moduloSemiringNumber = new ModuloSemiring(function () {
      return semiringNumber;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });
  var moduloSemiringInt = new ModuloSemiring(function () {
      return semiringInt;
  }, $foreign.intDiv, $foreign.intMod);
  var mod = function (dict) {
      return dict.mod;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var $less$hash$greater = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return $less$dollar$greater(dictFunctor)(f)(fa);
          };
      };
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var ordUnit = new Ord(function () {
      return eqUnit;
  }, function (v) {
      return function (v1) {
          return EQ.value;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var ordString = new Ord(function () {
      return eqString;
  }, unsafeCompare);
  var eqOrdering = new Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  var ordOrdering = new Ord(function () {
      return eqOrdering;
  }, function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return EQ.value;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return EQ.value;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return EQ.value;
          };
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof EQ && v1 instanceof LT) {
              return GT.value;
          };
          if (v instanceof EQ && v1 instanceof GT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          throw new Error("Failed pattern match at Prelude line 668, column 1 - line 677, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var eqNumber = new Eq($foreign.refEq);
  var ordNumber = new Ord(function () {
      return eqNumber;
  }, unsafeCompare);
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eqChar = new Eq($foreign.refEq);
  var ordChar = new Ord(function () {
      return eqChar;
  }, unsafeCompare);
  var eqBoolean = new Eq($foreign.refEq);
  var ordBoolean = new Ord(function () {
      return eqBoolean;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (dictEq) {
      return eq(dictEq);
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl($eq$eq(dictEq)));
  };
  var divisionRingUnit = new DivisionRing(function () {
      return moduloSemiringUnit;
  }, function () {
      return ringUnit;
  });
  var numUnit = new Num(function () {
      return divisionRingUnit;
  });
  var divisionRingNumber = new DivisionRing(function () {
      return moduloSemiringNumber;
  }, function () {
      return ringNumber;
  });
  var numNumber = new Num(function () {
      return divisionRingNumber;
  });
  var div = function (dict) {
      return dict.div;
  };
  var $div = function (dictModuloSemiring) {
      return div(dictModuloSemiring);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $bar$bar = function (dictBooleanAlgebra) {
      return disj(dictBooleanAlgebra);
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var $amp$amp = function (dictBooleanAlgebra) {
      return conj(dictBooleanAlgebra);
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var functorFn = new Functor(compose(semigroupoidFn));
  var $less$less$less = function (dictSemigroupoid) {
      return compose(dictSemigroupoid);
  };
  var $greater$greater$greater = function (dictSemigroupoid) {
      return flip(compose(dictSemigroupoid));
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return eqArray(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              return $dollar(compare(ordInt)(0))($foreign.ordArrayImpl(function (x) {
                  return function (y) {
                      var $78 = compare(dictOrd)(x)(y);
                      if ($78 instanceof EQ) {
                          return 0;
                      };
                      if ($78 instanceof LT) {
                          return 1;
                      };
                      if ($78 instanceof GT) {
                          return negate(ringInt)(1);
                      };
                      throw new Error("Failed pattern match at Prelude line 660, column 1 - line 666, column 1: " + [ $78.constructor.name ]);
                  };
              })(xs)(ys));
          };
      });
  };
  var $less = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $79 = compare(dictOrd)(a1)(a2);
              if ($79 instanceof LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $less$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $80 = compare(dictOrd)(a1)(a2);
              if ($80 instanceof GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var $greater = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $81 = compare(dictOrd)(a1)(a2);
              if ($81 instanceof GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $greater$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $82 = compare(dictOrd)(a1)(a2);
              if ($82 instanceof LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedUnit = new Bounded(unit, unit);
  var boundedOrdering = new Bounded(LT.value, GT.value);
  var boundedOrdUnit = new BoundedOrd(function () {
      return boundedUnit;
  }, function () {
      return ordUnit;
  });
  var boundedOrdOrdering = new BoundedOrd(function () {
      return boundedOrdering;
  }, function () {
      return ordOrdering;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var boundedOrdInt = new BoundedOrd(function () {
      return boundedInt;
  }, function () {
      return ordInt;
  });
  var boundedChar = new Bounded($foreign.bottomChar, $foreign.topChar);
  var boundedOrdChar = new BoundedOrd(function () {
      return boundedChar;
  }, function () {
      return ordChar;
  });
  var boundedBoolean = new Bounded(false, true);
  var boundedOrdBoolean = new BoundedOrd(function () {
      return boundedBoolean;
  }, function () {
      return ordBoolean;
  });
  var bottom = function (dict) {
      return dict.bottom;
  };
  var boundedFn = function (dictBounded) {
      return new Bounded(function (v) {
          return bottom(dictBounded);
      }, function (v) {
          return top(dictBounded);
      });
  };
  var booleanAlgebraUnit = new BooleanAlgebra(function () {
      return boundedUnit;
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return unit;
  });
  var booleanAlgebraFn = function (dictBooleanAlgebra) {
      return new BooleanAlgebra(function () {
          return boundedFn(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (fx) {
          return function (fy) {
              return function (a) {
                  return conj(dictBooleanAlgebra)(fx(a))(fy(a));
              };
          };
      }, function (fx) {
          return function (fy) {
              return function (a) {
                  return disj(dictBooleanAlgebra)(fx(a))(fy(a));
              };
          };
      }, function (fx) {
          return function (a) {
              return not(dictBooleanAlgebra)(fx(a));
          };
      });
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var $div$eq = function (dictEq) {
      return function (x) {
          return function (y) {
              return not(booleanAlgebraBoolean)($eq$eq(dictEq)(x)(y));
          };
      };
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v) {
                  return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(f(v));
              });
          };
      };
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  };
  var asTypeOf = function (x) {
      return function (v) {
          return x;
      };
  };
  var applyFn = new Apply(function () {
      return functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var bindFn = new Bind(function () {
      return applyFn;
  }, function (m) {
      return function (f) {
          return function (x) {
              return f(m(x))(x);
          };
      };
  });
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeFn = new Applicative(function () {
      return applyFn;
  }, $$const);
  var monadFn = new Monad(function () {
      return applicativeFn;
  }, function () {
      return bindFn;
  });
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return $less$greater(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  var monadArray = new Monad(function () {
      return applicativeArray;
  }, function () {
      return bindArray;
  });
  var bindArray = new Bind(function () {
      return applyArray;
  }, $foreign.arrayBind);
  var applyArray = new Apply(function () {
      return functorArray;
  }, ap(monadArray));
  var applicativeArray = new Applicative(function () {
      return applyArray;
  }, function (x) {
      return [ x ];
  });
  var add = function (dict) {
      return dict.add;
  };
  var $plus = function (dictSemiring) {
      return add(dictSemiring);
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["BoundedOrd"] = BoundedOrd;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["DivisionRing"] = DivisionRing;
  exports["Num"] = Num;
  exports["Ring"] = Ring;
  exports["ModuloSemiring"] = ModuloSemiring;
  exports["Semiring"] = Semiring;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["||"] = $bar$bar;
  exports["&&"] = $amp$amp;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports[">="] = $greater$eq;
  exports["<="] = $less$eq;
  exports[">"] = $greater;
  exports["<"] = $less;
  exports["compare"] = compare;
  exports["/="] = $div$eq;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["-"] = $minus;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["/"] = $div;
  exports["mod"] = mod;
  exports["div"] = div;
  exports["*"] = $times;
  exports["+"] = $plus;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["liftM1"] = liftM1;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<#>"] = $less$hash$greater;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["<<<"] = $less$less$less;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["asTypeOf"] = asTypeOf;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["#"] = $hash;
  exports["$"] = $dollar;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
  exports["applicativeFn"] = applicativeFn;
  exports["applicativeArray"] = applicativeArray;
  exports["bindFn"] = bindFn;
  exports["bindArray"] = bindArray;
  exports["monadFn"] = monadFn;
  exports["monadArray"] = monadArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupOrdering"] = semigroupOrdering;
  exports["semigroupArray"] = semigroupArray;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringUnit"] = semiringUnit;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
  exports["ringUnit"] = ringUnit;
  exports["moduloSemiringInt"] = moduloSemiringInt;
  exports["moduloSemiringNumber"] = moduloSemiringNumber;
  exports["moduloSemiringUnit"] = moduloSemiringUnit;
  exports["divisionRingNumber"] = divisionRingNumber;
  exports["divisionRingUnit"] = divisionRingUnit;
  exports["numNumber"] = numNumber;
  exports["numUnit"] = numUnit;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqArray"] = eqArray;
  exports["eqOrdering"] = eqOrdering;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordUnit"] = ordUnit;
  exports["ordArray"] = ordArray;
  exports["ordOrdering"] = ordOrdering;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedUnit"] = boundedUnit;
  exports["boundedOrdering"] = boundedOrdering;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
  exports["boundedFn"] = boundedFn;
  exports["boundedOrdBoolean"] = boundedOrdBoolean;
  exports["boundedOrdUnit"] = boundedOrdUnit;
  exports["boundedOrdOrdering"] = boundedOrdOrdering;
  exports["boundedOrdInt"] = boundedOrdInt;
  exports["boundedOrdChar"] = boundedOrdChar;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["booleanAlgebraUnit"] = booleanAlgebraUnit;
  exports["booleanAlgebraFn"] = booleanAlgebraFn;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showUnit"] = showUnit;
  exports["showArray"] = showArray;
  exports["showOrdering"] = showOrdering;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Prelude.functorArray;
  }, Prelude.append(Prelude.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  var $less$bar$greater = function (dictAlt) {
      return alt(dictAlt);
  };
  exports["Alt"] = Alt;
  exports["<|>"] = $less$bar$greater;
  exports["alt"] = alt;
  exports["altArray"] = altArray;;
 
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];     
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;;
 
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];     
  var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
  };
  var alternativeArray = new Alternative(function () {
      return Control_Plus.plusArray;
  }, function () {
      return Prelude.applicativeArray;
  });
  exports["Alternative"] = Alternative;
  exports["alternativeArray"] = alternativeArray;;
 
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $less$times = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
          };
      };
  };
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  var lift5 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                          };
                      };
                  };
              };
          };
      };
  };
  var lift4 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                      };
                  };
              };
          };
      };
  };
  var lift3 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                  };
              };
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift5"] = lift5;
  exports["lift4"] = lift4;
  exports["lift3"] = lift3;
  exports["lift2"] = lift2;
  exports["*>"] = $times$greater;
  exports["<*"] = $less$times;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Prelude.id(Prelude.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Prelude.id(Prelude.categoryFn));
  };
  exports["Bifunctor"] = Bifunctor;
  exports["rmap"] = rmap;
  exports["lmap"] = lmap;
  exports["bimap"] = bimap;;
 
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Biapply = function (__superclass_Data$dotBifunctor$dotBifunctor_0, biapply) {
      this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
      this.biapply = biapply;
  };
  var $less$less$dollar$greater$greater = Prelude.id(Prelude.categoryFn);
  var biapply = function (dict) {
      return dict.biapply;
  };
  var $less$less$times$greater$greater = function (dictBiapply) {
      return biapply(dictBiapply);
  };
  var bilift2 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b);
                  };
              };
          };
      };
  };
  var bilift3 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return function (c) {
                          return $less$less$times$greater$greater(dictBiapply)($less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b))(c);
                      };
                  };
              };
          };
      };
  };
  var $times$greater$greater = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(Prelude["const"](Prelude.id(Prelude.categoryFn))))(a))(b);
          };
      };
  };
  var $less$less$times = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"])(Prelude["const"]))(a))(b);
          };
      };
  };
  exports["Biapply"] = Biapply;
  exports["bilift3"] = bilift3;
  exports["bilift2"] = bilift2;
  exports["<<*"] = $less$less$times;
  exports["*>>"] = $times$greater$greater;
  exports["<<*>>"] = $less$less$times$greater$greater;
  exports["biapply"] = biapply;
  exports["<<$>>"] = $less$less$dollar$greater$greater;;
 
})(PS["Control.Biapply"] = PS["Control.Biapply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapply = PS["Control.Biapply"];     
  var Biapplicative = function (__superclass_Control$dotBiapply$dotBiapply_0, bipure) {
      this["__superclass_Control.Biapply.Biapply_0"] = __superclass_Control$dotBiapply$dotBiapply_0;
      this.bipure = bipure;
  };
  var bipure = function (dict) {
      return dict.bipure;
  };
  exports["Biapplicative"] = Biapplicative;
  exports["bipure"] = bipure;;
 
})(PS["Control.Biapplicative"] = PS["Control.Biapplicative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $greater$eq$greater = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return Prelude[">>="](dictBind)(f(a))(g);
              };
          };
      };
  };
  var $eq$less$less = function (dictBind) {
      return function (f) {
          return function (m) {
              return Prelude[">>="](dictBind)(m)(f);
          };
      };
  };
  var $less$eq$less = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return $eq$less$less(dictBind)(f)(g(a));
              };
          };
      };
  };
  var join = function (dictBind) {
      return function (m) {
          return Prelude[">>="](dictBind)(m)(Prelude.id(Prelude.categoryFn));
      };
  };
  var ifM = function (dictBind) {
      return function (cond) {
          return function (t) {
              return function (f) {
                  return Prelude[">>="](dictBind)(cond)(function (cond$prime) {
                      if (cond$prime) {
                          return t;
                      };
                      if (!cond$prime) {
                          return f;
                      };
                      throw new Error("Failed pattern match at Control.Bind line 44, column 1 - line 45, column 1: " + [ cond$prime.constructor.name ]);
                  });
              };
          };
      };
  };
  exports["ifM"] = ifM;
  exports["join"] = join;
  exports["<=<"] = $less$eq$less;
  exports[">=>"] = $greater$eq$greater;
  exports["=<<"] = $eq$less$less;;
 
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Extend = function (__superclass_Prelude$dotFunctor_0, extend) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.extend = extend;
  };
  var extendFn = function (dictSemigroup) {
      return new Extend(function () {
          return Prelude.functorFn;
      }, function (f) {
          return function (g) {
              return function (w) {
                  return f(function (w$prime) {
                      return g(Prelude["<>"](dictSemigroup)(w)(w$prime));
                  });
              };
          };
      });
  };
  var extend = function (dict) {
      return dict.extend;
  };
  var $less$less$eq = function (dictExtend) {
      return extend(dictExtend);
  };
  var $eq$less$eq = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return f($less$less$eq(dictExtend)(g)(w));
              };
          };
      };
  };
  var $eq$greater$eq = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return g($less$less$eq(dictExtend)(f)(w));
              };
          };
      };
  };
  var $eq$greater$greater = function (dictExtend) {
      return function (w) {
          return function (f) {
              return $less$less$eq(dictExtend)(f)(w);
          };
      };
  };
  var duplicate = function (dictExtend) {
      return extend(dictExtend)(Prelude.id(Prelude.categoryFn));
  };
  exports["Extend"] = Extend;
  exports["duplicate"] = duplicate;
  exports["=<="] = $eq$less$eq;
  exports["=>="] = $eq$greater$eq;
  exports["=>>"] = $eq$greater$greater;
  exports["<<="] = $less$less$eq;
  exports["extend"] = extend;
  exports["extendFn"] = extendFn;;
 
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Extend = PS["Control.Extend"];     
  var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
      this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
      this.extract = extract;
  };
  var extract = function (dict) {
      return dict.extract;
  };
  exports["Comonad"] = Comonad;
  exports["extract"] = extract;;
 
})(PS["Control.Comonad"] = PS["Control.Comonad"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];     
  var ComonadTrans = function (lower) {
      this.lower = lower;
  };
  var lower = function (dict) {
      return dict.lower;
  };
  exports["ComonadTrans"] = ComonadTrans;
  exports["lower"] = lower;;
 
})(PS["Control.Comonad.Trans"] = PS["Control.Comonad.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
  exports["defer"] = defer;;
 
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Prelude.semigroupUnit;
  }, Prelude.unit);
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");
  var monoidArray = new Monoid(function () {
      return Prelude.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Prelude.semigroupFn(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Prelude["const"](mempty(dictMonoid)));
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Disj = function (x) {
      return x;
  };
  var showDisj = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Disj (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semiringDisj = function (dictBooleanAlgebra) {
      return new Prelude.Semiring(function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()), Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var semigroupDisj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runDisj = function (v) {
      return v;
  };
  var monoidDisj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictBooleanAlgebra);
      }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var functorDisj = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDisj = new Control_Extend.Extend(function () {
      return functorDisj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDisj = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordDisj = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqDisj(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadDisj = new Control_Comonad.Comonad(function () {
      return extendDisj;
  }, runDisj);
  var boundedDisj = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
  };
  var applyDisj = new Prelude.Apply(function () {
      return functorDisj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDisj = new Prelude.Bind(function () {
      return applyDisj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDisj = new Prelude.Applicative(function () {
      return applyDisj;
  }, Disj);
  var monadDisj = new Prelude.Monad(function () {
      return applicativeDisj;
  }, function () {
      return bindDisj;
  });
  exports["Disj"] = Disj;
  exports["runDisj"] = runDisj;
  exports["eqDisj"] = eqDisj;
  exports["ordDisj"] = ordDisj;
  exports["boundedDisj"] = boundedDisj;
  exports["functorDisj"] = functorDisj;
  exports["applyDisj"] = applyDisj;
  exports["applicativeDisj"] = applicativeDisj;
  exports["bindDisj"] = bindDisj;
  exports["monadDisj"] = monadDisj;
  exports["extendDisj"] = extendDisj;
  exports["comonadDisj"] = comonadDisj;
  exports["showDisj"] = showDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
  exports["semiringDisj"] = semiringDisj;;
 
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Conj = function (x) {
      return x;
  };
  var showConj = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Conj (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semiringConj = function (dictBooleanAlgebra) {
      return new Prelude.Semiring(function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()), Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var semigroupConj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runConj = function (v) {
      return v;
  };
  var monoidConj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictBooleanAlgebra);
      }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var functorConj = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendConj = new Control_Extend.Extend(function () {
      return functorConj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqConj = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordConj = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqConj(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadConj = new Control_Comonad.Comonad(function () {
      return extendConj;
  }, runConj);
  var boundedConj = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
  };
  var applyConj = new Prelude.Apply(function () {
      return functorConj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindConj = new Prelude.Bind(function () {
      return applyConj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeConj = new Prelude.Applicative(function () {
      return applyConj;
  }, Conj);
  var monadConj = new Prelude.Monad(function () {
      return applicativeConj;
  }, function () {
      return bindConj;
  });
  exports["Conj"] = Conj;
  exports["runConj"] = runConj;
  exports["eqConj"] = eqConj;
  exports["ordConj"] = ordConj;
  exports["boundedConj"] = boundedConj;
  exports["functorConj"] = functorConj;
  exports["applyConj"] = applyConj;
  exports["applicativeConj"] = applicativeConj;
  exports["bindConj"] = bindConj;
  exports["monadConj"] = monadConj;
  exports["extendConj"] = extendConj;
  exports["comonadConj"] = comonadConj;
  exports["showConj"] = showConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
  exports["semiringConj"] = semiringConj;;
 
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Invariant = function (imap) {
      this.imap = imap;
  };
  var imapF = function (dictFunctor) {
      return function ($1) {
          return Prelude["const"](Prelude.map(dictFunctor)($1));
      };
  };
  var invariantArray = new Invariant(imapF(Prelude.functorArray));
  var invariantFn = new Invariant(imapF(Prelude.functorFn));
  var imap = function (dict) {
      return dict.imap;
  };
  exports["Invariant"] = Invariant;
  exports["imapF"] = imapF;
  exports["imap"] = imap;
  exports["invariantFn"] = invariantFn;
  exports["invariantArray"] = invariantArray;;
 
})(PS["Data.Functor.Invariant"] = PS["Data.Functor.Invariant"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return function ($10) {
              return v(v1($10));
          };
      };
  });
  var runEndo = function (v) {
      return v;
  };
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Prelude.id(Prelude.categoryFn));
  var invariantEndo = new Data_Functor_Invariant.Invariant(function (ab) {
      return function (ba) {
          return function (v) {
              return function ($11) {
                  return ab(v(ba($11)));
              };
          };
      };
  });
  exports["Endo"] = Endo;
  exports["runEndo"] = runEndo;
  exports["invariantEndo"] = invariantEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;;
 
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Dual = function (x) {
      return x;
  };
  var showDual = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Dual (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semigroupDual = function (dictSemigroup) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["<>"](dictSemigroup)(v1)(v);
          };
      });
  };
  var runDual = function (v) {
      return v;
  };
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var invariantDual = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorDual = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDual = new Control_Extend.Extend(function () {
      return functorDual;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDual = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordDual = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqDual(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadDual = new Control_Comonad.Comonad(function () {
      return extendDual;
  }, runDual);
  var applyDual = new Prelude.Apply(function () {
      return functorDual;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDual = new Prelude.Bind(function () {
      return applyDual;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDual = new Prelude.Applicative(function () {
      return applyDual;
  }, Dual);
  var monadDual = new Prelude.Monad(function () {
      return applicativeDual;
  }, function () {
      return bindDual;
  });
  exports["Dual"] = Dual;
  exports["runDual"] = runDual;
  exports["eqDual"] = eqDual;
  exports["ordDual"] = ordDual;
  exports["functorDual"] = functorDual;
  exports["applyDual"] = applyDual;
  exports["applicativeDual"] = applicativeDual;
  exports["bindDual"] = bindDual;
  exports["monadDual"] = monadDual;
  exports["extendDual"] = extendDual;
  exports["comonadDual"] = comonadDual;
  exports["invariantDual"] = invariantDual;
  exports["showDual"] = showDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;;
 
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];     
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldr = function (dict) {
      return dict.bifoldr;
  };
  var bitraverse_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)(function ($18) {
                      return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($18));
                  })(function ($19) {
                      return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(g($19));
                  })(Prelude.pure(dictApplicative)(Prelude.unit));
              };
          };
      };
  };
  var bifor_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  var bisequence_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return bitraverse_(dictBifoldable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
      };
  };
  var bifoldl = function (dict) {
      return dict.bifoldl;
  };
  var bifoldMapDefaultR = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return function (p) {
                      return bifoldr(dictBifoldable)(function ($20) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f($20));
                      })(function ($21) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(g($21));
                      })(Data_Monoid.mempty(dictMonoid))(p);
                  };
              };
          };
      };
  };
  var bifoldMapDefaultL = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return function (p) {
                      return bifoldl(dictBifoldable)(function (m) {
                          return function (a) {
                              return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(m)(f(a));
                          };
                      })(function (m) {
                          return function (b) {
                              return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(m)(g(b));
                          };
                      })(Data_Monoid.mempty(dictMonoid))(p);
                  };
              };
          };
      };
  };
  var bifoldMap = function (dict) {
      return dict.bifoldMap;
  };
  var bifoldlDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($22) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(f)($22)));
                      })(function ($23) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(g)($23)));
                      })(p)))(z);
                  };
              };
          };
      };
  };
  var bifoldrDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Monoid_Endo.runEndo(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo)(function ($24) {
                          return Data_Monoid_Endo.Endo(f($24));
                      })(function ($25) {
                          return Data_Monoid_Endo.Endo(g($25));
                      })(p))(z);
                  };
              };
          };
      };
  };
  var bifold = function (dictBifoldable) {
      return function (dictMonoid) {
          return bifoldMap(dictBifoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
      };
  };
  var biany = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($26) {
                      return Data_Monoid_Disj.runDisj(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($27) {
                          return Data_Monoid_Disj.Disj(p($27));
                      })(function ($28) {
                          return Data_Monoid_Disj.Disj(q($28));
                      })($26));
                  };
              };
          };
      };
  };
  var biall = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($29) {
                      return Data_Monoid_Conj.runConj(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($30) {
                          return Data_Monoid_Conj.Conj(p($30));
                      })(function ($31) {
                          return Data_Monoid_Conj.Conj(q($31));
                      })($29));
                  };
              };
          };
      };
  };
  exports["Bifoldable"] = Bifoldable;
  exports["biall"] = biall;
  exports["biany"] = biany;
  exports["bisequence_"] = bisequence_;
  exports["bifor_"] = bifor_;
  exports["bitraverse_"] = bitraverse_;
  exports["bifold"] = bifold;
  exports["bifoldMapDefaultL"] = bifoldMapDefaultL;
  exports["bifoldMapDefaultR"] = bifoldMapDefaultR;
  exports["bifoldlDefault"] = bifoldlDefault;
  exports["bifoldrDefault"] = bifoldrDefault;
  exports["bifoldMap"] = bifoldMap;
  exports["bifoldl"] = bifoldl;
  exports["bifoldr"] = bifoldr;;
 
})(PS["Data.Bifoldable"] = PS["Data.Bifoldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Bitraversable = function (__superclass_Data$dotBifoldable$dotBifoldable_1, __superclass_Data$dotBifunctor$dotBifunctor_0, bisequence, bitraverse) {
      this["__superclass_Data.Bifoldable.Bifoldable_1"] = __superclass_Data$dotBifoldable$dotBifoldable_1;
      this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var bisequenceDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return bitraverse(dictBitraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn))(t);
          };
      };
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  var bitraverseDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return function (t) {
                      return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g)(t));
                  };
              };
          };
      };
  };
  var bifor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  exports["Bitraversable"] = Bitraversable;
  exports["bifor"] = bifor;
  exports["bisequenceDefault"] = bisequenceDefault;
  exports["bitraverseDefault"] = bitraverseDefault;
  exports["bisequence"] = bisequence;
  exports["bitraverse"] = bitraverse;;
 
})(PS["Data.Bitraversable"] = PS["Data.Bitraversable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];     
  var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
      this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
  };
  var monadPlusArray = new MonadPlus(function () {
      return Control_Alternative.alternativeArray;
  }, function () {
      return Prelude.monadArray;
  });
  var guard = function (dictMonadPlus) {
      return function (v) {
          if (v) {
              return Prelude["return"]((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
          };
          throw new Error("Failed pattern match at Control.MonadPlus line 35, column 1 - line 36, column 1: " + [ v.constructor.name ]);
      };
  };
  exports["MonadPlus"] = MonadPlus;
  exports["guard"] = guard;
  exports["monadPlusArray"] = monadPlusArray;;
 
})(PS["Control.MonadPlus"] = PS["Control.MonadPlus"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Prelude.Show(function (v) {
          if (v instanceof Just) {
              return "Just (" + (Prelude.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 289, column 1 - line 291, column 19: " + [ v.constructor.name ]);
      });
  };
  var semigroupMaybe = function (dictSemigroup) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe line 231, column 1 - line 236, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe$prime = function (g) {
      return function (f) {
          return function (v) {
              if (v instanceof Nothing) {
                  return g(Prelude.unit);
              };
              if (v instanceof Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 39, column 1 - line 40, column 1: " + [ g.constructor.name, f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var maybe = function (b) {
      return function (f) {
          return function (v) {
              if (v instanceof Nothing) {
                  return b;
              };
              if (v instanceof Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ b.constructor.name, f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Prelude["const"](false));
  var isJust = maybe(false)(Prelude["const"](true));
  var functorMaybe = new Prelude.Functor(function (fn) {
      return function (v) {
          if (v instanceof Just) {
              return new Just(fn(v.value0));
          };
          return Nothing.value;
      };
  });
  var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
  var fromMaybe$prime = function (a) {
      return maybe$prime(a)(Prelude.id(Prelude.categoryFn));
  };
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  var extendMaybe = new Control_Extend.Extend(function () {
      return functorMaybe;
  }, function (f) {
      return function (v) {
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          return new Just(f(v));
      };
  });
  var eqMaybe = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              if (v instanceof Nothing && v1 instanceof Nothing) {
                  return true;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return Prelude["=="](dictEq)(v.value0)(v1.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqMaybe(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              if (v instanceof Just && v1 instanceof Just) {
                  return Prelude.compare(dictOrd)(v.value0)(v1.value0);
              };
              if (v instanceof Nothing && v1 instanceof Nothing) {
                  return Prelude.EQ.value;
              };
              if (v instanceof Nothing) {
                  return Prelude.LT.value;
              };
              if (v1 instanceof Nothing) {
                  return Prelude.GT.value;
              };
              throw new Error("Failed pattern match at Data.Maybe line 269, column 1 - line 275, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var boundedMaybe = function (dictBounded) {
      return new Prelude.Bounded(Nothing.value, new Just(Prelude.top(dictBounded)));
  };
  var boundedOrdMaybe = function (dictBoundedOrd) {
      return new Prelude.BoundedOrd(function () {
          return boundedMaybe(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
      }, function () {
          return ordMaybe(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
      });
  };
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (x) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(x);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 121, column 1 - line 145, column 1: " + [ v.constructor.name, x.constructor.name ]);
      };
  });
  var bindMaybe = new Prelude.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (k) {
          if (v instanceof Just) {
              return k(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 180, column 1 - line 199, column 1: " + [ v.constructor.name, k.constructor.name ]);
      };
  });
  var booleanAlgebraMaybe = function (dictBooleanAlgebra) {
      return new Prelude.BooleanAlgebra(function () {
          return boundedMaybe(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.conj(dictBooleanAlgebra))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.disj(dictBooleanAlgebra))(x))(y);
          };
      }, Prelude.map(functorMaybe)(Prelude.not(dictBooleanAlgebra)));
  };
  var semiringMaybe = function (dictSemiring) {
      return new Prelude.Semiring(function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.add(dictSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.mul(dictSemiring))(x))(y);
          };
      }, new Just(Prelude.one(dictSemiring)), new Just(Prelude.zero(dictSemiring)));
  };
  var moduloSemiringMaybe = function (dictModuloSemiring) {
      return new Prelude.ModuloSemiring(function () {
          return semiringMaybe(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.div(dictModuloSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.mod(dictModuloSemiring))(x))(y);
          };
      });
  };
  var ringMaybe = function (dictRing) {
      return new Prelude.Ring(function () {
          return semiringMaybe(dictRing["__superclass_Prelude.Semiring_0"]());
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.sub(dictRing))(x))(y);
          };
      });
  };
  var divisionRingMaybe = function (dictDivisionRing) {
      return new Prelude.DivisionRing(function () {
          return moduloSemiringMaybe(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
      }, function () {
          return ringMaybe(dictDivisionRing["__superclass_Prelude.Ring_0"]());
      });
  };
  var numMaybe = function (dictNum) {
      return new Prelude.Num(function () {
          return divisionRingMaybe(dictNum["__superclass_Prelude.DivisionRing_0"]());
      });
  };
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Prelude.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (r) {
          if (v instanceof Nothing) {
              return r;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return plusMaybe;
  }, function () {
      return applicativeMaybe;
  });
  var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isNothing"] = isNothing;
  exports["isJust"] = isJust;
  exports["fromMaybe'"] = fromMaybe$prime;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe'"] = maybe$prime;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadPlusMaybe"] = monadPlusMaybe;
  exports["extendMaybe"] = extendMaybe;
  exports["invariantMaybe"] = invariantMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["semiringMaybe"] = semiringMaybe;
  exports["moduloSemiringMaybe"] = moduloSemiringMaybe;
  exports["ringMaybe"] = ringMaybe;
  exports["divisionRingMaybe"] = divisionRingMaybe;
  exports["numMaybe"] = numMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
  exports["boundedMaybe"] = boundedMaybe;
  exports["boundedOrdMaybe"] = boundedOrdMaybe;
  exports["booleanAlgebraMaybe"] = booleanAlgebraMaybe;
  exports["showMaybe"] = showMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];     
  var First = function (x) {
      return x;
  };
  var showFirst = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "First (" + (Prelude.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupFirst = new Prelude.Semigroup(function (v) {
      return function (second) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return second;
      };
  });
  var runFirst = function (v) {
      return v;
  };
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  var functorFirst = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(v);
      };
  });
  var invariantFirst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorFirst));
  var extendFirst = new Control_Extend.Extend(function () {
      return functorFirst;
  }, function (f) {
      return function (v) {
          return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($33) {
              return f(First($33));
          })(v);
      };
  });
  var eqFirst = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](Data_Maybe.eqMaybe(dictEq))(v)(v1);
          };
      });
  };
  var ordFirst = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqFirst(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
          };
      });
  };
  var boundedFirst = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(Data_Maybe.boundedMaybe(dictBounded)), Prelude.top(Data_Maybe.boundedMaybe(dictBounded)));
  };
  var applyFirst = new Prelude.Apply(function () {
      return functorFirst;
  }, function (v) {
      return function (v1) {
          return Prelude["<*>"](Data_Maybe.applyMaybe)(v)(v1);
      };
  });
  var bindFirst = new Prelude.Bind(function () {
      return applyFirst;
  }, function (v) {
      return function (f) {
          return Prelude.bind(Data_Maybe.bindMaybe)(v)(function ($34) {
              return runFirst(f($34));
          });
      };
  });
  var applicativeFirst = new Prelude.Applicative(function () {
      return applyFirst;
  }, function ($35) {
      return First(Prelude.pure(Data_Maybe.applicativeMaybe)($35));
  });
  var monadFirst = new Prelude.Monad(function () {
      return applicativeFirst;
  }, function () {
      return bindFirst;
  });
  exports["First"] = First;
  exports["runFirst"] = runFirst;
  exports["eqFirst"] = eqFirst;
  exports["ordFirst"] = ordFirst;
  exports["boundedFirst"] = boundedFirst;
  exports["functorFirst"] = functorFirst;
  exports["applyFirst"] = applyFirst;
  exports["applicativeFirst"] = applicativeFirst;
  exports["bindFirst"] = bindFirst;
  exports["monadFirst"] = monadFirst;
  exports["extendFirst"] = extendFirst;
  exports["invariantFirst"] = invariantFirst;
  exports["showFirst"] = showFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;;
 
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Last = function (x) {
      return x;
  };
  var showLast = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Last (" + (Prelude.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupLast = new Prelude.Semigroup(function (last) {
      return function (v) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return last;
          };
          throw new Error("Failed pattern match at Data.Maybe.Last line 57, column 1 - line 61, column 1: " + [ last.constructor.name, v.constructor.name ]);
      };
  });
  var runLast = function (v) {
      return v;
  };
  var monoidLast = new Data_Monoid.Monoid(function () {
      return semigroupLast;
  }, Data_Maybe.Nothing.value);
  var functorLast = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(v);
      };
  });
  var invariantLast = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLast));
  var extendLast = new Control_Extend.Extend(function () {
      return functorLast;
  }, function (f) {
      return function (v) {
          return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($33) {
              return f(Last($33));
          })(v);
      };
  });
  var eqLast = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](Data_Maybe.eqMaybe(dictEq))(v)(v1);
          };
      });
  };
  var ordLast = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqLast(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
          };
      });
  };
  var boundedLast = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(Data_Maybe.boundedMaybe(dictBounded)), Prelude.top(Data_Maybe.boundedMaybe(dictBounded)));
  };
  var applyLast = new Prelude.Apply(function () {
      return functorLast;
  }, function (v) {
      return function (v1) {
          return Prelude["<*>"](Data_Maybe.applyMaybe)(v)(v1);
      };
  });
  var bindLast = new Prelude.Bind(function () {
      return applyLast;
  }, function (v) {
      return function (f) {
          return Prelude.bind(Data_Maybe.bindMaybe)(v)(function ($34) {
              return runLast(f($34));
          });
      };
  });
  var applicativeLast = new Prelude.Applicative(function () {
      return applyLast;
  }, function ($35) {
      return Last(Prelude.pure(Data_Maybe.applicativeMaybe)($35));
  });
  var monadLast = new Prelude.Monad(function () {
      return applicativeLast;
  }, function () {
      return bindLast;
  });
  exports["Last"] = Last;
  exports["runLast"] = runLast;
  exports["eqLast"] = eqLast;
  exports["ordLast"] = ordLast;
  exports["boundedLast"] = boundedLast;
  exports["functorLast"] = functorLast;
  exports["applyLast"] = applyLast;
  exports["applicativeLast"] = applicativeLast;
  exports["bindLast"] = bindLast;
  exports["monadLast"] = monadLast;
  exports["extendLast"] = extendLast;
  exports["invariantLast"] = invariantLast;
  exports["showLast"] = showLast;
  exports["semigroupLast"] = semigroupLast;
  exports["monoidLast"] = monoidLast;;
 
})(PS["Data.Maybe.Last"] = PS["Data.Maybe.Last"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Additive = function (x) {
      return x;
  };
  var showAdditive = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Additive (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semigroupAdditive = function (dictSemiring) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["+"](dictSemiring)(v)(v1);
          };
      });
  };
  var runAdditive = function (v) {
      return v;
  };
  var monoidAdditive = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAdditive(dictSemiring);
      }, Prelude.zero(dictSemiring));
  };
  var invariantAdditive = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorAdditive = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendAdditive = new Control_Extend.Extend(function () {
      return functorAdditive;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqAdditive = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordAdditive = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqAdditive(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadAdditive = new Control_Comonad.Comonad(function () {
      return extendAdditive;
  }, runAdditive);
  var applyAdditive = new Prelude.Apply(function () {
      return functorAdditive;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindAdditive = new Prelude.Bind(function () {
      return applyAdditive;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeAdditive = new Prelude.Applicative(function () {
      return applyAdditive;
  }, Additive);
  var monadAdditive = new Prelude.Monad(function () {
      return applicativeAdditive;
  }, function () {
      return bindAdditive;
  });
  exports["Additive"] = Additive;
  exports["runAdditive"] = runAdditive;
  exports["eqAdditive"] = eqAdditive;
  exports["ordAdditive"] = ordAdditive;
  exports["functorAdditive"] = functorAdditive;
  exports["applyAdditive"] = applyAdditive;
  exports["applicativeAdditive"] = applicativeAdditive;
  exports["bindAdditive"] = bindAdditive;
  exports["monadAdditive"] = monadAdditive;
  exports["extendAdditive"] = extendAdditive;
  exports["comonadAdditive"] = comonadAdditive;
  exports["invariantAdditive"] = invariantAdditive;
  exports["showAdditive"] = showAdditive;
  exports["semigroupAdditive"] = semigroupAdditive;
  exports["monoidAdditive"] = monoidAdditive;;
 
})(PS["Data.Monoid.Additive"] = PS["Data.Monoid.Additive"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Multiplicative = function (x) {
      return x;
  };
  var showMultiplicative = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Multiplicative (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semigroupMultiplicative = function (dictSemiring) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["*"](dictSemiring)(v)(v1);
          };
      });
  };
  var runMultiplicative = function (v) {
      return v;
  };
  var monoidMultiplicative = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMultiplicative(dictSemiring);
      }, Prelude.one(dictSemiring));
  };
  var invariantMultiplicative = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorMultiplicative = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendMultiplicative = new Control_Extend.Extend(function () {
      return functorMultiplicative;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqMultiplicative = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordMultiplicative = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqMultiplicative(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadMultiplicative = new Control_Comonad.Comonad(function () {
      return extendMultiplicative;
  }, runMultiplicative);
  var applyMultiplicative = new Prelude.Apply(function () {
      return functorMultiplicative;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindMultiplicative = new Prelude.Bind(function () {
      return applyMultiplicative;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeMultiplicative = new Prelude.Applicative(function () {
      return applyMultiplicative;
  }, Multiplicative);
  var monadMultiplicative = new Prelude.Monad(function () {
      return applicativeMultiplicative;
  }, function () {
      return bindMultiplicative;
  });
  exports["Multiplicative"] = Multiplicative;
  exports["runMultiplicative"] = runMultiplicative;
  exports["eqMultiplicative"] = eqMultiplicative;
  exports["ordMultiplicative"] = ordMultiplicative;
  exports["functorMultiplicative"] = functorMultiplicative;
  exports["applyMultiplicative"] = applyMultiplicative;
  exports["applicativeMultiplicative"] = applicativeMultiplicative;
  exports["bindMultiplicative"] = bindMultiplicative;
  exports["monadMultiplicative"] = monadMultiplicative;
  exports["extendMultiplicative"] = extendMultiplicative;
  exports["comonadMultiplicative"] = comonadMultiplicative;
  exports["invariantMultiplicative"] = invariantMultiplicative;
  exports["showMultiplicative"] = showMultiplicative;
  exports["semigroupMultiplicative"] = semigroupMultiplicative;
  exports["monoidMultiplicative"] = monoidMultiplicative;;
 
})(PS["Data.Monoid.Multiplicative"] = PS["Data.Monoid.Multiplicative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($159) {
                  return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($159));
              })(Prelude.pure(dictApplicative)(Prelude.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Prelude.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Prelude.id(Prelude.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $85 = cmp(v.value0)(v1);
                          if ($85 instanceof Prelude.GT) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 246, column 3 - line 247, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Prelude.compare(dictOrd));
      };
  };
  var mconcat = function (dictFoldable) {
      return function (dictMonoid) {
          return foldl(dictFoldable)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(dictMonoid));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $89 = cmp(v.value0)(v1);
                          if ($89 instanceof Prelude.LT) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 261, column 3 - line 262, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Prelude.compare(dictOrd));
      };
  };
  var product = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Prelude["*"](dictSemiring))(Prelude.one(dictSemiring));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Prelude["+"](dictSemiring))(Prelude.zero(dictSemiring));
      };
  };
  var foldableMultiplicative = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(z)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, z.constructor.name, v.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, z.constructor.name, v.constructor.name ]);
          };
      };
  });
  var foldableDual = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableDisj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableConj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableAdditive = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldl(dictFoldable)(function (acc) {
                      return function (x) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldableFirst = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldableLast = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($160) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(c)($160)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Monoid_Endo.runEndo(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($161) {
                      return Data_Monoid_Endo.Endo(c($161));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          return foldl(dictFoldable)(function (r) {
              return function (x) {
                  var $158 = p(x);
                  if ($158) {
                      return new Data_Maybe.Just(x);
                  };
                  if (!$158) {
                      return r;
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 233, column 1 - line 234, column 1: " + [ $158.constructor.name ]);
              };
          })(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($162) {
                  return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($163) {
                      return Data_Monoid_Disj.Disj(p($163));
                  })($162));
              };
          };
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($164) {
              return any(dictFoldable)(Prelude.booleanAlgebraBoolean)(Prelude["=="](dictEq)($164));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($165) {
                  return !elem(dictFoldable)(dictEq)(x)($165);
              };
          };
      };
  };
  var or = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return any(dictFoldable)(dictBooleanAlgebra)(Prelude.id(Prelude.categoryFn));
      };
  };
  var all = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($166) {
                  return Data_Monoid_Conj.runConj(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($167) {
                      return Data_Monoid_Conj.Conj(p($167));
                  })($166));
              };
          };
      };
  };
  var and = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return all(dictFoldable)(dictBooleanAlgebra)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["minimumBy"] = minimumBy;
  exports["minimum"] = minimum;
  exports["maximumBy"] = maximumBy;
  exports["maximum"] = maximum;
  exports["find"] = find;
  exports["notElem"] = notElem;
  exports["elem"] = elem;
  exports["product"] = product;
  exports["sum"] = sum;
  exports["all"] = all;
  exports["any"] = any;
  exports["or"] = or;
  exports["and"] = and;
  exports["intercalate"] = intercalate;
  exports["mconcat"] = mconcat;
  exports["sequence_"] = sequence_;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldlDefault"] = foldlDefault;
  exports["foldrDefault"] = foldrDefault;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableFirst"] = foldableFirst;
  exports["foldableLast"] = foldableLast;
  exports["foldableAdditive"] = foldableAdditive;
  exports["foldableDual"] = foldableDual;
  exports["foldableDisj"] = foldableDisj;
  exports["foldableConj"] = foldableConj;
  exports["foldableMultiplicative"] = foldableMultiplicative;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont (fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList (x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray (list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var StateL = function (x) {
      return x;
  };
  var StateR = function (x) {
      return x;
  };
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableMultiplicative = new Traversable(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function () {
      return Data_Monoid_Multiplicative.functorMultiplicative;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
      };
  });
  var traversableMaybe = new Traversable(function () {
      return Data_Foldable.foldableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Prelude.pure(dictApplicative)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable line 76, column 1 - line 82, column 1: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Prelude.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(f(v.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable line 76, column 1 - line 82, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var traversableDual = new Traversable(function () {
      return Data_Foldable.foldableDual;
  }, function () {
      return Data_Monoid_Dual.functorDual;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(f(v));
          };
      };
  });
  var traversableDisj = new Traversable(function () {
      return Data_Foldable.foldableDisj;
  }, function () {
      return Data_Monoid_Disj.functorDisj;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Disj.Disj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Disj.Disj)(f(v));
          };
      };
  });
  var traversableConj = new Traversable(function () {
      return Data_Foldable.foldableConj;
  }, function () {
      return Data_Monoid_Conj.functorConj;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Conj.Conj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Conj.Conj)(f(v));
          };
      };
  });
  var traversableAdditive = new Traversable(function () {
      return Data_Foldable.foldableAdditive;
  }, function () {
      return Data_Monoid_Additive.functorAdditive;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(f(v));
          };
      };
  });
  var stateR = function (v) {
      return v;
  };
  var stateL = function (v) {
      return v;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Prelude.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Prelude.apply(dictApplicative["__superclass_Prelude.Apply_0"]()))(Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var traversableFirst = new Traversable(function () {
      return Data_Foldable.foldableFirst;
  }, function () {
      return Data_Maybe_First.functorFirst;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traversableLast = new Traversable(function () {
      return Data_Foldable.foldableLast;
  }, function () {
      return Data_Maybe_Last.functorLast;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traverseDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (ta) {
                  return sequence(dictTraversable)(dictApplicative)(Prelude.map(dictTraversable["__superclass_Prelude.Functor_0"]())(f)(ta));
              };
          };
      };
  };
  var functorStateR = new Prelude.Functor(function (f) {
      return function (k) {
          return function (s) {
              var $74 = stateR(k)(s);
              return {
                  accum: $74.accum, 
                  value: f($74.value)
              };
          };
      };
  });
  var functorStateL = new Prelude.Functor(function (f) {
      return function (k) {
          return function (s) {
              var $77 = stateL(k)(s);
              return {
                  accum: $77.accum, 
                  value: f($77.value)
              };
          };
      };
  });
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  var applyStateR = new Prelude.Apply(function () {
      return functorStateR;
  }, function (f) {
      return function (x) {
          return function (s) {
              var $80 = stateR(x)(s);
              var $81 = stateR(f)($80.accum);
              return {
                  accum: $81.accum, 
                  value: $81.value($80.value)
              };
          };
      };
  });
  var applyStateL = new Prelude.Apply(function () {
      return functorStateL;
  }, function (f) {
      return function (x) {
          return function (s) {
              var $86 = stateL(f)(s);
              var $87 = stateL(x)($86.accum);
              return {
                  accum: $87.accum, 
                  value: $86.value($87.value)
              };
          };
      };
  });
  var applicativeStateR = new Prelude.Applicative(function () {
      return applyStateR;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumR = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateR(traverse(dictTraversable)(applicativeStateR)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanr = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumR(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(a)(b);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var applicativeStateL = new Prelude.Applicative(function () {
      return applyStateL;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumL = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateL(traverse(dictTraversable)(applicativeStateL)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanl = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumL(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(b)(a);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["mapAccumR"] = mapAccumR;
  exports["mapAccumL"] = mapAccumL;
  exports["scanr"] = scanr;
  exports["scanl"] = scanl;
  exports["for"] = $$for;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverseDefault"] = traverseDefault;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableFirst"] = traversableFirst;
  exports["traversableLast"] = traversableLast;
  exports["traversableAdditive"] = traversableAdditive;
  exports["traversableDual"] = traversableDual;
  exports["traversableConj"] = traversableConj;
  exports["traversableDisj"] = traversableDisj;
  exports["traversableMultiplicative"] = traversableMultiplicative;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var swap = function (v) {
      return new Tuple(v.value1, v.value0);
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Prelude.Show(function (v) {
              return "Tuple (" + (Prelude.show(dictShow)(v.value0) + (") (" + (Prelude.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var semiringTuple = function (dictSemiring) {
      return function (dictSemiring1) {
          return new Prelude.Semiring(function (v) {
              return function (v1) {
                  return new Tuple(Prelude.add(dictSemiring)(v.value0)(v1.value0), Prelude.add(dictSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.mul(dictSemiring)(v.value0)(v1.value0), Prelude.mul(dictSemiring1)(v.value1)(v1.value1));
              };
          }, new Tuple(Prelude.one(dictSemiring), Prelude.one(dictSemiring1)), new Tuple(Prelude.zero(dictSemiring), Prelude.zero(dictSemiring1)));
      };
  };
  var semigroupoidTuple = new Prelude.Semigroupoid(function (v) {
      return function (v1) {
          return new Tuple(v1.value0, v.value1);
      };
  });
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Prelude.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), Prelude["<>"](dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var ringTuple = function (dictRing) {
      return function (dictRing1) {
          return new Prelude.Ring(function () {
              return semiringTuple(dictRing["__superclass_Prelude.Semiring_0"]())(dictRing1["__superclass_Prelude.Semiring_0"]());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.sub(dictRing)(v.value0)(v1.value0), Prelude.sub(dictRing1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictMonoid1["__superclass_Prelude.Semigroup_0"]());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };
  var moduloSemiringTuple = function (dictModuloSemiring) {
      return function (dictModuloSemiring1) {
          return new Prelude.ModuloSemiring(function () {
              return semiringTuple(dictModuloSemiring["__superclass_Prelude.Semiring_0"]())(dictModuloSemiring1["__superclass_Prelude.Semiring_0"]());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.div(dictModuloSemiring)(v.value0)(v1.value0), Prelude.div(dictModuloSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.mod(dictModuloSemiring)(v.value0)(v1.value0), Prelude.mod(dictModuloSemiring1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function (f) {
                  return Data_Maybe_First.runFirst(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $145 = Prelude["=="](dictEq)(a)(v.value0);
                      if ($145) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      if (!$145) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Data.Tuple line 173, column 1 - line 174, column 1: " + [ $145.constructor.name ]);
                  })(f));
              };
          };
      };
  };
  var functorTuple = new Prelude.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });
  var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
  var fst = function (v) {
      return v.value0;
  };
  var lazyTuple = function (dictLazy) {
      return function (dictLazy1) {
          return new Control_Lazy.Lazy(function (f) {
              return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                  return fst(f(Prelude.unit));
              }), Control_Lazy.defer(dictLazy1)(function (v) {
                  return snd(f(Prelude.unit));
              }));
          });
      };
  };
  var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v.value1)(z);
          };
      };
  });
  var traversableTuple = new Data_Traversable.Traversable(function () {
      return foldableTuple;
  }, function () {
      return functorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var extendTuple = new Control_Extend.Extend(function () {
      return functorTuple;
  }, function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v));
      };
  });
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Prelude.Eq(function (v) {
              return function (v1) {
                  return Prelude["=="](dictEq)(v.value0)(v1.value0) && Prelude["=="](dictEq1)(v.value1)(v1.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Prelude.Ord(function () {
              return eqTuple(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
          }, function (v) {
              return function (v1) {
                  var $190 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                  if ($190 instanceof Prelude.EQ) {
                      return Prelude.compare(dictOrd1)(v.value1)(v1.value1);
                  };
                  return $190;
              };
          });
      };
  };
  var divisionRingTuple = function (dictDivisionRing) {
      return function (dictDivisionRing1) {
          return new Prelude.DivisionRing(function () {
              return moduloSemiringTuple(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]())(dictDivisionRing1["__superclass_Prelude.ModuloSemiring_1"]());
          }, function () {
              return ringTuple(dictDivisionRing["__superclass_Prelude.Ring_0"]())(dictDivisionRing1["__superclass_Prelude.Ring_0"]());
          });
      };
  };
  var numTuple = function (dictNum) {
      return function (dictNum1) {
          return new Prelude.Num(function () {
              return divisionRingTuple(dictNum["__superclass_Prelude.DivisionRing_0"]())(dictNum1["__superclass_Prelude.DivisionRing_0"]());
          });
      };
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  var comonadTuple = new Control_Comonad.Comonad(function () {
      return extendTuple;
  }, snd);
  var boundedTuple = function (dictBounded) {
      return function (dictBounded1) {
          return new Prelude.Bounded(new Tuple(Prelude.bottom(dictBounded), Prelude.bottom(dictBounded1)), new Tuple(Prelude.top(dictBounded), Prelude.top(dictBounded1)));
      };
  };
  var boundedOrdTuple = function (dictBoundedOrd) {
      return function (dictBoundedOrd1) {
          return new Prelude.BoundedOrd(function () {
              return boundedTuple(dictBoundedOrd["__superclass_Prelude.Bounded_0"]())(dictBoundedOrd1["__superclass_Prelude.Bounded_0"]());
          }, function () {
              return ordTuple(dictBoundedOrd["__superclass_Prelude.Ord_1"]())(dictBoundedOrd1["__superclass_Prelude.Ord_1"]());
          });
      };
  };
  var booleanAlgebraTuple = function (dictBooleanAlgebra) {
      return function (dictBooleanAlgebra1) {
          return new Prelude.BooleanAlgebra(function () {
              return boundedTuple(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]())(dictBooleanAlgebra1["__superclass_Prelude.Bounded_0"]());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.conj(dictBooleanAlgebra)(v.value0)(v1.value0), Prelude.conj(dictBooleanAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.disj(dictBooleanAlgebra)(v.value0)(v1.value0), Prelude.disj(dictBooleanAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return new Tuple(Prelude.not(dictBooleanAlgebra)(v.value0), Prelude.not(dictBooleanAlgebra1)(v.value1));
          });
      };
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return g(f(z)(v.value0))(v.value1);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return f(v.value0)(g(v.value1)(z));
              };
          };
      };
  });
  var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableTuple;
  }, function () {
      return bifunctorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  var biapplyTuple = new Control_Biapply.Biapply(function () {
      return bifunctorTuple;
  }, function (v) {
      return function (v1) {
          return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
      };
  });
  var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
      return biapplyTuple;
  }, Tuple.create);
  var applyTuple = function (dictSemigroup) {
      return new Prelude.Apply(function () {
          return functorTuple;
      }, function (v) {
          return function (v1) {
              return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
          };
      });
  };
  var bindTuple = function (dictSemigroup) {
      return new Prelude.Bind(function () {
          return applyTuple(dictSemigroup);
      }, function (v) {
          return function (f) {
              var $254 = f(v.value1);
              return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)($254.value0), $254.value1);
          };
      });
  };
  var applicativeTuple = function (dictMonoid) {
      return new Prelude.Applicative(function () {
          return applyTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
  };
  var monadTuple = function (dictMonoid) {
      return new Prelude.Monad(function () {
          return applicativeTuple(dictMonoid);
      }, function () {
          return bindTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      });
  };
  exports["Tuple"] = Tuple;
  exports["lookup"] = lookup;
  exports["swap"] = swap;
  exports["uncurry"] = uncurry;
  exports["curry"] = curry;
  exports["snd"] = snd;
  exports["fst"] = fst;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
  exports["boundedTuple"] = boundedTuple;
  exports["boundedOrdTuple"] = boundedOrdTuple;
  exports["semigroupoidTuple"] = semigroupoidTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["monoidTuple"] = monoidTuple;
  exports["semiringTuple"] = semiringTuple;
  exports["moduloSemiringTuple"] = moduloSemiringTuple;
  exports["ringTuple"] = ringTuple;
  exports["divisionRingTuple"] = divisionRingTuple;
  exports["numTuple"] = numTuple;
  exports["booleanAlgebraTuple"] = booleanAlgebraTuple;
  exports["functorTuple"] = functorTuple;
  exports["invariantTuple"] = invariantTuple;
  exports["bifunctorTuple"] = bifunctorTuple;
  exports["applyTuple"] = applyTuple;
  exports["biapplyTuple"] = biapplyTuple;
  exports["applicativeTuple"] = applicativeTuple;
  exports["biapplicativeTuple"] = biapplicativeTuple;
  exports["bindTuple"] = bindTuple;
  exports["monadTuple"] = monadTuple;
  exports["extendTuple"] = extendTuple;
  exports["comonadTuple"] = comonadTuple;
  exports["lazyTuple"] = lazyTuple;
  exports["foldableTuple"] = foldableTuple;
  exports["bifoldableTuple"] = bifoldableTuple;
  exports["traversableTuple"] = traversableTuple;
  exports["bitraversableTuple"] = bitraversableTuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans = PS["Control.Comonad.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Tuple = PS["Data.Tuple"];     
  var EnvT = function (x) {
      return x;
  };
  var withEnvT = function (f) {
      return function (v) {
          return EnvT(new Data_Tuple.Tuple(f(v.value0), v.value1));
      };
  };
  var runEnvT = function (v) {
      return v;
  };
  var mapEnvT = function (f) {
      return function (v) {
          return EnvT(new Data_Tuple.Tuple(v.value0, f(v.value1)));
      };
  };
  var functorEnvT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return function (v) {
              return EnvT(new Data_Tuple.Tuple(v.value0, Prelude["<$>"](dictFunctor)(f)(v.value1)));
          };
      });
  };
  var extendEnvT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorEnvT(dictExtend["__superclass_Prelude.Functor_0"]());
      }, function (f) {
          return function (v) {
              return EnvT(new Data_Tuple.Tuple(v.value0, Prelude["<$>"](dictExtend["__superclass_Prelude.Functor_0"]())(f)(Control_Extend["<<="](dictExtend)(Prelude[">>>"](Prelude.semigroupoidFn)(Data_Tuple.Tuple.create(v.value0))(EnvT))(v.value1))));
          };
      });
  };
  var comonadTransEnvT = new Control_Comonad_Trans.ComonadTrans(function (dictComonad) {
      return function (v) {
          return v.value1;
      };
  });
  var comonadEnvT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendEnvT(dictComonad["__superclass_Control.Extend.Extend_0"]());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value1);
      });
  };
  exports["EnvT"] = EnvT;
  exports["mapEnvT"] = mapEnvT;
  exports["withEnvT"] = withEnvT;
  exports["runEnvT"] = runEnvT;
  exports["functorEnvT"] = functorEnvT;
  exports["extendEnvT"] = extendEnvT;
  exports["comonadEnvT"] = comonadEnvT;
  exports["comonadTransEnvT"] = comonadTransEnvT;;
 
})(PS["Control.Comonad.Env.Trans"] = PS["Control.Comonad.Env.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Identity = function (x) {
      return x;
  };
  var showIdentity = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Identity (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semiringIdentity = function (dictSemiring) {
      return new Prelude.Semiring(function (v) {
          return function (v1) {
              return Prelude["+"](dictSemiring)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude["*"](dictSemiring)(v)(v1);
          };
      }, Prelude.one(dictSemiring), Prelude.zero(dictSemiring));
  };
  var semigroupIdenity = function (dictSemigroup) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["<>"](dictSemigroup)(v)(v1);
          };
      });
  };
  var runIdentity = function (v) {
      return v;
  };
  var ringIdentity = function (dictRing) {
      return new Prelude.Ring(function () {
          return semiringIdentity(dictRing["__superclass_Prelude.Semiring_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude["-"](dictRing)(v)(v1);
          };
      });
  };
  var monoidIdentity = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupIdenity(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var moduloSemiringIdentity = function (dictModuloSemiring) {
      return new Prelude.ModuloSemiring(function () {
          return semiringIdentity(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude["/"](dictModuloSemiring)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude.mod(dictModuloSemiring)(v)(v1);
          };
      });
  };
  var functorIdentity = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
  var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var traversableIdentity = new Data_Traversable.Traversable(function () {
      return foldableIdentity;
  }, function () {
      return functorIdentity;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Identity)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Identity)(f(v));
          };
      };
  });
  var extendIdentity = new Control_Extend.Extend(function () {
      return functorIdentity;
  }, function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqIdentity = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordIdentity = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqIdentity(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var divisionRingIdentity = function (dictDivisionRing) {
      return new Prelude.DivisionRing(function () {
          return moduloSemiringIdentity(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
      }, function () {
          return ringIdentity(dictDivisionRing["__superclass_Prelude.Ring_0"]());
      });
  };
  var numIdentity = function (dictNum) {
      return new Prelude.Num(function () {
          return divisionRingIdentity(dictNum["__superclass_Prelude.DivisionRing_0"]());
      });
  };
  var comonadIdentity = new Control_Comonad.Comonad(function () {
      return extendIdentity;
  }, function (v) {
      return v;
  });
  var boundedIdentity = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
  };
  var boundedOrdIdentity = function (dictBoundedOrd) {
      return new Prelude.BoundedOrd(function () {
          return boundedIdentity(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
      }, function () {
          return ordIdentity(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
      });
  };
  var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
      return new Prelude.BooleanAlgebra(function () {
          return boundedIdentity(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      }, function (v) {
          return Prelude.not(dictBooleanAlgebra)(v);
      });
  };
  var applyIdentity = new Prelude.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Prelude.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Prelude.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Prelude.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["runIdentity"] = runIdentity;
  exports["eqIdentity"] = eqIdentity;
  exports["ordIdentity"] = ordIdentity;
  exports["boundedIdentity"] = boundedIdentity;
  exports["boundedOrdIdentity"] = boundedOrdIdentity;
  exports["booleanAlgebraIdentity"] = booleanAlgebraIdentity;
  exports["semigroupIdenity"] = semigroupIdenity;
  exports["monoidIdentity"] = monoidIdentity;
  exports["semiringIdentity"] = semiringIdentity;
  exports["moduloSemiringIdentity"] = moduloSemiringIdentity;
  exports["ringIdentity"] = ringIdentity;
  exports["divisionRingIdentity"] = divisionRingIdentity;
  exports["numIdentity"] = numIdentity;
  exports["showIdentity"] = showIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["invariantIdentity"] = invariantIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
  exports["extendIdentity"] = extendIdentity;
  exports["comonadIdentity"] = comonadIdentity;
  exports["foldableIdentity"] = foldableIdentity;
  exports["traversableIdentity"] = traversableIdentity;;
 
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];     
  var withEnv = Control_Comonad_Env_Trans.withEnvT;
  var runEnv = function (x) {
      return Prelude["<$>"](Data_Tuple.functorTuple)(Data_Identity.runIdentity)(Control_Comonad_Env_Trans.runEnvT(x));
  };
  var mapEnv = Prelude.map(Control_Comonad_Env_Trans.functorEnvT(Data_Identity.functorIdentity));
  var env = function (e) {
      return function (a) {
          return Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(e)(a));
      };
  };
  exports["env"] = env;
  exports["mapEnv"] = mapEnv;
  exports["withEnv"] = withEnv;
  exports["runEnv"] = runEnv;;
 
})(PS["Control.Comonad.Env"] = PS["Control.Comonad.Env"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Data_Tuple = PS["Data.Tuple"];     
  var ComonadEnv = function (__superclass_Control$dotComonad$dotComonad_0, ask, local) {
      this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
      this.ask = ask;
      this.local = local;
  };
  var local = function (dict) {
      return dict.local;
  };
  var comonadEnvTuple = new ComonadEnv(function () {
      return Data_Tuple.comonadTuple;
  }, Data_Tuple.fst, function (f) {
      return function (v) {
          return new Data_Tuple.Tuple(f(v.value0), v.value1);
      };
  });
  var comonadEnvEnvT = function (dictComonad) {
      return new ComonadEnv(function () {
          return Control_Comonad_Env_Trans.comonadEnvT(dictComonad);
      }, function (x) {
          return Data_Tuple.fst(Control_Comonad_Env_Trans.runEnvT(x));
      }, function (f) {
          return function (x) {
              return Control_Comonad_Env_Trans.EnvT((function () {
                  var $7 = Control_Comonad_Env_Trans.runEnvT(x);
                  return new Data_Tuple.Tuple(f($7.value0), $7.value1);
              })());
          };
      });
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictComonadEnv) {
      return function (f) {
          return function (x) {
              return f(ask(dictComonadEnv)(x));
          };
      };
  };
  exports["ComonadEnv"] = ComonadEnv;
  exports["asks"] = asks;
  exports["local"] = local;
  exports["ask"] = ask;
  exports["comonadEnvTuple"] = comonadEnvTuple;
  exports["comonadEnvEnvT"] = comonadEnvEnvT;;
 
})(PS["Control.Comonad.Env.Class"] = PS["Control.Comonad.Env.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans = PS["Control.Comonad.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Tuple = PS["Data.Tuple"];     
  var StoreT = function (x) {
      return x;
  };
  var runStoreT = function (v) {
      return v;
  };
  var functorStoreT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return function (v) {
              return StoreT(new Data_Tuple.Tuple(Prelude["<$>"](dictFunctor)(function (h) {
                  return Prelude[">>>"](Prelude.semigroupoidFn)(h)(f);
              })(v.value0), v.value1));
          };
      });
  };
  var extendStoreT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorStoreT(dictExtend["__superclass_Prelude.Functor_0"]());
      }, function (f) {
          return function (v) {
              return StoreT(new Data_Tuple.Tuple(Control_Extend["<<="](dictExtend)(function (w$prime) {
                  return function (s$prime) {
                      return f(StoreT(new Data_Tuple.Tuple(w$prime, s$prime)));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var comonadTransStoreT = new Control_Comonad_Trans.ComonadTrans(function (dictComonad) {
      return function (v) {
          return Prelude["<$>"]((dictComonad["__superclass_Control.Extend.Extend_0"]())["__superclass_Prelude.Functor_0"]())(function (f) {
              return f(v.value1);
          })(v.value0);
      };
  });
  var comonadStoreT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendStoreT(dictComonad["__superclass_Control.Extend.Extend_0"]());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value0)(v.value1);
      });
  };
  exports["StoreT"] = StoreT;
  exports["runStoreT"] = runStoreT;
  exports["functorStoreT"] = functorStoreT;
  exports["extendStoreT"] = extendStoreT;
  exports["comonadStoreT"] = comonadStoreT;
  exports["comonadTransStoreT"] = comonadTransStoreT;;
 
})(PS["Control.Comonad.Store.Trans"] = PS["Control.Comonad.Store.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad_Store_Trans = PS["Control.Comonad.Store.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];     
  var store = function (f) {
      return function (x) {
          return Control_Comonad_Store_Trans.StoreT(new Data_Tuple.Tuple(f, x));
      };
  };
  var runStore = function (s) {
      return Data_Tuple.swap(Prelude["<$>"](Data_Tuple.functorTuple)(Data_Identity.runIdentity)(Data_Tuple.swap(Control_Comonad_Store_Trans.runStoreT(s))));
  };
  exports["store"] = store;
  exports["runStore"] = runStore;;
 
})(PS["Control.Comonad.Store"] = PS["Control.Comonad.Store"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Store_Trans = PS["Control.Comonad.Store.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Tuple = PS["Data.Tuple"];     
  var ComonadStore = function (__superclass_Control$dotComonad$dotComonad_0, peek, pos) {
      this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
      this.peek = peek;
      this.pos = pos;
  };
  var pos = function (dict) {
      return dict.pos;
  };
  var peek = function (dict) {
      return dict.peek;
  };
  var peeks = function (dictComonadStore) {
      return function (f) {
          return function (x) {
              return peek(dictComonadStore)(f(pos(dictComonadStore)(x)))(x);
          };
      };
  };
  var seeks = function (dictComonadStore) {
      return function (dictExtend) {
          return function (f) {
              return function (x) {
                  return peeks(dictComonadStore)(f)(Control_Extend.duplicate(dictExtend)(x));
              };
          };
      };
  };
  var seek = function (dictComonadStore) {
      return function (dictExtend) {
          return function (s) {
              return function (x) {
                  return peek(dictComonadStore)(s)(Control_Extend.duplicate(dictExtend)(x));
              };
          };
      };
  };
  var experiment = function (dictComonadStore) {
      return function (dictFunctor) {
          return function (f) {
              return function (x) {
                  return Prelude["<$>"](dictFunctor)(Prelude.flip(peek(dictComonadStore))(x))(f(pos(dictComonadStore)(x)));
              };
          };
      };
  };
  var comonadStoreStoreT = function (dictComonad) {
      return new ComonadStore(function () {
          return Control_Comonad_Store_Trans.comonadStoreT(dictComonad);
      }, function (s) {
          return function (v) {
              return Control_Comonad.extract(dictComonad)(v.value0)(s);
          };
      }, function (v) {
          return v.value1;
      });
  };
  exports["ComonadStore"] = ComonadStore;
  exports["seeks"] = seeks;
  exports["seek"] = seek;
  exports["peeks"] = peeks;
  exports["experiment"] = experiment;
  exports["peek"] = peek;
  exports["pos"] = pos;
  exports["comonadStoreStoreT"] = comonadStoreStoreT;;
 
})(PS["Control.Comonad.Store.Class"] = PS["Control.Comonad.Store.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans = PS["Control.Comonad.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var TracedT = function (x) {
      return x;
  };
  var runTracedT = function (v) {
      return v;
  };
  var functorTracedT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return function (v) {
              return Prelude["<$>"](dictFunctor)(function (g) {
                  return function (t) {
                      return f(g(t));
                  };
              })(v);
          };
      });
  };
  var extendTracedT = function (dictExtend) {
      return function (dictSemigroup) {
          return new Control_Extend.Extend(function () {
              return functorTracedT(dictExtend["__superclass_Prelude.Functor_0"]());
          }, function (f) {
              return function (v) {
                  return Control_Extend["<<="](dictExtend)(function (w1) {
                      return function (t) {
                          return f(Prelude["<$>"](dictExtend["__superclass_Prelude.Functor_0"]())(function (h) {
                              return function (t$prime) {
                                  return h(Prelude["<>"](dictSemigroup)(t)(t$prime));
                              };
                          })(w1));
                      };
                  })(v);
              };
          });
      };
  };
  var comonadTransTracedT = function (dictMonoid) {
      return new Control_Comonad_Trans.ComonadTrans(function (dictComonad) {
          return function (v) {
              return Prelude["<$>"]((dictComonad["__superclass_Control.Extend.Extend_0"]())["__superclass_Prelude.Functor_0"]())(function (f) {
                  return f(Data_Monoid.mempty(dictMonoid));
              })(v);
          };
      });
  };
  var comonadTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new Control_Comonad.Comonad(function () {
              return extendTracedT(dictComonad["__superclass_Control.Extend.Extend_0"]())(dictMonoid["__superclass_Prelude.Semigroup_0"]());
          }, function (v) {
              return Control_Comonad.extract(dictComonad)(v)(Data_Monoid.mempty(dictMonoid));
          });
      };
  };
  exports["TracedT"] = TracedT;
  exports["runTracedT"] = runTracedT;
  exports["functorTracedT"] = functorTracedT;
  exports["extendTracedT"] = extendTracedT;
  exports["comonadTracedT"] = comonadTracedT;
  exports["comonadTransTracedT"] = comonadTransTracedT;;
 
})(PS["Control.Comonad.Traced.Trans"] = PS["Control.Comonad.Traced.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Data_Identity = PS["Data.Identity"];     
  var traced = Prelude[">>>"](Prelude.semigroupoidFn)(Data_Identity.Identity)(Control_Comonad_Traced_Trans.TracedT);
  var runTraced = Prelude[">>>"](Prelude.semigroupoidFn)(Control_Comonad_Traced_Trans.runTracedT)(Data_Identity.runIdentity);
  exports["traced"] = traced;
  exports["runTraced"] = runTraced;;
 
})(PS["Control.Comonad.Traced"] = PS["Control.Comonad.Traced"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];     
  var ComonadTraced = function (__superclass_Control$dotComonad$dotComonad_0, track) {
      this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
      this.track = track;
  };
  var track = function (dict) {
      return dict.track;
  };
  var tracks = function (dictComonad) {
      return function (dictComonadTraced) {
          return function (f) {
              return function (w) {
                  return track(dictComonadTraced)(f(Control_Comonad.extract(dictComonad)(w)))(w);
              };
          };
      };
  };
  var listens = function (dictFunctor) {
      return function (f) {
          return function (tr) {
              return Prelude["<$>"](dictFunctor)(function (g) {
                  return function (t) {
                      return new Data_Tuple.Tuple(g(t), f(t));
                  };
              })(Control_Comonad_Traced_Trans.runTracedT(tr));
          };
      };
  };
  var listen = function (dictFunctor) {
      return function (tr) {
          return Prelude["<$>"](dictFunctor)(function (f) {
              return function (t) {
                  return new Data_Tuple.Tuple(f(t), t);
              };
          })(Control_Comonad_Traced_Trans.runTracedT(tr));
      };
  };
  var comonadTracedTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new ComonadTraced(function () {
              return Control_Comonad_Traced_Trans.comonadTracedT(dictComonad)(dictMonoid);
          }, function (t) {
              return function (tr) {
                  return Control_Comonad.extract(dictComonad)(Control_Comonad_Traced_Trans.runTracedT(tr))(t);
              };
          });
      };
  };
  var censor = function (dictFunctor) {
      return function (f) {
          return function (tr) {
              return Prelude["<$>"](dictFunctor)(Prelude[">>>"](Prelude.semigroupoidFn)(f))(Control_Comonad_Traced_Trans.runTracedT(tr));
          };
      };
  };
  exports["ComonadTraced"] = ComonadTraced;
  exports["censor"] = censor;
  exports["listens"] = listens;
  exports["listen"] = listen;
  exports["tracks"] = tracks;
  exports["track"] = track;
  exports["comonadTracedTracedT"] = comonadTracedTracedT;;
 
})(PS["Control.Comonad.Traced.Class"] = PS["Control.Comonad.Traced.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var when = function (dictMonad) {
      return function (v) {
          return function (m) {
              if (v) {
                  return m;
              };
              if (!v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
              };
              throw new Error("Failed pattern match at Control.Monad line 8, column 1 - line 9, column 1: " + [ v.constructor.name, m.constructor.name ]);
          };
      };
  };
  var unless = function (dictMonad) {
      return function (v) {
          return function (m) {
              if (!v) {
                  return m;
              };
              if (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
              };
              throw new Error("Failed pattern match at Control.Monad line 13, column 1 - line 14, column 1: " + [ v.constructor.name, m.constructor.name ]);
          };
      };
  };
  exports["unless"] = unless;
  exports["when"] = when;;
 
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Aff

  exports._cancelWith = function (nonCanceler, aff, canceler1) {
    return function(success, error) {
      var canceler2 = aff(success, error);

      return function(e) {
        return function(success, error) {
          var cancellations = 0;
          var result        = false;
          var errored       = false;

          var s = function(bool) {
            cancellations = cancellations + 1;
            result        = result || bool;

            if (cancellations === 2 && !errored) {
              try {
                success(result);
              } catch (e) {
                error(e);
              }
            }
          };

          var f = function(err) {
            if (!errored) {
              errored = true;

              error(err);
            }
          };

          canceler2(e)(s, f);
          canceler1(e)(s, f);

          return nonCanceler;
        };
      };
    };
  }

  exports._setTimeout = function (nonCanceler, millis, aff) {
    var set = setTimeout, clear = clearTimeout;
    if (millis <= 0 && typeof setImmediate === "function") {
      set = setImmediate;
      clear = clearImmediate;
    }
    return function(success, error) {
      var canceler;

      var timeout = set(function() {
        canceler = aff(success, error);
      }, millis);

      return function(e) {
        return function(s, f) {
          if (canceler !== undefined) {
            return canceler(e)(s, f);
          } else {
            clear(timeout);

            try {
              s(true);
            } catch (e) {
              f(e);
            }

            return nonCanceler;
          }
        };
      };
    };
  }

  exports._unsafeInterleaveAff = function (aff) {
    return aff;
  }

  exports._forkAff = function (nonCanceler, aff) {
    var voidF = function(){};

    return function(success, error) {
      var canceler = aff(voidF, voidF);

      try {
        success(canceler);
      } catch (e) {
        error(e);
      }

      return nonCanceler;
    };
  }

  exports._makeAff = function (cb) {
    return function(success, error) {
      return cb(function(e) {
        return function() {
          error(e);
        };
      })(function(v) {
        return function() {
          try {
            success(v);
          } catch (e) {
            error(e);
          }
        };
      })();
    }
  }

  exports._pure = function (nonCanceler, v) {
    return function(success, error) {
      try {
        success(v);
      } catch (e) {
        error(e);
      }

      return nonCanceler;
    };
  }

  exports._throwError = function (nonCanceler, e) {
    return function(success, error) {
      error(e);

      return nonCanceler;
    };
  }

  exports._fmap = function (f, aff) {
    return function(success, error) {
      return aff(function(v) {
        try {
          success(f(v));
        } catch (e) {
          error(e);
        }
      }, error);
    };
  }

  exports._bind = function (alwaysCanceler, aff, f) {
    return function(success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function(){};

      canceler1 = aff(function(v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function(e) {
        return function(s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function(bool) {
              if (bool || isCanceled) {
                try {
                  s(true);
                } catch (e) {
                  f(e);
                }
              } else {
                onCanceler = function(canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  }

  exports._attempt = function (Left, Right, aff) {
    return function(success, error) {
      return aff(function(v) {
        try {
          success(Right(v));
        } catch (e) {
          error(e);
        }
      }, function(e) {
        try {
          success(Left(e));
        } catch (e) {
          error(e);
        }
      });
    };
  }

  exports._runAff = function (errorT, successT, aff) {
    return function() {
      return aff(function(v) {
        try {
          successT(v)();
        } catch (e) {
          errorT(e)();
        }
      }, function(e) {
        errorT(e)();
      });
    };
  }

  exports._liftEff = function (nonCanceler, e) {
    return function(success, error) {
      try {
        success(e());
      } catch (e) {
        error(e);
      }

      return nonCanceler;
    };
  }
 
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var MonadCont = function (__superclass_Prelude$dotMonad_0, callCC) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.callCC = callCC;
  };
  var callCC = function (dict) {
      return dict.callCC;
  };
  exports["MonadCont"] = MonadCont;
  exports["callCC"] = callCC;;
 
})(PS["Control.Monad.Cont.Class"] = PS["Control.Monad.Cont.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.untilE = function (f) {
    return function () {
      while (!f());
      return {};
    };
  };

  exports.whileE = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
        return {};
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["foreachE"] = $foreign.foreachE;
  exports["forE"] = $foreign.forE;
  exports["whileE"] = $foreign.whileE;
  exports["untilE"] = $foreign.untilE;
  exports["runPure"] = $foreign.runPure;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var MonadEff = function (__superclass_Prelude$dotMonad_0, liftEff) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Prelude.id(Prelude.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
  exports["monadEffEff"] = monadEffEff;;
 
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Exception

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.stackImpl = function (just) {
    return function (nothing) {
      return function (e) {
        return e.stack ? just(e.stack) : nothing;
      };
    };
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var $$throw = function ($0) {
      return $foreign.throwException($foreign.error($0));
  };
  var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var showError = new Prelude.Show($foreign.showErrorImpl);
  exports["throw"] = $$throw;
  exports["stack"] = stack;
  exports["showError"] = showError;
  exports["catchException"] = $foreign.catchException;
  exports["throwException"] = $foreign.throwException;
  exports["message"] = $foreign.message;
  exports["error"] = $foreign.error;;
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return new Prelude.Show(function (v) {
              if (v instanceof Left) {
                  return "Left (" + (Prelude.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Right) {
                  return "Right (" + (Prelude.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Either line 174, column 1 - line 181, column 1: " + [ v.constructor.name ]);
          });
      };
  };
  var functorEither = new Prelude.Functor(function (f) {
      return function (v) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return new Right(f(v.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 52, column 1 - line 56, column 1: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Right) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 201, column 1 - line 209, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              if (v instanceof Left) {
                  return z;
              };
              if (v instanceof Right) {
                  return f(z)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 201, column 1 - line 209, column 1: " + [ f.constructor.name, z.constructor.name, v.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              if (v instanceof Left) {
                  return z;
              };
              if (v instanceof Right) {
                  return f(v.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Either line 201, column 1 - line 209, column 1: " + [ f.constructor.name, z.constructor.name, v.constructor.name ]);
          };
      };
  });
  var traversableEither = new Data_Traversable.Traversable(function () {
      return foldableEither;
  }, function () {
      return functorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Prelude.pure(dictApplicative)(new Left(v.value0));
          };
          if (v instanceof Right) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 217, column 1 - line 223, column 1: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Left) {
                  return Prelude.pure(dictApplicative)(new Left(v.value0));
              };
              if (v instanceof Right) {
                  return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(f(v.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 217, column 1 - line 223, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var extendEither = new Control_Extend.Extend(function () {
      return functorEither;
  }, function (f) {
      return function (v) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          return new Right(f(v));
      };
  });
  var eqEither = function (dictEq) {
      return function (dictEq1) {
          return new Prelude.Eq(function (v) {
              return function (v1) {
                  if (v instanceof Left && v1 instanceof Left) {
                      return Prelude["=="](dictEq)(v.value0)(v1.value0);
                  };
                  if (v instanceof Right && v1 instanceof Right) {
                      return Prelude["=="](dictEq1)(v.value0)(v1.value0);
                  };
                  return false;
              };
          });
      };
  };
  var ordEither = function (dictOrd) {
      return function (dictOrd1) {
          return new Prelude.Ord(function () {
              return eqEither(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
          }, function (v) {
              return function (v1) {
                  if (v instanceof Left && v1 instanceof Left) {
                      return Prelude.compare(dictOrd)(v.value0)(v1.value0);
                  };
                  if (v instanceof Right && v1 instanceof Right) {
                      return Prelude.compare(dictOrd1)(v.value0)(v1.value0);
                  };
                  if (v instanceof Left) {
                      return Prelude.LT.value;
                  };
                  if (v1 instanceof Left) {
                      return Prelude.GT.value;
                  };
                  throw new Error("Failed pattern match at Data.Either line 191, column 1 - line 197, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          });
      };
  };
  var either = function (f) {
      return function (g) {
          return function (v) {
              if (v instanceof Left) {
                  return f(v.value0);
              };
              if (v instanceof Right) {
                  return g(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 28, column 1 - line 29, column 1: " + [ f.constructor.name, g.constructor.name, v.constructor.name ]);
          };
      };
  };
  var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
  var isRight = either(Prelude["const"](false))(Prelude["const"](true));
  var boundedEither = function (dictBounded) {
      return function (dictBounded1) {
          return new Prelude.Bounded(new Left(Prelude.bottom(dictBounded)), new Right(Prelude.top(dictBounded1)));
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              if (v instanceof Left) {
                  return new Left(f(v.value0));
              };
              if (v instanceof Right) {
                  return new Right(g(v.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 56, column 1 - line 92, column 1: " + [ f.constructor.name, g.constructor.name, v.constructor.name ]);
          };
      };
  });
  var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  if (v instanceof Left) {
                      return f(v.value0);
                  };
                  if (v instanceof Right) {
                      return g(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 209, column 1 - line 217, column 1: " + [ f.constructor.name, g.constructor.name, v.constructor.name ]);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  if (v instanceof Left) {
                      return f(z)(v.value0);
                  };
                  if (v instanceof Right) {
                      return g(z)(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 209, column 1 - line 217, column 1: " + [ f.constructor.name, g.constructor.name, z.constructor.name, v.constructor.name ]);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  if (v instanceof Left) {
                      return f(v.value0)(z);
                  };
                  if (v instanceof Right) {
                      return g(v.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Either line 209, column 1 - line 217, column 1: " + [ f.constructor.name, g.constructor.name, z.constructor.name, v.constructor.name ]);
              };
          };
      };
  });
  var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableEither;
  }, function () {
      return bifunctorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Left.create)(v.value0);
          };
          if (v instanceof Right) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 223, column 1 - line 229, column 1: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  if (v instanceof Left) {
                      return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Left.create)(f(v.value0));
                  };
                  if (v instanceof Right) {
                      return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(g(v.value0));
                  };
                  throw new Error("Failed pattern match at Data.Either line 223, column 1 - line 229, column 1: " + [ f.constructor.name, g.constructor.name, v.constructor.name ]);
              };
          };
      };
  });
  var applyEither = new Prelude.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (r) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Prelude["<$>"](functorEither)(v.value0)(r);
          };
          throw new Error("Failed pattern match at Data.Either line 92, column 1 - line 116, column 1: " + [ v.constructor.name, r.constructor.name ]);
      };
  });
  var bindEither = new Prelude.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var semigroupEither = function (dictSemigroup) {
      return new Prelude.Semigroup(function (x) {
          return function (y) {
              return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.append(dictSemigroup))(x))(y);
          };
      });
  };
  var semiringEither = function (dictSemiring) {
      return new Prelude.Semiring(function (x) {
          return function (y) {
              return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.add(dictSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.mul(dictSemiring))(x))(y);
          };
      }, new Right(Prelude.one(dictSemiring)), new Right(Prelude.zero(dictSemiring)));
  };
  var applicativeEither = new Prelude.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Prelude.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (r) {
          if (v instanceof Left) {
              return r;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["isRight"] = isRight;
  exports["isLeft"] = isLeft;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
  exports["extendEither"] = extendEither;
  exports["showEither"] = showEither;
  exports["eqEither"] = eqEither;
  exports["ordEither"] = ordEither;
  exports["boundedEither"] = boundedEither;
  exports["foldableEither"] = foldableEither;
  exports["bifoldableEither"] = bifoldableEither;
  exports["traversableEither"] = traversableEither;
  exports["bitraversableEither"] = bitraversableEither;
  exports["semiringEither"] = semiringEither;
  exports["semigroupEither"] = semigroupEither;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];     
  var MonadError = function (__superclass_Prelude$dotMonad_0, catchError, throwError) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.catchError = catchError;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  var monadErrorMaybe = new MonadError(function () {
      return Data_Maybe.monadMaybe;
  }, function (v) {
      return function (f) {
          if (v instanceof Data_Maybe.Nothing) {
              return f(Prelude.unit);
          };
          if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class line 51, column 1 - line 54, column 32: " + [ v.constructor.name, f.constructor.name ]);
      };
  }, Prelude["const"](Data_Maybe.Nothing.value));
  var monadErrorEither = new MonadError(function () {
      return Data_Either.monadEither;
  }, function (v) {
      return function (h) {
          if (v instanceof Data_Either.Left) {
              return h(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class line 46, column 1 - line 51, column 1: " + [ v.constructor.name, h.constructor.name ]);
      };
  }, Data_Either.Left.create);
  var catchError = function (dict) {
      return dict.catchError;
  };
  var catchJust = function (dictMonadError) {
      return function (p) {
          return function (act) {
              return function (handler) {
                  var handle = function (e) {
                      var $10 = p(e);
                      if ($10 instanceof Data_Maybe.Nothing) {
                          return throwError(dictMonadError)(e);
                      };
                      if ($10 instanceof Data_Maybe.Just) {
                          return handler($10.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Error.Class line 41, column 3 - line 46, column 1: " + [ $10.constructor.name ]);
                  };
                  return catchError(dictMonadError)(act)(handle);
              };
          };
      };
  };
  exports["MonadError"] = MonadError;
  exports["catchJust"] = catchJust;
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["monadErrorEither"] = monadErrorEither;
  exports["monadErrorMaybe"] = monadErrorMaybe;;
 
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.ST

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        /* jshint boss: true */
        return ref.value = f(ref.value);
      };
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        /* jshint boss: true */
        return ref.value = a;
      };
    };
  };

  exports.runST = function (f) {
    return f;
  };
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var pureST = function (st) {
      return Control_Monad_Eff.runPure($foreign.runST(st));
  };
  exports["pureST"] = pureST;
  exports["runST"] = $foreign.runST;
  exports["writeSTRef"] = $foreign.writeSTRef;
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["newSTRef"] = $foreign.newSTRef;;
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $less$dollar = function (dictFunctor) {
      return function (x) {
          return function (f) {
              return Prelude["<$>"](dictFunctor)(Prelude["const"](x))(f);
          };
      };
  };
  var $dollar$greater = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return Prelude["<$>"](dictFunctor)(Prelude["const"](x))(f);
          };
      };
  };
  exports["$>"] = $dollar$greater;
  exports["<$"] = $less$dollar;;
 
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Unsafe

  exports.unsafeInterleaveEff = function (f) {
    return f;
  };
 
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeInterleaveEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeInterleaveEff"] = $foreign.unsafeInterleaveEff;;
 
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Either.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Either.Unsafe"] = PS["Data.Either.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Either.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];     
  var fromRight = function (v) {
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      return $foreign.unsafeThrow("Data.Either.Unsafe.fromRight called on Left value");
  };
  var fromLeft = function (v) {
      if (v instanceof Data_Either.Left) {
          return v.value0;
      };
      return $foreign.unsafeThrow("Data.Either.Unsafe.fromLeft called on Right value");
  };
  exports["fromRight"] = fromRight;
  exports["fromLeft"] = fromLeft;;
 
})(PS["Data.Either.Unsafe"] = PS["Data.Either.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Data_Either_Unsafe = PS["Data.Either.Unsafe"];     
  var MonadRec = function (__superclass_Prelude$dotMonad_0, tailRecM) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecM2 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return tailRecM(dictMonadRec)(function (o) {
                      return f(o.a)(o.b);
                  })({
                      a: a, 
                      b: b
                  });
              };
          };
      };
  };
  var tailRecM3 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return tailRecM(dictMonadRec)(function (o) {
                          return f(o.a)(o.b)(o.c);
                      })({
                          a: a, 
                          b: b, 
                          c: c
                      });
                  };
              };
          };
      };
  };
  var tailRecEff = function (f) {
      return function (a) {
          var f$prime = function ($18) {
              return Control_Monad_Eff_Unsafe.unsafeInterleaveEff(f($18));
          };
          return function __do() {
              var v = f$prime(a)();
              var v1 = {
                  value: v
              };
              (function () {
                  while (!(function __do() {
                      var v2 = v1.value;
                      return (function () {
                          if (v2 instanceof Data_Either.Left) {
                              return function __do() {
                                  var v3 = f$prime(v2.value0)();
                                  v1.value = v3;
                                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(false)();
                              };
                          };
                          if (v2 instanceof Data_Either.Right) {
                              return Prelude["return"](Control_Monad_Eff.applicativeEff)(true);
                          };
                          throw new Error("Failed pattern match at Control.Monad.Rec.Class line 75, column 1 - line 76, column 1: " + [ v2.constructor.name ]);
                      })()();
                  })()) {

                  };
                  return {};
              })();
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Either_Unsafe.fromRight)(Control_Monad_ST.readSTRef(v1))();
          };
      };
  };
  var tailRec = function (f) {
      return function (a) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_Either.Left) {
                      var __tco_v = f(v.value0);
                      v = __tco_v;
                      continue tco;
                  };
                  if (v instanceof Data_Either.Right) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 63, column 1 - line 64, column 1: " + [ v.constructor.name ]);
              };
          };
          return go(f(a));
      };
  };
  var monadRecIdentity = new MonadRec(function () {
      return Data_Identity.monadIdentity;
  }, function (f) {
      return function ($19) {
          return Data_Identity.Identity(tailRec(function ($20) {
              return Data_Identity.runIdentity(f($20));
          })($19));
      };
  });
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor["<$"]((((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(new Data_Either.Left(u))(ma);
          })(Prelude.unit);
      };
  };
  exports["MonadRec"] = MonadRec;
  exports["forever"] = forever;
  exports["tailRecM3"] = tailRecM3;
  exports["tailRecM2"] = tailRecM2;
  exports["tailRecM"] = tailRecM;
  exports["tailRec"] = tailRec;
  exports["monadRecIdentity"] = monadRecIdentity;
  exports["monadRecEff"] = monadRecEff;;
 
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Function

  exports.mkFn0 = function (fn) {
    return function () {
      return fn({});
    };
  };

  exports.mkFn1 = function (fn) {
    return function (a) {
      return fn(a);
    };
  };

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };

  exports.mkFn3 = function (fn) {
    /* jshint maxparams: 3 */
    return function (a, b, c) {
      return fn(a)(b)(c);
    };
  };

  exports.mkFn4 = function (fn) {
    /* jshint maxparams: 4 */
    return function (a, b, c, d) {
      return fn(a)(b)(c)(d);
    };
  };

  exports.mkFn5 = function (fn) {
    /* jshint maxparams: 5 */
    return function (a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e);
    };
  };

  exports.mkFn6 = function (fn) {
    /* jshint maxparams: 6 */
    return function (a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f);
    };
  };

  exports.mkFn7 = function (fn) {
    /* jshint maxparams: 7 */
    return function (a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g);
    };
  };

  exports.mkFn8 = function (fn) {
    /* jshint maxparams: 8 */
    return function (a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h);
    };
  };

  exports.mkFn9 = function (fn) {
    /* jshint maxparams: 9 */
    return function (a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
    };
  };

  exports.mkFn10 = function (fn) {
    /* jshint maxparams: 10 */
    return function (a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
    };
  };

  exports.runFn0 = function (fn) {
    return fn();
  };

  exports.runFn1 = function (fn) {
    return function (a) {
      return fn(a);
    };
  };

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  exports.runFn5 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };

  exports.runFn6 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return fn(a, b, c, d, e, f);
              };
            };
          };
        };
      };
    };
  };

  exports.runFn7 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return fn(a, b, c, d, e, f, g);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn8 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return fn(a, b, c, d, e, f, g, h);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn9 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return fn(a, b, c, d, e, f, g, h, i);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn10 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return function (j) {
                        return fn(a, b, c, d, e, f, g, h, i, j);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];     
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  exports["on"] = on;
  exports["runFn10"] = $foreign.runFn10;
  exports["runFn9"] = $foreign.runFn9;
  exports["runFn8"] = $foreign.runFn8;
  exports["runFn7"] = $foreign.runFn7;
  exports["runFn6"] = $foreign.runFn6;
  exports["runFn5"] = $foreign.runFn5;
  exports["runFn4"] = $foreign.runFn4;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn1"] = $foreign.runFn1;
  exports["runFn0"] = $foreign.runFn0;
  exports["mkFn10"] = $foreign.mkFn10;
  exports["mkFn9"] = $foreign.mkFn9;
  exports["mkFn8"] = $foreign.mkFn8;
  exports["mkFn7"] = $foreign.mkFn7;
  exports["mkFn6"] = $foreign.mkFn6;
  exports["mkFn5"] = $foreign.mkFn5;
  exports["mkFn4"] = $foreign.mkFn4;
  exports["mkFn3"] = $foreign.mkFn3;
  exports["mkFn2"] = $foreign.mkFn2;
  exports["mkFn1"] = $foreign.mkFn1;
  exports["mkFn0"] = $foreign.mkFn0;;
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Canceler = function (x) {
      return x;
  };
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var launchAff = function ($19) {
      return runAff(Control_Monad_Eff_Exception.throwException)(Prelude["const"](Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit)))($foreign._unsafeInterleaveAff($19));
  };
  var functorAff = new Prelude.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var cancel = function (v) {
      return v;
  };
  var attempt = function (aff) {
      return $foreign._attempt(Data_Either.Left.create, Data_Either.Right.create, aff);
  };
  var apathize = function (a) {
      return Prelude["<$>"](functorAff)(Prelude["const"](Prelude.unit))(attempt(a));
  };
  var applyAff = new Prelude.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Prelude["<$>"](functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Prelude.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Prelude["const"](Prelude.pure(applicativeAff)(false));
  var alwaysCanceler = Prelude["const"](Prelude.pure(applicativeAff)(true));
  var cancelWith = function (aff) {
      return function (c) {
          return $foreign._cancelWith(nonCanceler, aff, c);
      };
  };
  var forkAff = function (aff) {
      return $foreign._forkAff(nonCanceler, aff);
  };
  var later$prime = function (n) {
      return function (aff) {
          return $foreign._setTimeout(nonCanceler, n, aff);
      };
  };
  var later = later$prime(0);
  var liftEff$prime = function (eff) {
      return attempt($foreign._unsafeInterleaveAff($foreign._liftEff(nonCanceler, eff)));
  };
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](nonCanceler))(h(e)(a));
          };
      });
  };
  var semigroupAff = function (dictSemigroup) {
      return new Prelude.Semigroup(function (a) {
          return function (b) {
              return Prelude["<*>"](applyAff)(Prelude["<$>"](functorAff)(Prelude["<>"](dictSemigroup))(a))(b);
          };
      });
  };
  var monoidAff = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAff(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Prelude.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)));
  };
  var semigroupCanceler = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return function (e) {
              return Prelude["<*>"](applyAff)(Prelude["<$>"](functorAff)(Prelude["||"](Prelude.booleanAlgebraBoolean))(v(e)))(v1(e));
          };
      };
  });
  var monoidCanceler = new Data_Monoid.Monoid(function () {
      return semigroupCanceler;
  }, Prelude["const"](Prelude.pure(applicativeAff)(true)));
  var bindAff = new Prelude.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Prelude.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadContAff = new Control_Monad_Cont_Class.MonadCont(function () {
      return monadAff;
  }, function (f) {
      return makeAff(function (eb) {
          return function (cb) {
              return runAff(eb)(cb)(f(function (a) {
                  return makeAff(function (v) {
                      return function (v1) {
                          return cb(a);
                      };
                  });
              }));
          };
      });
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadAff;
  }, function (aff) {
      return function (ex) {
          return Prelude[">>="](bindAff)(attempt(aff))(Data_Either.either(ex)(Prelude.pure(applicativeAff)));
      };
  }, function (e) {
      return $foreign._throwError(nonCanceler, e);
  });
  var $$finally = function (aff1) {
      return function (aff2) {
          return Prelude.bind(bindAff)(attempt(aff1))(function (v) {
              return Prelude.bind(bindAff)(aff2)(function () {
                  return Data_Either.either(Control_Monad_Error_Class.throwError(monadErrorAff))(Prelude.pure(applicativeAff))(v);
              });
          });
      };
  };
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (f) {
      return function (a) {
          var go = function (size) {
              return function (f1) {
                  return function (a1) {
                      return Prelude.bind(bindAff)(f1(a1))(function (v) {
                          if (v instanceof Data_Either.Left) {
                              if (size < 100) {
                                  return go(size + 1 | 0)(f1)(v.value0);
                              };
                              if (Prelude.otherwise) {
                                  return later(Control_Monad_Rec_Class.tailRecM(monadRecAff)(f1)(v.value0));
                              };
                          };
                          if (v instanceof Data_Either.Right) {
                              return Prelude.pure(applicativeAff)(v.value0);
                          };
                          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
                      });
                  };
              };
          };
          return go(0)(f)(a);
      };
  });
  var altAff = new Control_Alt.Alt(function () {
      return functorAff;
  }, function (a1) {
      return function (a2) {
          return Prelude[">>="](bindAff)(attempt(a1))(Data_Either.either(Prelude["const"](a2))(Prelude.pure(applicativeAff)));
      };
  });
  var plusAff = new Control_Plus.Plus(function () {
      return altAff;
  }, Control_Monad_Error_Class.throwError(monadErrorAff)(Control_Monad_Eff_Exception.error("Always fails")));
  var alternativeAff = new Control_Alternative.Alternative(function () {
      return plusAff;
  }, function () {
      return applicativeAff;
  });
  var monadPlusAff = new Control_MonadPlus.MonadPlus(function () {
      return alternativeAff;
  }, function () {
      return monadAff;
  });
  exports["Canceler"] = Canceler;
  exports["runAff"] = runAff;
  exports["nonCanceler"] = nonCanceler;
  exports["makeAff'"] = makeAff$prime;
  exports["makeAff"] = makeAff;
  exports["liftEff'"] = liftEff$prime;
  exports["launchAff"] = launchAff;
  exports["later'"] = later$prime;
  exports["later"] = later;
  exports["forkAff"] = forkAff;
  exports["finally"] = $$finally;
  exports["cancelWith"] = cancelWith;
  exports["cancel"] = cancel;
  exports["attempt"] = attempt;
  exports["apathize"] = apathize;
  exports["semigroupAff"] = semigroupAff;
  exports["monoidAff"] = monoidAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["altAff"] = altAff;
  exports["plusAff"] = plusAff;
  exports["alternativeAff"] = alternativeAff;
  exports["monadPlusAff"] = monadPlusAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadContAff"] = monadContAff;
  exports["semigroupCanceler"] = semigroupCanceler;
  exports["monoidCanceler"] = monoidCanceler;;
 
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Aff.AVar

  exports._makeVar = function (nonCanceler) {
    return function(success, error) {
      try {
        success({
          consumers: [],
          producers: [],
          error: undefined 
        });
      } catch (e) {
        error(e);
      }

      return nonCanceler;
    }
  }

  exports._takeVar = function (nonCanceler, avar) {
    return function(success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else if (avar.producers.length > 0) {
        var producer = avar.producers.shift();

        producer(success, error);
      } else {
        avar.consumers.push({success: success, error: error});
      }

      return nonCanceler;
    } 
  }

  exports._putVar = function (nonCanceler, avar, a) {
    return function(success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else if (avar.consumers.length === 0) {
        avar.producers.push(function(success, error) {
          try {
            success(a);
          } catch (e) {
            error(e);
          }
        });

        success({});
      } else {
        var consumer = avar.consumers.shift();

        try {
          consumer.success(a);
        } catch (e) {
          error(e);

          return;                  
        }

        success({});
      }

      return nonCanceler;
    }
  }

  exports._killVar = function (nonCanceler, avar, e) {
    return function(success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else {
        var errors = [];

        avar.error = e;

        while (avar.consumers.length > 0) {
          var consumer = avar.consumers.shift();

          try {
            consumer.error(e);
          } catch (e) {
            errors.push(e);              
          }
        }

        if (errors.length > 0) error(errors[0]);
        else success({});
      }

      return nonCanceler;
    }
  }
 
})(PS["Control.Monad.Aff.AVar"] = PS["Control.Monad.Aff.AVar"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Aff.AVar"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function = PS["Data.Function"];     
  var takeVar = function (q) {
      return $foreign._takeVar(Control_Monad_Aff.nonCanceler, q);
  };
  var putVar = function (q) {
      return function (a) {
          return $foreign._putVar(Control_Monad_Aff.nonCanceler, q, a);
      };
  };
  var modifyVar = function (f) {
      return function (v) {
          return Prelude[">>="](Control_Monad_Aff.bindAff)(takeVar(v))(Prelude[">>>"](Prelude.semigroupoidFn)(f)(putVar(v)));
      };
  };
  var makeVar = $foreign._makeVar(Control_Monad_Aff.nonCanceler);
  var makeVar$prime = function (a) {
      return Prelude.bind(Control_Monad_Aff.bindAff)(makeVar)(function (v) {
          return Prelude.bind(Control_Monad_Aff.bindAff)(putVar(v)(a))(function () {
              return Prelude["return"](Control_Monad_Aff.applicativeAff)(v);
          });
      });
  };
  var killVar = function (q) {
      return function (e) {
          return $foreign._killVar(Control_Monad_Aff.nonCanceler, q, e);
      };
  };
  exports["takeVar"] = takeVar;
  exports["putVar"] = putVar;
  exports["modifyVar"] = modifyVar;
  exports["makeVar'"] = makeVar$prime;
  exports["makeVar"] = makeVar;
  exports["killVar"] = killVar;;
 
})(PS["Control.Monad.Aff.AVar"] = PS["Control.Monad.Aff.AVar"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["MonadTrans"] = MonadTrans;
  exports["lift"] = lift;;
 
})(PS["Control.Monad.Trans"] = PS["Control.Monad.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var MonadReader = function (__superclass_Prelude$dotMonad_0, ask, local) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.ask = ask;
      this.local = local;
  };
  var monadReaderFun = new MonadReader(function () {
      return Prelude.monadFn;
  }, Prelude.id(Prelude.categoryFn), Prelude[">>>"](Prelude.semigroupoidFn));
  var local = function (dict) {
      return dict.local;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var reader = function (dictMonadReader) {
      return function (f) {
          return Prelude[">>="]((dictMonadReader["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(ask(dictMonadReader))(function ($1) {
              return Prelude["return"]((dictMonadReader["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(f($1));
          });
      };
  };
  exports["MonadReader"] = MonadReader;
  exports["reader"] = reader;
  exports["local"] = local;
  exports["ask"] = ask;
  exports["monadReaderFun"] = monadReaderFun;;
 
})(PS["Control.Monad.Reader.Class"] = PS["Control.Monad.Reader.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];     
  var MonadState = function (__superclass_Prelude$dotMonad_0, state) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Prelude.unit, s);
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Prelude.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["modify"] = modify;
  exports["put"] = put;
  exports["gets"] = gets;
  exports["get"] = get;
  exports["state"] = state;;
 
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];     
  var ContT = function (x) {
      return x;
  };
  var runContT = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var withContT = function (f) {
      return function (m) {
          return function (k) {
              return runContT(m)(f(k));
          };
      };
  };
  var monadTransContT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (k) {
              return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(m)(k);
          };
      };
  });
  var mapContT = function (f) {
      return function (m) {
          return function (k) {
              return f(runContT(m)(k));
          };
      };
  };
  var functorContT = function (dictMonad) {
      return new Prelude.Functor(function (f) {
          return function (m) {
              return function (k) {
                  return runContT(m)(function (a) {
                      return k(f(a));
                  });
              };
          };
      });
  };
  var applyContT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorContT(dictMonad);
      }, function (f) {
          return function (v) {
              return function (k) {
                  return runContT(f)(function (g) {
                      return runContT(v)(function (a) {
                          return k(g(a));
                      });
                  });
              };
          };
      });
  };
  var bindContT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyContT(dictMonad);
      }, function (m) {
          return function (k) {
              return function (k$prime) {
                  return runContT(m)(function (a) {
                      return runContT(k(a))(k$prime);
                  });
              };
          };
      });
  };
  var applicativeContT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyContT(dictMonad);
      }, function (a) {
          return function (k) {
              return k(a);
          };
      });
  };
  var monadContT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeContT(dictMonad);
      }, function () {
          return bindContT(dictMonad);
      });
  };
  var monadContContT = function (dictMonad) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadContT(dictMonad);
      }, function (f) {
          return function (k) {
              return runContT(f(function (a) {
                  return function (v) {
                      return k(a);
                  };
              }))(k);
          };
      });
  };
  var monadEffContT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadContT(dictMonadEff["__superclass_Prelude.Monad_0"]());
      }, function ($17) {
          return Control_Monad_Trans.lift(monadTransContT)(dictMonadEff["__superclass_Prelude.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($17));
      });
  };
  var monadReaderContT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadContT(dictMonadReader["__superclass_Prelude.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransContT)(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return function (c) {
              return function (k) {
                  return Prelude.bind((dictMonadReader["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(Control_Monad_Reader_Class.ask(dictMonadReader))(function (v) {
                      return Control_Monad_Reader_Class.local(dictMonadReader)(f)(runContT(c)(function ($18) {
                          return Control_Monad_Reader_Class.local(dictMonadReader)(Prelude["const"](v))(k($18));
                      }));
                  });
              };
          };
      });
  };
  var monadStateContT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadContT(dictMonadState["__superclass_Prelude.Monad_0"]());
      }, function ($19) {
          return Control_Monad_Trans.lift(monadTransContT)(dictMonadState["__superclass_Prelude.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)($19));
      });
  };
  exports["ContT"] = ContT;
  exports["withContT"] = withContT;
  exports["mapContT"] = mapContT;
  exports["runContT"] = runContT;
  exports["monadContContT"] = monadContContT;
  exports["functorContT"] = functorContT;
  exports["applyContT"] = applyContT;
  exports["applicativeContT"] = applicativeContT;
  exports["bindContT"] = bindContT;
  exports["monadContT"] = monadContT;
  exports["monadTransContT"] = monadTransContT;
  exports["monadEffContT"] = monadEffContT;
  exports["monadReaderContT"] = monadReaderContT;
  exports["monadStateContT"] = monadStateContT;;
 
})(PS["Control.Monad.Cont.Trans"] = PS["Control.Monad.Cont.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];     
  var MonadWriter = function (__superclass_Prelude$dotMonad_0, listen, pass, writer) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.listen = listen;
      this.pass = pass;
      this.writer = writer;
  };
  var writer = function (dict) {
      return dict.writer;
  };
  var tell = function (dictMonoid) {
      return function (dictMonad) {
          return function (dictMonadWriter) {
              return function (w) {
                  return writer(dictMonadWriter)(new Data_Tuple.Tuple(Prelude.unit, w));
              };
          };
      };
  };
  var pass = function (dict) {
      return dict.pass;
  };
  var listen = function (dict) {
      return dict.listen;
  };
  var listens = function (dictMonoid) {
      return function (dictMonad) {
          return function (dictMonadWriter) {
              return function (f) {
                  return function (m) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(listen(dictMonadWriter)(m))(function (v) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
                      });
                  };
              };
          };
      };
  };
  var censor = function (dictMonoid) {
      return function (dictMonad) {
          return function (dictMonadWriter) {
              return function (f) {
                  return function (m) {
                      return pass(dictMonadWriter)(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v, f));
                      }));
                  };
              };
          };
      };
  };
  exports["MonadWriter"] = MonadWriter;
  exports["censor"] = censor;
  exports["listens"] = listens;
  exports["tell"] = tell;
  exports["pass"] = pass;
  exports["listen"] = listen;
  exports["writer"] = writer;;
 
})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];     
  var MonadRWS = function (__superclass_Control$dotMonad$dotReader$dotClass$dotMonadReader_1, __superclass_Control$dotMonad$dotState$dotClass$dotMonadState_3, __superclass_Control$dotMonad$dotWriter$dotClass$dotMonadWriter_2, __superclass_Data$dotMonoid$dotMonoid_0) {
      this["__superclass_Control.Monad.Reader.Class.MonadReader_1"] = __superclass_Control$dotMonad$dotReader$dotClass$dotMonadReader_1;
      this["__superclass_Control.Monad.State.Class.MonadState_3"] = __superclass_Control$dotMonad$dotState$dotClass$dotMonadState_3;
      this["__superclass_Control.Monad.Writer.Class.MonadWriter_2"] = __superclass_Control$dotMonad$dotWriter$dotClass$dotMonadWriter_2;
      this["__superclass_Data.Monoid.Monoid_0"] = __superclass_Data$dotMonoid$dotMonoid_0;
  };
  exports["MonadRWS"] = MonadRWS;;
 
})(PS["Control.Monad.RWS.Class"] = PS["Control.Monad.RWS.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          var mapLeft = function (f1) {
              return function (v) {
                  if (v instanceof Data_Either.Right) {
                      return new Data_Either.Right(v.value0);
                  };
                  if (v instanceof Data_Either.Left) {
                      return new Data_Either.Left(f1(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans line 43, column 3 - line 44, column 3: " + [ f1.constructor.name, v.constructor.name ]);
              };
          };
          return function ($66) {
              return ExceptT(Prelude["<$>"](dictFunctor)(mapLeft(f))(runExceptT($66)));
          };
      };
  };
  var monadTransExceptT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function (m) {
          return ExceptT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(v));
          }));
      };
  });
  var mapExceptT = function (f) {
      return function (m) {
          return f(runExceptT(m));
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return mapExceptT(Prelude["<$>"](dictFunctor)(Prelude["<$>"](Data_Either.functorEither)(f)));
      });
  };
  var applyExceptT = function (dictApply) {
      return new Prelude.Apply(function () {
          return functorExceptT(dictApply["__superclass_Prelude.Functor_0"]());
      }, function (v) {
          return function (v1) {
              var f$prime = Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["<*>"](Data_Either.applyEither))(v);
              var x$prime = Prelude["<*>"](dictApply)(f$prime)(v1);
              return x$prime;
          };
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyExceptT((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]());
      }, function (m) {
          return function (k) {
              return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(function ($67) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Either.Left.create($67));
              })(function ($68) {
                  return runExceptT(k($68));
              }));
          };
      });
  };
  var applicativeExceptT = function (dictApplicative) {
      return new Prelude.Applicative(function () {
          return applyExceptT(dictApplicative["__superclass_Prelude.Apply_0"]());
      }, function ($69) {
          return ExceptT(Prelude.pure(dictApplicative)(Data_Either.Right.create($69)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeExceptT(dictMonad["__superclass_Prelude.Applicative_0"]());
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var monadContExceptT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadExceptT(dictMonadCont["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              return runExceptT(f(function (a) {
                  return ExceptT(c(new Data_Either.Right(a)));
              }));
          }));
      });
  };
  var monadEffExceptT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadExceptT(dictMonadEff["__superclass_Prelude.Monad_0"]());
      }, function ($70) {
          return Control_Monad_Trans.lift(monadTransExceptT)(dictMonadEff["__superclass_Prelude.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($70));
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadExceptT(dictMonad);
      }, function (m) {
          return function (handler) {
              return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(function ($71) {
                  return runExceptT(handler($71));
              })(function ($72) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Either.Right.create($72));
              }));
          };
      }, function ($73) {
          return ExceptT(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Either.Left.create($73)));
      });
  };
  var monadReaderExceptT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadExceptT(dictMonadReader["__superclass_Prelude.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransExceptT)(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadRecExceptT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadExceptT(dictMonadRec["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return function ($74) {
              return ExceptT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runExceptT(f(a)))(function (v) {
                      return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                          if (v instanceof Data_Either.Left) {
                              return new Data_Either.Right(new Data_Either.Left(v.value0));
                          };
                          if (v instanceof Data_Either.Right && v.value0 instanceof Data_Either.Left) {
                              return new Data_Either.Left(v.value0.value0);
                          };
                          if (v instanceof Data_Either.Right && v.value0 instanceof Data_Either.Right) {
                              return new Data_Either.Right(new Data_Either.Right(v.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans line 68, column 1 - line 76, column 1: " + [ v.constructor.name ]);
                      })());
                  });
              })($74));
          };
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return Control_Monad_Trans.lift(monadTransExceptT)(dictMonadState["__superclass_Prelude.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadWriterExceptT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadExceptT(dictMonadWriter["__superclass_Prelude.Monad_0"]());
      }, mapExceptT(function (m) {
          return Prelude.bind((dictMonadWriter["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
              return Prelude["return"]((dictMonadWriter["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(Prelude["<$>"](Data_Either.functorEither)(function (r) {
                  return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
          });
      }), mapExceptT(function (m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Prelude.bind((dictMonadWriter["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(m)(function (v) {
              return Prelude["return"]((dictMonadWriter["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Tuple.Tuple(new Data_Either.Left(v.value0), Prelude.id(Prelude.categoryFn));
                  };
                  if (v instanceof Data_Either.Right) {
                      return new Data_Tuple.Tuple(new Data_Either.Right(v.value0.value0), v.value0.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans line 116, column 1 - line 127, column 1: " + [ v.constructor.name ]);
              })());
          }));
      }), function (wd) {
          return Control_Monad_Trans.lift(monadTransExceptT)(dictMonadWriter["__superclass_Prelude.Monad_0"]())(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
      });
  };
  var monadRWSExceptT = function (dictMonoid) {
      return function (dictMonadRWS) {
          return new Control_Monad_RWS_Class.MonadRWS(function () {
              return monadReaderExceptT(dictMonadRWS["__superclass_Control.Monad.Reader.Class.MonadReader_1"]());
          }, function () {
              return monadStateExceptT(dictMonadRWS["__superclass_Control.Monad.State.Class.MonadState_3"]());
          }, function () {
              return monadWriterExceptT(dictMonadRWS["__superclass_Control.Monad.Writer.Class.MonadWriter_2"]());
          }, function () {
              return dictMonoid;
          });
      };
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
          }, function (m) {
              return function (n) {
                  return ExceptT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(m))(function (v) {
                      if (v instanceof Data_Either.Right) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(v.value0));
                      };
                      if (v instanceof Data_Either.Left) {
                          return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(n))(function (v1) {
                              if (v1 instanceof Data_Either.Right) {
                                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(v1.value0));
                              };
                              if (v1 instanceof Data_Either.Left) {
                                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Left(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans line 76, column 1 - line 87, column 1: " + [ v1.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 76, column 1 - line 87, column 1: " + [ v.constructor.name ]);
                  }));
              };
          });
      };
  };
  var plusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Plus.Plus(function () {
              return altExceptT(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictMonad);
          }, Control_Monad_Error_Class.throwError(monadErrorExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var alternativeExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Alternative.Alternative(function () {
              return plusExceptT(dictMonoid)(dictMonad);
          }, function () {
              return applicativeExceptT(dictMonad["__superclass_Prelude.Applicative_0"]());
          });
      };
  };
  var monadPlusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_MonadPlus.MonadPlus(function () {
              return alternativeExceptT(dictMonoid)(dictMonad);
          }, function () {
              return monadExceptT(dictMonad);
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["withExceptT"] = withExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadRecExceptT"] = monadRecExceptT;
  exports["altExceptT"] = altExceptT;
  exports["plusExceptT"] = plusExceptT;
  exports["alternativeExceptT"] = alternativeExceptT;
  exports["monadPlusExceptT"] = monadPlusExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffExceptT"] = monadEffExceptT;
  exports["monadContExceptT"] = monadContExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadReaderExceptT"] = monadReaderExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
  exports["monadWriterExceptT"] = monadWriterExceptT;
  exports["monadRWSExceptT"] = monadRWSExceptT;;
 
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Lazy

  exports.defer = function () {

    function Defer (thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      delete this.thunk;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
 
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Lazy = PS["Control.Lazy"];     
  var showLazy = function (dictShow) {
      return new Prelude.Show(function (x) {
          return "Lazy " + Prelude.show(dictShow)($foreign.force(x));
      });
  };
  var semiringLazy = function (dictSemiring) {
      return new Prelude.Semiring(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["+"](dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["*"](dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, $foreign.defer(function (v) {
          return Prelude.one(dictSemiring);
      }), $foreign.defer(function (v) {
          return Prelude.zero(dictSemiring);
      }));
  };
  var semigroupLazy = function (dictSemigroup) {
      return new Prelude.Semigroup(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["<>"](dictSemigroup)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var ringLazy = function (dictRing) {
      return new Prelude.Ring(function () {
          return semiringLazy(dictRing["__superclass_Prelude.Semiring_0"]());
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["-"](dictRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var monoidLazy = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupLazy(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, $foreign.defer(function (v) {
          return Data_Monoid.mempty(dictMonoid);
      }));
  };
  var moduloSemiringLazy = function (dictModuloSemiring) {
      return new Prelude.ModuloSemiring(function () {
          return semiringLazy(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["/"](dictModuloSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude.mod(dictModuloSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var lazyLazy = new Control_Lazy.Lazy(function (f) {
      return $foreign.defer(function (v) {
          return $foreign.force(f(Prelude.unit));
      });
  });
  var functorLazy = new Prelude.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var extendLazy = new Control_Extend.Extend(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return f(x);
          });
      };
  });
  var eqLazy = function (dictEq) {
      return new Prelude.Eq(function (x) {
          return function (y) {
              return Prelude["=="](dictEq)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var ordLazy = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqLazy(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (x) {
          return function (y) {
              return Prelude.compare(dictOrd)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var divisionRingLazy = function (dictDivisionRing) {
      return new Prelude.DivisionRing(function () {
          return moduloSemiringLazy(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
      }, function () {
          return ringLazy(dictDivisionRing["__superclass_Prelude.Ring_0"]());
      });
  };
  var numLazy = function (dictNum) {
      return new Prelude.Num(function () {
          return divisionRingLazy(dictNum["__superclass_Prelude.DivisionRing_0"]());
      });
  };
  var comonadLazy = new Control_Comonad.Comonad(function () {
      return extendLazy;
  }, $foreign.force);
  var boundedLazy = function (dictBounded) {
      return new Prelude.Bounded($foreign.defer(function (v) {
          return Prelude.bottom(dictBounded);
      }), $foreign.defer(function (v) {
          return Prelude.top(dictBounded);
      }));
  };
  var boundedOrdLazy = function (dictBoundedOrd) {
      return new Prelude.BoundedOrd(function () {
          return boundedLazy(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
      }, function () {
          return ordLazy(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
      });
  };
  var applyLazy = new Prelude.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Prelude.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  var booleanAlgebraLazy = function (dictBooleanAlgebra) {
      return new Prelude.BooleanAlgebra(function () {
          return boundedLazy(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (a) {
          return function (b) {
              return Prelude["<*>"](applyLazy)(Prelude["<$>"](functorLazy)(Prelude.conj(dictBooleanAlgebra))(a))(b);
          };
      }, function (a) {
          return function (b) {
              return Prelude["<*>"](applyLazy)(Prelude["<$>"](functorLazy)(Prelude.disj(dictBooleanAlgebra))(a))(b);
          };
      }, function (a) {
          return Prelude["<$>"](functorLazy)(Prelude.not(dictBooleanAlgebra))(a);
      });
  };
  var applicativeLazy = new Prelude.Applicative(function () {
      return applyLazy;
  }, function (a) {
      return $foreign.defer(function (v) {
          return a;
      });
  });
  var monadLazy = new Prelude.Monad(function () {
      return applicativeLazy;
  }, function () {
      return bindLazy;
  });
  exports["semiringLazy"] = semiringLazy;
  exports["ringLazy"] = ringLazy;
  exports["moduloSemiringLazy"] = moduloSemiringLazy;
  exports["divisionRingLazy"] = divisionRingLazy;
  exports["numLazy"] = numLazy;
  exports["eqLazy"] = eqLazy;
  exports["ordLazy"] = ordLazy;
  exports["boundedLazy"] = boundedLazy;
  exports["boundedOrdLazy"] = boundedOrdLazy;
  exports["semigroupLazy"] = semigroupLazy;
  exports["monoidLazy"] = monoidLazy;
  exports["booleanAlgebraLazy"] = booleanAlgebraLazy;
  exports["functorLazy"] = functorLazy;
  exports["applyLazy"] = applyLazy;
  exports["applicativeLazy"] = applicativeLazy;
  exports["bindLazy"] = bindLazy;
  exports["monadLazy"] = monadLazy;
  exports["extendLazy"] = extendLazy;
  exports["comonadLazy"] = comonadLazy;
  exports["showLazy"] = showLazy;
  exports["lazyLazy"] = lazyLazy;
  exports["force"] = $foreign.force;
  exports["defer"] = $foreign.defer;;
 
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.ST

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.peekSTArrayImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.pokeSTArray = function (xs) {
    return function (i) {
      return function (a) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.spliceSTArray = function (xs) {
    return function (i) {
      return function (howMany) {
        return function (bs) {
          return function () {
            return xs.splice.apply(xs, [i, howMany].concat(bs));
          };
        };
      };
    };
  };

  exports.copyImpl = function (xs) {
    return function () {
      return xs.slice();
    };
  };

  exports.toAssocArray = function (xs) {
    return function () {
      var n = xs.length;
      var as = new Array(n);
      for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
      return as;
    };
  };
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];     
  var thaw = $foreign.copyImpl;
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  var peekSTArray = $foreign.peekSTArrayImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var freeze = $foreign.copyImpl;
  exports["thaw"] = thaw;
  exports["freeze"] = freeze;
  exports["pushSTArray"] = pushSTArray;
  exports["peekSTArray"] = peekSTArray;
  exports["toAssocArray"] = $foreign.toAssocArray;
  exports["spliceSTArray"] = $foreign.spliceSTArray;
  exports["pushAllSTArray"] = $foreign.pushAllSTArray;
  exports["pokeSTArray"] = $foreign.pokeSTArray;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["runSTArray"] = $foreign.runSTArray;;
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];     
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function (f) {
      return function (b) {
          return Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(function __do() {
              var v = Data_Array_ST.emptySTArray();
              var v1 = Control_Monad_ST.newSTRef(b)();
              (function () {
                  while (!(function __do() {
                      var v2 = Control_Monad_ST.readSTRef(v1)();
                      return (function () {
                          var $12 = f(v2);
                          if ($12 instanceof Data_Maybe.Nothing) {
                              return Prelude["return"](Control_Monad_Eff.applicativeEff)(true);
                          };
                          if ($12 instanceof Data_Maybe.Just) {
                              return function __do() {
                                  Data_Array_ST.pushSTArray(v)($12.value0.value0)();
                                  Control_Monad_ST.writeSTRef(v1)($12.value0.value1)();
                                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(false)();
                              };
                          };
                          throw new Error("Failed pattern match at Data.Unfoldable line 29, column 1 - line 49, column 1: " + [ $12.constructor.name ]);
                      })()();
                  })()) {

                  };
                  return {};
              })();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          }));
      };
  });
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $16 = i <= 0;
                  if ($16) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (!$16) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1));
                  };
                  throw new Error("Failed pattern match at Data.Unfoldable line 52, column 5 - line 53, column 5: " + [ $16.constructor.name ]);
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  var singleton = function (dictUnfoldable) {
      return replicate(dictUnfoldable)(1);
  };
  var none = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(Prelude["const"](Data_Maybe.Nothing.value))(Prelude.unit);
  };
  exports["Unfoldable"] = Unfoldable;
  exports["singleton"] = singleton;
  exports["none"] = none;
  exports["replicateA"] = replicateA;
  exports["replicate"] = replicate;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;;
 
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Yield = (function () {
      function Yield(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Yield.create = function (value0) {
          return function (value1) {
              return new Yield(value0, value1);
          };
      };
      return Yield;
  })();
  var Skip = (function () {
      function Skip(value0) {
          this.value0 = value0;
      };
      Skip.create = function (value0) {
          return new Skip(value0);
      };
      return Skip;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var ListT = (function () {
      function ListT(value0) {
          this.value0 = value0;
      };
      ListT.create = function (value0) {
          return new ListT(value0);
      };
      return ListT;
  })();
  var wrapLazy = function (dictApplicative) {
      return function (v) {
          return ListT.create(Prelude.pure(dictApplicative)(new Skip(v)));
      };
  };
  var wrapEffect = function (dictFunctor) {
      return function (v) {
          return ListT.create(Prelude["<$>"](dictFunctor)(function ($159) {
              return Skip.create(Data_Lazy.defer(Prelude["const"]($159)));
          })(v));
      };
  };
  var unfold = function (dictMonad) {
      return function (f) {
          return function (z) {
              var g = function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
                          return unfold(dictMonad)(f)(v.value0.value0);
                      }));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 118, column 3 - line 119, column 3: " + [ v.constructor.name ]);
              };
              return ListT.create(Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g)(f(z)));
          };
      };
  };
  var runListT = function (v) {
      return v.value0;
  };
  var scanl = function (dictMonad) {
      return function (f) {
          return function (b) {
              return function (l) {
                  var g = function (v) {
                      var h = function (v1) {
                          if (v1 instanceof Yield) {
                              var b$prime = f(v.value0)(v1.value0);
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime, Data_Lazy.force(v1.value1)), b$prime));
                          };
                          if (v1 instanceof Skip) {
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
                          };
                          if (v1 instanceof Done) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Control.Monad.List.Trans line 217, column 5 - line 219, column 5: " + [ v1.constructor.name ]);
                      };
                      return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(h)(runListT(v.value1));
                  };
                  return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
              };
          };
      };
  };
  var stepMap = function (dictFunctor) {
      return function (f) {
          return function (l) {
              return ListT.create(Prelude["<$>"](dictFunctor)(f)(runListT(l)));
          };
      };
  };
  var takeWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $88 = f(v.value0);
                  if ($88) {
                      return new Yield(v.value0, Prelude["<$>"](Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
                  };
                  if (!$88) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 142, column 3 - line 143, column 3: " + [ $88.constructor.name ]);
              };
              if (v instanceof Skip) {
                  return Skip.create(Prelude["<$>"](Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 142, column 3 - line 143, column 3: " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g);
      };
  };
  var uncons = function (dictMonad) {
      return function (l) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Just.create(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v.value1))));
              };
              if (v instanceof Skip) {
                  return uncons(dictMonad)(Data_Lazy.force(v.value0));
              };
              if (v instanceof Done) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Nothing.value);
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 183, column 3 - line 184, column 3: " + [ v.constructor.name ]);
          };
          return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runListT(l))(g);
      };
  };
  var tail = function (dictMonad) {
      return function (l) {
          return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
      };
  };
  var prepend$prime = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return ListT.create(Prelude.pure(dictApplicative)(new Yield(h, t)));
          };
      };
  };
  var prepend = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return prepend$prime(dictApplicative)(h)(Data_Lazy.defer(Prelude["const"](t)));
          };
      };
  };
  var nil = function (dictApplicative) {
      return ListT.create(Prelude.pure(dictApplicative)(Done.value));
  };
  var singleton = function (dictApplicative) {
      return function (a) {
          return prepend(dictApplicative)(a)(nil(dictApplicative));
      };
  };
  var take = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return nil(dictApplicative);
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Yield(v1.value0, Prelude["<$>"](Data_Lazy.functorLazy)(take(dictApplicative)(v - 1))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 135, column 3 - line 136, column 3: " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(fa);
          };
      };
  };
  var zipWith$prime = function (dictMonad) {
      return function (f) {
          var g = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(nil(dictMonad["__superclass_Prelude.Applicative_0"]()));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(nil(dictMonad["__superclass_Prelude.Applicative_0"]()));
                  };
                  if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                      return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.flip(prepend$prime(dictMonad["__superclass_Prelude.Applicative_0"]()))(Data_Lazy.defer(function (v2) {
                          return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
                      })))(f(v.value0.value0)(v1.value0.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 225, column 3 - line 230, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var loop = function (fa) {
              return function (fb) {
                  return wrapEffect(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(uncons(dictMonad)(fa))(function (v) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(uncons(dictMonad)(fb))(function (v1) {
                          return g(v)(v1);
                      });
                  }));
              };
          };
          return loop;
      };
  };
  var zipWith = function (dictMonad) {
      return function (f) {
          var g = function (a) {
              return function (b) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(f(a)(b));
              };
          };
          return zipWith$prime(dictMonad)(g);
      };
  };
  var mapMaybe = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return Data_Maybe.fromMaybe(Skip.create)(Prelude["<$>"](Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Prelude["<$>"](Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return Skip.create(Prelude["<$>"](Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 171, column 3 - line 172, column 3: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var iterate = function (dictMonad) {
      return function (f) {
          return function (a) {
              var g = function (a1) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(a1), a1)));
              };
              return unfold(dictMonad)(g)(a);
          };
      };
  };
  var repeat = function (dictMonad) {
      return iterate(dictMonad)(Prelude.id(Prelude.categoryFn));
  };
  var head = function (dictMonad) {
      return function (l) {
          return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
      };
  };
  var functorListT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return new Yield(f(v.value0), Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](functorListT(dictFunctor))(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](functorListT(dictFunctor))(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 248, column 5 - line 249, column 5: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      });
  };
  var fromEffect = function (dictApplicative) {
      return function (fa) {
          return ListT.create(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(function (v) {
              return new Yield(v, Data_Lazy.defer(function (v1) {
                  return nil(dictApplicative);
              }));
          })(fa));
      };
  };
  var monadTransListT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return fromEffect(dictMonad["__superclass_Prelude.Applicative_0"]());
  });
  var foldl$prime = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(f(b)(v.value0.value0))(Prelude.flip(loop)(v.value0.value1));
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 200, column 5 - line 201, column 5: " + [ v.constructor.name ]);
                  };
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var foldl = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return loop(f(b)(v.value0.value0))(v.value0.value1);
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 208, column 5 - line 209, column 5: " + [ v.constructor.name ]);
                  };
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var filter = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var s$prime = Prelude["<$>"](Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
                  var $131 = f(v.value0);
                  if ($131) {
                      return new Yield(v.value0, s$prime);
                  };
                  if (!$131) {
                      return new Skip(s$prime);
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 164, column 3 - line 165, column 3: " + [ $131.constructor.name ]);
              };
              if (v instanceof Skip) {
                  var s$prime = Prelude["<$>"](Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
                  return new Skip(s$prime);
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 164, column 3 - line 165, column 3: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var dropWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $136 = f(v.value0);
                  if ($136) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
                  };
                  if (!$136) {
                      return new Yield(v.value0, v.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 157, column 3 - line 158, column 3: " + [ $136.constructor.name ]);
              };
              if (v instanceof Skip) {
                  return Skip.create(Prelude["<$>"](Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 157, column 3 - line 158, column 3: " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g);
      };
  };
  var drop = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return fa;
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 150, column 3 - line 151, column 3: " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(fa);
          };
      };
  };
  var cons = function (dictApplicative) {
      return function (lh) {
          return function (t) {
              return ListT.create(Prelude.pure(dictApplicative)(new Yield(Data_Lazy.force(lh), t)));
          };
      };
  };
  var unfoldableListT = function (dictMonad) {
      return new Data_Unfoldable.Unfoldable(function (f) {
          return function (b) {
              var go = function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return nil(dictMonad["__superclass_Prelude.Applicative_0"]());
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return cons(dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
                          return go(f(v.value0.value1));
                      }));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 252, column 1 - line 257, column 1: " + [ v.constructor.name ]);
              };
              return go(f(b));
          };
      });
  };
  var semigroupListT = function (dictApplicative) {
      return new Prelude.Semigroup(concat(dictApplicative));
  };
  var concat = function (dictApplicative) {
      return function (x) {
          return function (y) {
              var f = function (v) {
                  if (v instanceof Yield) {
                      return new Yield(v.value0, Prelude["<$>"](Data_Lazy.functorLazy)(function (v1) {
                          return Prelude["<>"](semigroupListT(dictApplicative))(v1)(y);
                      })(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(function (v1) {
                          return Prelude["<>"](semigroupListT(dictApplicative))(v1)(y);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return new Skip(Data_Lazy.defer(Prelude["const"](y)));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 94, column 3 - line 95, column 3: " + [ v.constructor.name ]);
              };
              return stepMap((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(x);
          };
      };
  };
  var monoidListT = function (dictApplicative) {
      return new Data_Monoid.Monoid(function () {
          return semigroupListT(dictApplicative);
      }, nil(dictApplicative));
  };
  var catMaybes = function (dictFunctor) {
      return mapMaybe(dictFunctor)(Prelude.id(Prelude.categoryFn));
  };
  var monadListT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeListT(dictMonad);
      }, function () {
          return bindListT(dictMonad);
      });
  };
  var bindListT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyListT(dictMonad);
      }, function (fa) {
          return function (f) {
              var g = function (v) {
                  if (v instanceof Yield) {
                      var h = function (s1) {
                          return Prelude["<>"](semigroupListT(dictMonad["__superclass_Prelude.Applicative_0"]()))(f(v.value0))(Prelude[">>="](bindListT(dictMonad))(s1)(f));
                      };
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(h)(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(function (v1) {
                          return Prelude[">>="](bindListT(dictMonad))(v1)(f);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 265, column 5 - line 268, column 5: " + [ v.constructor.name ]);
              };
              return stepMap(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g)(fa);
          };
      });
  };
  var applyListT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorListT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, Prelude.ap(monadListT(dictMonad)));
  };
  var applicativeListT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyListT(dictMonad);
      }, singleton(dictMonad["__superclass_Prelude.Applicative_0"]()));
  };
  var monadEffListT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadListT(dictMonadEff["__superclass_Prelude.Monad_0"]());
      }, function ($160) {
          return Control_Monad_Trans.lift(monadTransListT)(dictMonadEff["__superclass_Prelude.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($160));
      });
  };
  var altListT = function (dictApplicative) {
      return new Control_Alt.Alt(function () {
          return functorListT((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, concat(dictApplicative));
  };
  var plusListT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altListT(dictMonad["__superclass_Prelude.Applicative_0"]());
      }, nil(dictMonad["__superclass_Prelude.Applicative_0"]()));
  };
  var alternativeListT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return plusListT(dictMonad);
      }, function () {
          return applicativeListT(dictMonad);
      });
  };
  var monadPlusListT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeListT(dictMonad);
      }, function () {
          return monadListT(dictMonad);
      });
  };
  exports["zipWith'"] = zipWith$prime;
  exports["zipWith"] = zipWith;
  exports["wrapLazy"] = wrapLazy;
  exports["wrapEffect"] = wrapEffect;
  exports["unfold"] = unfold;
  exports["uncons"] = uncons;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["tail"] = tail;
  exports["singleton"] = singleton;
  exports["scanl"] = scanl;
  exports["repeat"] = repeat;
  exports["prepend'"] = prepend$prime;
  exports["prepend"] = prepend;
  exports["nil"] = nil;
  exports["mapMaybe"] = mapMaybe;
  exports["iterate"] = iterate;
  exports["head"] = head;
  exports["fromEffect"] = fromEffect;
  exports["foldl'"] = foldl$prime;
  exports["foldl"] = foldl;
  exports["filter"] = filter;
  exports["dropWhile"] = dropWhile;
  exports["drop"] = drop;
  exports["cons"] = cons;
  exports["catMaybes"] = catMaybes;
  exports["semigroupListT"] = semigroupListT;
  exports["monoidListT"] = monoidListT;
  exports["functorListT"] = functorListT;
  exports["unfoldableListT"] = unfoldableListT;
  exports["applyListT"] = applyListT;
  exports["applicativeListT"] = applicativeListT;
  exports["bindListT"] = bindListT;
  exports["monadListT"] = monadListT;
  exports["monadTransListT"] = monadTransListT;
  exports["altListT"] = altListT;
  exports["plusListT"] = plusListT;
  exports["alternativeListT"] = alternativeListT;
  exports["monadPlusListT"] = monadPlusListT;
  exports["monadEffListT"] = monadEffListT;;
 
})(PS["Control.Monad.List.Trans"] = PS["Control.Monad.List.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var MaybeT = function (x) {
      return x;
  };
  var runMaybeT = function (v) {
      return v;
  };
  var monadTransMaybeT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function ($46) {
          return MaybeT(Prelude.liftM1(dictMonad)(Data_Maybe.Just.create)($46));
      };
  });
  var mapMaybeT = function (f) {
      return function ($47) {
          return MaybeT(f(runMaybeT($47)));
      };
  };
  var monadMaybeT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return bindMaybeT(dictMonad);
      });
  };
  var functorMaybeT = function (dictMonad) {
      return new Prelude.Functor(Prelude.liftA1(applicativeMaybeT(dictMonad)));
  };
  var bindMaybeT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyMaybeT(dictMonad);
      }, function (x) {
          return function (f) {
              return MaybeT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runMaybeT(x))(function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Nothing.value);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return runMaybeT(f(v.value0));
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name ]);
              }));
          };
      });
  };
  var applyMaybeT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorMaybeT(dictMonad);
      }, Prelude.ap(monadMaybeT(dictMonad)));
  };
  var applicativeMaybeT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyMaybeT(dictMonad);
      }, function ($48) {
          return MaybeT(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Just.create($48)));
      });
  };
  var monadContMaybeT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadMaybeT(dictMonadCont["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              return runMaybeT(f(function (a) {
                  return MaybeT(c(new Data_Maybe.Just(a)));
              }));
          }));
      });
  };
  var monadEffMaybe = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadMaybeT(dictMonadEff["__superclass_Prelude.Monad_0"]());
      }, function ($49) {
          return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadEff["__superclass_Prelude.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($49));
      });
  };
  var monadErrorMaybeT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadMaybeT(dictMonadError["__superclass_Prelude.Monad_0"]());
      }, function (m) {
          return function (h) {
              return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(runMaybeT(m))(function ($50) {
                  return runMaybeT(h($50));
              }));
          };
      }, function (e) {
          return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
      });
  };
  var monadReaderMaybeT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadMaybeT(dictMonadReader["__superclass_Prelude.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadRecMaybeT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadMaybeT(dictMonadRec["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return function ($51) {
              return MaybeT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runMaybeT(f(a)))(function (v) {
                      return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                          if (v instanceof Data_Maybe.Nothing) {
                              return new Data_Either.Right(Data_Maybe.Nothing.value);
                          };
                          if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Left) {
                              return new Data_Either.Left(v.value0.value0);
                          };
                          if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
                              return new Data_Either.Right(new Data_Maybe.Just(v.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 78, column 1 - line 86, column 1: " + [ v.constructor.name ]);
                      })());
                  });
              })($51));
          };
      });
  };
  var monadStateMaybeT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadMaybeT(dictMonadState["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadState["__superclass_Prelude.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadWriterMaybeT = function (dictMonad) {
      return function (dictMonadWriter) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadMaybeT(dictMonad);
          }, mapMaybeT(function (m) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude["<$>"](Data_Maybe.functorMaybe)(function (r) {
                      return new Data_Tuple.Tuple(r, v.value1);
                  })(v.value0));
              });
          }), mapMaybeT(function (m) {
              return Control_Monad_Writer_Class.pass(dictMonadWriter)(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                      if (v instanceof Data_Maybe.Nothing) {
                          return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Prelude.id(Prelude.categoryFn));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return new Data_Tuple.Tuple(new Data_Maybe.Just(v.value0.value0), v.value0.value1);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 103, column 1 - line 114, column 1: " + [ v.constructor.name ]);
                  })());
              }));
          }), function (wd) {
              return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonad)(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
          });
      };
  };
  var monadRWSMaybeT = function (dictMonoid) {
      return function (dictMonadRWS) {
          return new Control_Monad_RWS_Class.MonadRWS(function () {
              return monadReaderMaybeT(dictMonadRWS["__superclass_Control.Monad.Reader.Class.MonadReader_1"]());
          }, function () {
              return monadStateMaybeT(dictMonadRWS["__superclass_Control.Monad.State.Class.MonadState_3"]());
          }, function () {
              return monadWriterMaybeT((dictMonadRWS["__superclass_Control.Monad.State.Class.MonadState_3"]())["__superclass_Prelude.Monad_0"]())(dictMonadRWS["__superclass_Control.Monad.Writer.Class.MonadWriter_2"]());
          }, function () {
              return dictMonoid;
          });
      };
  };
  var altMaybeT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorMaybeT(dictMonad);
      }, function (m1) {
          return function (m2) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runMaybeT(m1))(function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return runMaybeT(m2);
                  };
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(v);
              });
          };
      });
  };
  var plusMaybeT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altMaybeT(dictMonad);
      }, Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Nothing.value));
  };
  var alternativeMaybeT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return plusMaybeT(dictMonad);
      }, function () {
          return applicativeMaybeT(dictMonad);
      });
  };
  var monadPlusMaybeT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeMaybeT(dictMonad);
      }, function () {
          return monadMaybeT(dictMonad);
      });
  };
  exports["MaybeT"] = MaybeT;
  exports["mapMaybeT"] = mapMaybeT;
  exports["runMaybeT"] = runMaybeT;
  exports["functorMaybeT"] = functorMaybeT;
  exports["applyMaybeT"] = applyMaybeT;
  exports["applicativeMaybeT"] = applicativeMaybeT;
  exports["bindMaybeT"] = bindMaybeT;
  exports["monadMaybeT"] = monadMaybeT;
  exports["monadTransMaybeT"] = monadTransMaybeT;
  exports["altMaybeT"] = altMaybeT;
  exports["plusMaybeT"] = plusMaybeT;
  exports["alternativeMaybeT"] = alternativeMaybeT;
  exports["monadPlusMaybeT"] = monadPlusMaybeT;
  exports["monadRecMaybeT"] = monadRecMaybeT;
  exports["monadEffMaybe"] = monadEffMaybe;
  exports["monadContMaybeT"] = monadContMaybeT;
  exports["monadErrorMaybeT"] = monadErrorMaybeT;
  exports["monadReaderMaybeT"] = monadReaderMaybeT;
  exports["monadStateMaybeT"] = monadStateMaybeT;
  exports["monadWriterMaybeT"] = monadWriterMaybeT;
  exports["monadRWSMaybeT"] = monadRWSMaybeT;;
 
})(PS["Control.Monad.Maybe.Trans"] = PS["Control.Monad.Maybe.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Identity = PS["Data.Identity"];     
  var Distributive = function (__superclass_Prelude$dotFunctor_0, collect, distribute) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.collect = collect;
      this.distribute = distribute;
  };
  var distributiveIdentity = new Distributive(function () {
      return Data_Identity.functorIdentity;
  }, function (dictFunctor) {
      return function (f) {
          return function ($7) {
              return Data_Identity.Identity(Prelude.map(dictFunctor)(function ($8) {
                  return Data_Identity.runIdentity(f($8));
              })($7));
          };
      };
  }, function (dictFunctor) {
      return function ($9) {
          return Data_Identity.Identity(Prelude.map(dictFunctor)(Data_Identity.runIdentity)($9));
      };
  });
  var distribute = function (dict) {
      return dict.distribute;
  };
  var distributiveFunction = new Distributive(function () {
      return Prelude.functorFn;
  }, function (dictFunctor) {
      return function (f) {
          return function ($10) {
              return distribute(distributiveFunction)(dictFunctor)(Prelude.map(dictFunctor)(f)($10));
          };
      };
  }, function (dictFunctor) {
      return function (a) {
          return function (e) {
              return Prelude.map(dictFunctor)(function (v) {
                  return v(e);
              })(a);
          };
      };
  });
  var cotraverse = function (dictDistributive) {
      return function (dictFunctor) {
          return function (f) {
              return function ($11) {
                  return Prelude.map(dictDistributive["__superclass_Prelude.Functor_0"]())(f)(distribute(dictDistributive)(dictFunctor)($11));
              };
          };
      };
  };
  var collect = function (dict) {
      return dict.collect;
  };
  exports["Distributive"] = Distributive;
  exports["cotraverse"] = cotraverse;
  exports["collect"] = collect;
  exports["distribute"] = distribute;
  exports["distributiveIdentity"] = distributiveIdentity;
  exports["distributiveFunction"] = distributiveFunction;;
 
})(PS["Data.Distributive"] = PS["Data.Distributive"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Either = PS["Data.Either"];     
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };
  var withReaderT = function (f) {
      return function (m) {
          return ReaderT(function ($27) {
              return runReaderT(m)(f($27));
          });
      };
  };
  var monadTransReaderT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function ($28) {
          return ReaderT(Prelude["const"]($28));
      };
  });
  var mapReaderT = function (f) {
      return function (m) {
          return ReaderT(function ($29) {
              return f(runReaderT(m)($29));
          });
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return mapReaderT(Prelude["<$>"](dictFunctor)(f));
      });
  };
  var distributiveReaderT = function (dictDistributive) {
      return new Data_Distributive.Distributive(function () {
          return functorReaderT(dictDistributive["__superclass_Prelude.Functor_0"]());
      }, function (dictFunctor) {
          return function (f) {
              return function ($30) {
                  return Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor)(Prelude.map(dictFunctor)(f)($30));
              };
          };
      }, function (dictFunctor) {
          return function (a) {
              return function (e) {
                  return Data_Distributive.collect(dictDistributive)(dictFunctor)(Prelude.flip(runReaderT)(e))(a);
              };
          };
      });
  };
  var applyReaderT = function (dictApplicative) {
      return new Prelude.Apply(function () {
          return functorReaderT((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, function (f) {
          return function (v) {
              return function (r) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(runReaderT(f)(r))(runReaderT(v)(r));
              };
          };
      });
  };
  var bindReaderT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyReaderT(dictMonad["__superclass_Prelude.Applicative_0"]());
      }, function (m) {
          return function (k) {
              return function (r) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runReaderT(m)(r))(function (v) {
                      return runReaderT(k(v))(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Prelude.Applicative(function () {
          return applyReaderT(dictApplicative);
      }, function ($31) {
          return ReaderT(Prelude["const"](Prelude.pure(dictApplicative)($31)));
      });
  };
  var monadReaderT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeReaderT(dictMonad["__superclass_Prelude.Applicative_0"]());
      }, function () {
          return bindReaderT(dictMonad);
      });
  };
  var monadContReaderT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadReaderT(dictMonadCont["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return ReaderT(function (r) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  return runReaderT(f(function (a) {
                      return ReaderT(Prelude["const"](c(a)));
                  }))(r);
              });
          });
      });
  };
  var monadEffReader = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadReaderT(dictMonadEff["__superclass_Prelude.Monad_0"]());
      }, function ($32) {
          return Control_Monad_Trans.lift(monadTransReaderT)(dictMonadEff["__superclass_Prelude.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($32));
      });
  };
  var monadErrorReaderT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadReaderT(dictMonadError["__superclass_Prelude.Monad_0"]());
      }, function (m) {
          return function (h) {
              return ReaderT(function (r) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(runReaderT(m)(r))(function (e) {
                      return runReaderT(h(e))(r);
                  });
              });
          };
      }, function (e) {
          return Control_Monad_Trans.lift(monadTransReaderT)(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
      });
  };
  var monadReaderReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadReaderT(dictMonad);
      }, Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]()), withReaderT);
  };
  var monadRecReaderT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadReaderT(dictMonadRec["__superclass_Prelude.Monad_0"]());
      }, function (k) {
          return function (a) {
              var k$prime = function (r) {
                  return function (a1) {
                      return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runReaderT(k(a1))(r))(function (v) {
                          return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(Data_Either.either(Data_Either.Left.create)(Data_Either.Right.create)(v));
                      });
                  };
              };
              return function (r) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
              };
          };
      });
  };
  var monadStateReaderT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadReaderT(dictMonadState["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return Control_Monad_Trans.lift(monadTransReaderT)(dictMonadState["__superclass_Prelude.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadWriterReaderT = function (dictMonad) {
      return function (dictMonadWriter) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadReaderT(dictMonad);
          }, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)), function (wd) {
              return Control_Monad_Trans.lift(monadTransReaderT)(dictMonad)(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
          });
      };
  };
  var altReaderT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorReaderT(dictAlt["__superclass_Prelude.Functor_0"]());
      }, function (m) {
          return function (n) {
              return function (r) {
                  return Control_Alt["<|>"](dictAlt)(runReaderT(m)(r))(runReaderT(n)(r));
              };
          };
      });
  };
  var plusReaderT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altReaderT(dictPlus["__superclass_Control.Alt.Alt_0"]());
      }, Prelude["const"](Control_Plus.empty(dictPlus)));
  };
  var alternativeReaderT = function (dictAlternative) {
      return new Control_Alternative.Alternative(function () {
          return plusReaderT(dictAlternative["__superclass_Control.Plus.Plus_1"]());
      }, function () {
          return applicativeReaderT(dictAlternative["__superclass_Prelude.Applicative_0"]());
      });
  };
  var monadPlusReaderT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeReaderT(dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]());
      }, function () {
          return monadReaderT(dictMonadPlus["__superclass_Prelude.Monad_0"]());
      });
  };
  exports["ReaderT"] = ReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["withReaderT"] = withReaderT;
  exports["runReaderT"] = runReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["altReaderT"] = altReaderT;
  exports["plusReaderT"] = plusReaderT;
  exports["alternativeReaderT"] = alternativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadPlusReaderT"] = monadPlusReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffReader"] = monadEffReader;
  exports["monadContReaderT"] = monadContReaderT;
  exports["monadErrorReaderT"] = monadErrorReaderT;
  exports["monadReaderReaderT"] = monadReaderReaderT;
  exports["monadStateReaderT"] = monadStateReaderT;
  exports["monadWriterReaderT"] = monadWriterReaderT;
  exports["distributiveReaderT"] = distributiveReaderT;
  exports["monadRecReaderT"] = monadRecReaderT;;
 
})(PS["Control.Monad.Reader.Trans"] = PS["Control.Monad.Reader.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];     
  var RWSResult = (function () {
      function RWSResult(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RWSResult.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RWSResult(value0, value1, value2);
              };
          };
      };
      return RWSResult;
  })();
  var RWST = function (x) {
      return x;
  };
  var runRWST = function (v) {
      return v;
  };
  var withRWST = function (f) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return Data_Tuple.uncurry(runRWST(m))(f(r)(s));
              };
          };
      };
  };
  var monadTransRWST = function (dictMonoid) {
      return new Control_Monad_Trans.MonadTrans(function (dictMonad) {
          return function (m) {
              return function (v) {
                  return function (s) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (a) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      });
                  };
              };
          };
      });
  };
  var mapRWST = function (f) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return f(runRWST(m)(r)(s));
              };
          };
      };
  };
  var functorRWST = function (dictFunctor) {
      return function (dictMonoid) {
          return new Prelude.Functor(function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return Prelude["<$>"](dictFunctor)(function (v) {
                              return new RWSResult(v.value0, f(v.value1), v.value2);
                          })(runRWST(m)(r)(s));
                      };
                  };
              };
          });
      };
  };
  var execRWST = function (dictMonad) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (v) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v.value0, v.value2));
                  });
              };
          };
      };
  };
  var evalRWST = function (dictMonad) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (v) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v.value1, v.value2));
                  });
              };
          };
      };
  };
  var applyRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Prelude.Apply(function () {
              return functorRWST((dictBind["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(dictMonoid);
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return Prelude[">>="](dictBind)(runRWST(f)(r)(s))(function (v) {
                              return Prelude["<#>"]((dictBind["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(runRWST(m)(r)(v.value0))(function (v1) {
                                  return new RWSResult(v1.value0, v.value1(v1.value1), Prelude["++"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value2)(v1.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var bindRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Prelude.Bind(function () {
              return applyRWST(dictBind)(dictMonoid);
          }, function (m) {
              return function (f) {
                  return function (r) {
                      return function (s) {
                          return Prelude[">>="](dictBind)(runRWST(m)(r)(s))(function (v) {
                              return Prelude["<#>"]((dictBind["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(runRWST(f(v.value1))(r)(v.value0))(function (v1) {
                                  return new RWSResult(v1.value0, v1.value1, Prelude["++"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value2)(v1.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var applicativeRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Prelude.Applicative(function () {
              return applyRWST(dictMonad["__superclass_Prelude.Bind_1"]())(dictMonoid);
          }, function (a) {
              return function (v) {
                  return function (s) {
                      return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Prelude.Monad(function () {
              return applicativeRWST(dictMonad)(dictMonoid);
          }, function () {
              return bindRWST(dictMonad["__superclass_Prelude.Bind_1"]())(dictMonoid);
          });
      };
  };
  var monadEffRWS = function (dictMonad) {
      return function (dictMonoid) {
          return function (dictMonadEff) {
              return new Control_Monad_Eff_Class.MonadEff(function () {
                  return monadRWST(dictMonad)(dictMonoid);
              }, function ($107) {
                  return Control_Monad_Trans.lift(monadTransRWST(dictMonoid))(dictMonad)(Control_Monad_Eff_Class.liftEff(dictMonadEff)($107));
              });
          };
      };
  };
  var monadErrorRWST = function (dictMonadError) {
      return function (dictMonoid) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadRWST(dictMonadError["__superclass_Prelude.Monad_0"]())(dictMonoid);
          }, function (m) {
              return function (h) {
                  return RWST(function (r) {
                      return function (s) {
                          return Control_Monad_Error_Class.catchError(dictMonadError)(runRWST(m)(r)(s))(function (e) {
                              return runRWST(h(e))(r)(s);
                          });
                      };
                  });
              };
          }, function (e) {
              return Control_Monad_Trans.lift(monadTransRWST(dictMonoid))(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
          });
      };
  };
  var monadReaderRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (r) {
              return function (s) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
              };
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return runRWST(m)(f(r))(s);
                      };
                  };
              };
          });
      };
  };
  var monadRecRWST = function (dictMonoid) {
      return function (dictMonadRec) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadRWST(dictMonadRec["__superclass_Prelude.Monad_0"]())(dictMonoid);
          }, function (k) {
              return function (a) {
                  var k$prime = function (r) {
                      return function (v) {
                          return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runRWST(k(v.value1))(r)(v.value0))(function (v1) {
                              return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                                  if (v1.value1 instanceof Data_Either.Left) {
                                      return new Data_Either.Left(new RWSResult(v1.value0, v1.value1.value0, Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value2)(v1.value2)));
                                  };
                                  if (v1.value1 instanceof Data_Either.Right) {
                                      return new Data_Either.Right(new RWSResult(v1.value0, v1.value1.value0, Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value2)(v1.value2)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.RWS.Trans line 98, column 5 - line 102, column 75: " + [ v1.value1.constructor.name ]);
                              })());
                          });
                      };
                  };
                  return function (r) {
                      return function (s) {
                          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      };
                  };
              };
          });
      };
  };
  var monadStateRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (v) {
                  return function (s) {
                      var $90 = f(s);
                      return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult($90.value1, $90.value0, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadWriterRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (v) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                      });
                  };
              };
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (v) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                      });
                  };
              };
          }, function (v) {
              return function (v1) {
                  return function (s) {
                      return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(s, v.value0, v.value1));
                  };
              };
          });
      };
  };
  var monadRWSRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_RWS_Class.MonadRWS(function () {
              return monadReaderRWST(dictMonad)(dictMonoid);
          }, function () {
              return monadStateRWST(dictMonad)(dictMonoid);
          }, function () {
              return monadWriterRWST(dictMonad)(dictMonoid);
          }, function () {
              return dictMonoid;
          });
      };
  };
  exports["RWST"] = RWST;
  exports["RWSResult"] = RWSResult;
  exports["withRWST"] = withRWST;
  exports["mapRWST"] = mapRWST;
  exports["execRWST"] = execRWST;
  exports["evalRWST"] = evalRWST;
  exports["runRWST"] = runRWST;
  exports["functorRWST"] = functorRWST;
  exports["applyRWST"] = applyRWST;
  exports["bindRWST"] = bindRWST;
  exports["applicativeRWST"] = applicativeRWST;
  exports["monadRWST"] = monadRWST;
  exports["monadTransRWST"] = monadTransRWST;
  exports["monadEffRWS"] = monadEffRWS;
  exports["monadReaderRWST"] = monadReaderRWST;
  exports["monadStateRWST"] = monadStateRWST;
  exports["monadWriterRWST"] = monadWriterRWST;
  exports["monadRWSRWST"] = monadRWSRWST;
  exports["monadErrorRWST"] = monadErrorRWST;
  exports["monadRecRWST"] = monadRecRWST;;
 
})(PS["Control.Monad.RWS.Trans"] = PS["Control.Monad.RWS.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Either = PS["Data.Either"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var withStateT = function (f) {
      return function (s) {
          return StateT(function ($60) {
              return runStateT(s)(f($60));
          });
      };
  };
  var monadTransStateT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var mapStateT = function (f) {
      return function (m) {
          return StateT(function ($61) {
              return f(runStateT(m)($61));
          });
      };
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return StateT(function (s) {
          return runStateT(f(Prelude.unit))(s);
      });
  });
  var execStateT = function (dictApply) {
      return function (m) {
          return function (s) {
              return Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Data_Tuple.snd)(runStateT(m)(s));
          };
      };
  };
  var evalStateT = function (dictApply) {
      return function (m) {
          return function (s) {
              return Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Data_Tuple.fst)(runStateT(m)(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var functorStateT = function (dictMonad) {
      return new Prelude.Functor(Prelude.liftM1(monadStateT(dictMonad)));
  };
  var bindStateT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(v(s))(function (v1) {
                      return runStateT(f(v1.value0))(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorStateT(dictMonad);
      }, Prelude.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return StateT(function (s) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(a, s));
          });
      });
  };
  var monadContStateT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadStateT(dictMonadCont["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return StateT(function (s) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  return runStateT(f(function (a) {
                      return StateT(function (s$prime) {
                          return c(new Data_Tuple.Tuple(a, s$prime));
                      });
                  }))(s);
              });
          });
      });
  };
  var monadEffState = function (dictMonad) {
      return function (dictMonadEff) {
          return new Control_Monad_Eff_Class.MonadEff(function () {
              return monadStateT(dictMonad);
          }, function ($62) {
              return Control_Monad_Trans.lift(monadTransStateT)(dictMonad)(Control_Monad_Eff_Class.liftEff(dictMonadEff)($62));
          });
      };
  };
  var monadErrorStateT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadStateT(dictMonadError["__superclass_Prelude.Monad_0"]());
      }, function (m) {
          return function (h) {
              return StateT(function (s) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(runStateT(m)(s))(function (e) {
                      return runStateT(h(e))(s);
                  });
              });
          };
      }, function (e) {
          return Control_Monad_Trans.lift(monadTransStateT)(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
      });
  };
  var monadReaderStateT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadStateT(dictMonadReader["__superclass_Prelude.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransStateT)(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return mapStateT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadRecStateT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadStateT(dictMonadRec["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return function (a) {
              var f$prime = function (v) {
                  return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runStateT(f(v.value0))(v.value1))(function (v1) {
                      return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                          if (v1.value0 instanceof Data_Either.Left) {
                              return new Data_Either.Left(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          if (v1.value0 instanceof Data_Either.Right) {
                              return new Data_Either.Right(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          throw new Error("Failed pattern match at Control.Monad.State.Trans line 83, column 5 - line 89, column 1: " + [ v1.value0.constructor.name ]);
                      })());
                  });
              };
              return function (s) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
              };
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($63) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(f($63));
          });
      });
  };
  var monadWriterStateT = function (dictMonad) {
      return function (dictMonadWriter) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadStateT(dictMonad);
          }, function (m) {
              return StateT(function (s) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Class.listen(dictMonadWriter)(runStateT(m)(s)))(function (v) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
                  });
              });
          }, function (m) {
              return StateT(function (s) {
                  return Control_Monad_Writer_Class.pass(dictMonadWriter)(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runStateT(m)(s))(function (v) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
                  }));
              });
          }, function (wd) {
              return Control_Monad_Trans.lift(monadTransStateT)(dictMonad)(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
          });
      };
  };
  var altStateT = function (dictMonad) {
      return function (dictAlt) {
          return new Control_Alt.Alt(function () {
              return functorStateT(dictMonad);
          }, function (x) {
              return function (y) {
                  return StateT(function (s) {
                      return Control_Alt["<|>"](dictAlt)(runStateT(x)(s))(runStateT(y)(s));
                  });
              };
          });
      };
  };
  var plusStateT = function (dictMonad) {
      return function (dictPlus) {
          return new Control_Plus.Plus(function () {
              return altStateT(dictMonad)(dictPlus["__superclass_Control.Alt.Alt_0"]());
          }, StateT(function (v) {
              return Control_Plus.empty(dictPlus);
          }));
      };
  };
  var alternativeStateT = function (dictMonad) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return plusStateT(dictMonad)(dictAlternative["__superclass_Control.Plus.Plus_1"]());
          }, function () {
              return applicativeStateT(dictMonad);
          });
      };
  };
  var monadPlusStateT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeStateT(dictMonadPlus["__superclass_Prelude.Monad_0"]())(dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]());
      }, function () {
          return monadStateT(dictMonadPlus["__superclass_Prelude.Monad_0"]());
      });
  };
  exports["StateT"] = StateT;
  exports["withStateT"] = withStateT;
  exports["mapStateT"] = mapStateT;
  exports["execStateT"] = execStateT;
  exports["evalStateT"] = evalStateT;
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["altStateT"] = altStateT;
  exports["plusStateT"] = plusStateT;
  exports["alternativeStateT"] = alternativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadRecStateT"] = monadRecStateT;
  exports["monadPlusStateT"] = monadPlusStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadEffState"] = monadEffState;
  exports["monadContStateT"] = monadContStateT;
  exports["monadErrorStateT"] = monadErrorStateT;
  exports["monadReaderStateT"] = monadReaderStateT;
  exports["monadStateStateT"] = monadStateStateT;
  exports["monadWriterStateT"] = monadWriterStateT;;
 
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var monadTransWriterT = function (dictMonoid) {
      return new Control_Monad_Trans.MonadTrans(function (dictMonad) {
          return function (m) {
              return WriterT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v, Data_Monoid.mempty(dictMonoid)));
              }));
          };
      });
  };
  var mapWriterT = function (f) {
      return function (m) {
          return WriterT(f(runWriterT(m)));
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return mapWriterT(Prelude["<$>"](dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var execWriterT = function (dictApply) {
      return function (m) {
          return Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Data_Tuple.snd)(runWriterT(m));
      };
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Prelude.Apply(function () {
              return functorWriterT(dictApply["__superclass_Prelude.Functor_0"]());
          }, function (f) {
              return function (v) {
                  return WriterT((function () {
                      var k = function (v1) {
                          return function (v2) {
                              return new Data_Tuple.Tuple(v1.value0(v2.value0), Prelude["<>"](dictSemigroup)(v1.value1)(v2.value1));
                          };
                      };
                      return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(k)(runWriterT(f)))(runWriterT(v));
                  })());
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Prelude.Bind(function () {
              return applyWriterT(dictSemigroup)((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]());
          }, function (m) {
              return function (k) {
                  return WriterT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (v) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runWriterT(k(v.value0)))(function (v1) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v1.value0, Prelude["<>"](dictSemigroup)(v.value1)(v1.value1)));
                      });
                  }));
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Prelude.Applicative(function () {
              return applyWriterT(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictApplicative["__superclass_Prelude.Apply_0"]());
          }, function (a) {
              return WriterT(Prelude.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Prelude.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad["__superclass_Prelude.Applicative_0"]());
          }, function () {
              return bindWriterT(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictMonad);
          });
      };
  };
  var monadContWriterT = function (dictMonoid) {
      return function (dictMonadCont) {
          return new Control_Monad_Cont_Class.MonadCont(function () {
              return monadWriterT(dictMonoid)(dictMonadCont["__superclass_Prelude.Monad_0"]());
          }, function (f) {
              return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  return runWriterT(f(function (a) {
                      return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
                  }));
              }));
          });
      };
  };
  var monadEffWriter = function (dictMonad) {
      return function (dictMonoid) {
          return function (dictMonadEff) {
              return new Control_Monad_Eff_Class.MonadEff(function () {
                  return monadWriterT(dictMonoid)(dictMonad);
              }, function ($78) {
                  return Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonad)(Control_Monad_Eff_Class.liftEff(dictMonadEff)($78));
              });
          };
      };
  };
  var monadErrorWriterT = function (dictMonoid) {
      return function (dictMonadError) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadWriterT(dictMonoid)(dictMonadError["__superclass_Prelude.Monad_0"]());
          }, function (m) {
              return function (h) {
                  return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(runWriterT(m))(function (e) {
                      return runWriterT(h(e));
                  }));
              };
          }, function (e) {
              return Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
          });
      };
  };
  var monadReaderWriterT = function (dictMonoid) {
      return function (dictMonadReader) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadWriterT(dictMonoid)(dictMonadReader["__superclass_Prelude.Monad_0"]());
          }, Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
              return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
          });
      };
  };
  var monadRecWriterT = function (dictMonoid) {
      return function (dictMonadRec) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadWriterT(dictMonoid)(dictMonadRec["__superclass_Prelude.Monad_0"]());
          }, function (f) {
              return function (a) {
                  var f$prime = function (v) {
                      return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runWriterT(f(v.value0)))(function (v1) {
                          return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                              if (v1.value0 instanceof Data_Either.Left) {
                                  return new Data_Either.Left(new Data_Tuple.Tuple(v1.value0.value0, Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value1)(v1.value1)));
                              };
                              if (v1.value0 instanceof Data_Either.Right) {
                                  return new Data_Either.Right(new Data_Tuple.Tuple(v1.value0.value0, Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value1)(v1.value1)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Writer.Trans line 78, column 5 - line 84, column 1: " + [ v1.value0.constructor.name ]);
                          })());
                      });
                  };
                  return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
              };
          });
      };
  };
  var monadStateWriterT = function (dictMonoid) {
      return function (dictMonadState) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadWriterT(dictMonoid)(dictMonadState["__superclass_Prelude.Monad_0"]());
          }, function (f) {
              return Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonadState["__superclass_Prelude.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
          });
      };
  };
  var monadWriterWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, function (m) {
              return WriterT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, v.value1), v.value1));
              }));
          }, function (m) {
              return WriterT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v.value0.value0, v.value0.value1(v.value1)));
              }));
          }, function ($79) {
              return WriterT(Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())($79));
          });
      };
  };
  var altWriterT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorWriterT(dictAlt["__superclass_Prelude.Functor_0"]());
      }, function (m) {
          return function (n) {
              return WriterT(Control_Alt["<|>"](dictAlt)(runWriterT(m))(runWriterT(n)));
          };
      });
  };
  var plusWriterT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altWriterT(dictPlus["__superclass_Control.Alt.Alt_0"]());
      }, Control_Plus.empty(dictPlus));
  };
  var alternativeWriterT = function (dictMonoid) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return plusWriterT(dictAlternative["__superclass_Control.Plus.Plus_1"]());
          }, function () {
              return applicativeWriterT(dictMonoid)(dictAlternative["__superclass_Prelude.Applicative_0"]());
          });
      };
  };
  var monadPlusWriterT = function (dictMonoid) {
      return function (dictMonadPlus) {
          return new Control_MonadPlus.MonadPlus(function () {
              return alternativeWriterT(dictMonoid)(dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]());
          }, function () {
              return monadWriterT(dictMonoid)(dictMonadPlus["__superclass_Prelude.Monad_0"]());
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["execWriterT"] = execWriterT;
  exports["runWriterT"] = runWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
  exports["altWriterT"] = altWriterT;
  exports["plusWriterT"] = plusWriterT;
  exports["alternativeWriterT"] = alternativeWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadWriterT"] = monadWriterT;
  exports["monadRecWriterT"] = monadRecWriterT;
  exports["monadPlusWriterT"] = monadPlusWriterT;
  exports["monadTransWriterT"] = monadTransWriterT;
  exports["monadEffWriter"] = monadEffWriter;
  exports["monadContWriterT"] = monadContWriterT;
  exports["monadErrorWriterT"] = monadErrorWriterT;
  exports["monadReaderWriterT"] = monadReaderWriterT;
  exports["monadStateWriterT"] = monadStateWriterT;
  exports["monadWriterWriterT"] = monadWriterWriterT;;
 
})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_List_Trans = PS["Control.Monad.List.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Monoid = PS["Data.Monoid"];     
  var MonadAff = function (liftAff) {
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(Prelude.id(Prelude.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  var monadAffContT = function (dictMonad) {
      return function (dictMonadAff) {
          return new MonadAff(function ($18) {
              return Control_Monad_Trans.lift(Control_Monad_Cont_Trans.monadTransContT)(dictMonad)(liftAff(dictMonadAff)($18));
          });
      };
  };
  var monadAffExceptT = function (dictMonad) {
      return function (dictMonadAff) {
          return new MonadAff(function ($19) {
              return Control_Monad_Trans.lift(Control_Monad_Except_Trans.monadTransExceptT)(dictMonad)(liftAff(dictMonadAff)($19));
          });
      };
  };
  var monadAffListT = function (dictMonad) {
      return function (dictMonadAff) {
          return new MonadAff(function ($20) {
              return Control_Monad_Trans.lift(Control_Monad_List_Trans.monadTransListT)(dictMonad)(liftAff(dictMonadAff)($20));
          });
      };
  };
  var monadAffMaybe = function (dictMonad) {
      return function (dictMonadAff) {
          return new MonadAff(function ($21) {
              return Control_Monad_Trans.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(dictMonad)(liftAff(dictMonadAff)($21));
          });
      };
  };
  var monadAffRWS = function (dictMonad) {
      return function (dictMonoid) {
          return function (dictMonadAff) {
              return new MonadAff(function ($22) {
                  return Control_Monad_Trans.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))(dictMonad)(liftAff(dictMonadAff)($22));
              });
          };
      };
  };
  var monadAffReader = function (dictMonad) {
      return function (dictMonadAff) {
          return new MonadAff(function ($23) {
              return Control_Monad_Trans.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonad)(liftAff(dictMonadAff)($23));
          });
      };
  };
  var monadAffState = function (dictMonad) {
      return function (dictMonadAff) {
          return new MonadAff(function ($24) {
              return Control_Monad_Trans.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad)(liftAff(dictMonadAff)($24));
          });
      };
  };
  var monadAffWriter = function (dictMonad) {
      return function (dictMonoid) {
          return function (dictMonadAff) {
              return new MonadAff(function ($25) {
                  return Control_Monad_Trans.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))(dictMonad)(liftAff(dictMonadAff)($25));
              });
          };
      };
  };
  exports["MonadAff"] = MonadAff;
  exports["liftAff"] = liftAff;
  exports["monadAffAff"] = monadAffAff;
  exports["monadAffContT"] = monadAffContT;
  exports["monadAffExceptT"] = monadAffExceptT;
  exports["monadAffListT"] = monadAffListT;
  exports["monadAffMaybe"] = monadAffMaybe;
  exports["monadAffReader"] = monadAffReader;
  exports["monadAffRWS"] = monadAffRWS;
  exports["monadAffState"] = monadAffState;
  exports["monadAffWriter"] = monadAffWriter;;
 
})(PS["Control.Monad.Aff.Class"] = PS["Control.Monad.Aff.Class"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var print = function (dictShow) {
      return function ($1) {
          return $foreign.log(Prelude.show(dictShow)($1));
      };
  };
  exports["print"] = print;
  exports["error"] = $foreign.error;
  exports["log"] = $foreign.log;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];     
  var print = function (dictShow) {
      return function (a) {
          return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.print(dictShow)(a)))(function () {
              return Prelude["return"](Control_Monad_Aff.applicativeAff)(a);
          });
      };
  };
  var log = function (s) {
      return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log(s)))(function () {
          return Prelude["return"](Control_Monad_Aff.applicativeAff)(s);
      });
  };
  exports["print"] = print;
  exports["log"] = log;;
 
})(PS["Control.Monad.Aff.Console"] = PS["Control.Monad.Aff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Par = function (x) {
      return x;
  };
  var runPar = function (v) {
      return v;
  };
  var functorPar = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude["<$>"](Control_Monad_Aff.functorAff)(f)(v);
      };
  });
  var applyPar = new Prelude.Apply(function () {
      return functorPar;
  }, function (v) {
      return function (v1) {
          return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v2) {
              return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v3) {
                  return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(v)(Control_Monad_Aff_AVar.putVar(v2))))(function (v4) {
                      return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(v1)(Control_Monad_Aff_AVar.putVar(v3))))(function (v5) {
                          return Control_Monad_Aff.cancelWith(Prelude["<*>"](Control_Monad_Aff.applyAff)(Control_Monad_Aff_AVar.takeVar(v2))(Control_Monad_Aff_AVar.takeVar(v3)))(Prelude["<>"](Control_Monad_Aff.semigroupCanceler)(v4)(v5));
                      });
                  });
              });
          });
      };
  });
  var semigroupPar = function (dictSemigroup) {
      return new Prelude.Semigroup(function (a) {
          return function (b) {
              return Prelude["<*>"](applyPar)(Prelude["<$>"](functorPar)(Prelude.append(dictSemigroup))(a))(b);
          };
      });
  };
  var applicativePar = new Prelude.Applicative(function () {
      return applyPar;
  }, function (v) {
      return Prelude.pure(Control_Monad_Aff.applicativeAff)(v);
  });
  var monoidPar = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupPar(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Prelude.pure(applicativePar)(Data_Monoid.mempty(dictMonoid)));
  };
  var altPar = new Control_Alt.Alt(function () {
      return functorPar;
  }, function (v) {
      return function (v1) {
          var maybeKill = function (va) {
              return function (ve) {
                  return function (err) {
                      return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(ve))(function (v2) {
                          return Prelude.bind(Control_Monad_Aff.bindAff)((function () {
                              var $29 = v2 === 1;
                              if ($29) {
                                  return Control_Monad_Aff_AVar.killVar(va)(err);
                              };
                              if (!$29) {
                                  return Prelude["return"](Control_Monad_Aff.applicativeAff)(Prelude.unit);
                              };
                              throw new Error("Failed pattern match at Control.Monad.Aff.Par line 49, column 9 - line 53, column 5: " + [ $29.constructor.name ]);
                          })())(function () {
                              return Control_Monad_Aff_AVar.putVar(ve)(v2 + 1 | 0);
                          });
                      });
                  };
              };
          };
          return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v2) {
              return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar["makeVar'"](0))(function (v3) {
                  return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(v))(Data_Either.either(maybeKill(v2)(v3))(Control_Monad_Aff_AVar.putVar(v2)))))(function (v4) {
                      return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(v1))(Data_Either.either(maybeKill(v2)(v3))(Control_Monad_Aff_AVar.putVar(v2)))))(function (v5) {
                          return Control_Monad_Aff.cancelWith(Control_Monad_Aff_AVar.takeVar(v2))(Prelude["<>"](Control_Monad_Aff.semigroupCanceler)(v4)(v5));
                      });
                  });
              });
          });
      };
  });
  var plusPar = new Control_Plus.Plus(function () {
      return altPar;
  }, Control_Plus.empty(Control_Monad_Aff.plusAff));
  var alternativePar = new Control_Alternative.Alternative(function () {
      return plusPar;
  }, function () {
      return applicativePar;
  });
  exports["Par"] = Par;
  exports["runPar"] = runPar;
  exports["semigroupPar"] = semigroupPar;
  exports["monoidPar"] = monoidPar;
  exports["functorPar"] = functorPar;
  exports["applyPar"] = applyPar;
  exports["applicativePar"] = applicativePar;
  exports["altPar"] = altPar;
  exports["plusPar"] = plusPar;
  exports["alternativePar"] = alternativePar;;
 
})(PS["Control.Monad.Aff.Par"] = PS["Control.Monad.Aff.Par"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Aff.Unsafe

  exports.unsafeTrace = function (v) {
    return function(success, error) {
      console.log(v);

      try {
        success(v);
      } catch (e) {
        error(e);
      }

      var nonCanceler;

      nonCanceler = function(e) {
        return function(sucess, error) {
          success(false);

          return nonCanceler;
        }
      };

      return nonCanceler;
    };
  }

  exports.unsafeInterleaveAff = function (aff) {
    return aff;
  }
 
})(PS["Control.Monad.Aff.Unsafe"] = PS["Control.Monad.Aff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Aff.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  exports["unsafeInterleaveAff"] = $foreign.unsafeInterleaveAff;
  exports["unsafeTrace"] = $foreign.unsafeTrace;;
 
})(PS["Control.Monad.Aff.Unsafe"] = PS["Control.Monad.Aff.Unsafe"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console.Unsafe

  exports.logAny = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.errorAny = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console.Unsafe"] = PS["Control.Monad.Eff.Console.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  exports["errorAny"] = $foreign.errorAny;
  exports["logAny"] = $foreign.logAny;;
 
})(PS["Control.Monad.Eff.Console.Unsafe"] = PS["Control.Monad.Eff.Console.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];     
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;;
 
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Ref

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
 
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Prelude.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["writeRef"] = $foreign.writeRef;
  exports["modifyRef'"] = $foreign["modifyRef'"];
  exports["readRef"] = $foreign.readRef;
  exports["newRef"] = $foreign.newRef;;
 
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];     
  var unsafeRunRef = Control_Monad_Eff_Unsafe.unsafeInterleaveEff;
  exports["unsafeRunRef"] = unsafeRunRef;;
 
})(PS["Control.Monad.Eff.Ref.Unsafe"] = PS["Control.Monad.Eff.Ref.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];     
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = function ($0) {
      return Data_Identity.runIdentity(Control_Monad_Except_Trans.runExceptT($0));
  };
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT(function ($1) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
      });
  };
  var except = function ($2) {
      return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity($2));
  };
  exports["withExcept"] = withExcept;
  exports["mapExcept"] = mapExcept;
  exports["runExcept"] = runExcept;
  exports["except"] = except;;
 
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];     
  var withRWS = Control_Monad_RWS_Trans.withRWST;
  var rws = function (f) {
      return function (r) {
          return function (s) {
              return Prelude["return"](Data_Identity.applicativeIdentity)(f(r)(s));
          };
      };
  };
  var runRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Identity.runIdentity(Control_Monad_RWS_Trans.runRWST(m)(r)(s));
          };
      };
  };
  var mapRWS = function (f) {
      return Control_Monad_RWS_Trans.mapRWST(Prelude[">>>"](Prelude.semigroupoidFn)(Data_Identity.runIdentity)(Prelude[">>>"](Prelude.semigroupoidFn)(f)(Data_Identity.Identity)));
  };
  var execRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Identity.runIdentity(Control_Monad_RWS_Trans.execRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  var evalRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Identity.runIdentity(Control_Monad_RWS_Trans.evalRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  exports["withRWS"] = withRWS;
  exports["mapRWS"] = mapRWS;
  exports["execRWS"] = execRWS;
  exports["evalRWS"] = evalRWS;
  exports["runRWS"] = runRWS;
  exports["rws"] = rws;;
 
})(PS["Control.Monad.RWS"] = PS["Control.Monad.RWS"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Data_Identity = PS["Data.Identity"];     
  var withReader = Control_Monad_Reader_Trans.withReaderT;
  var runReader = function (m) {
      return function ($0) {
          return Data_Identity.runIdentity(Control_Monad_Reader_Trans.runReaderT(m)($0));
      };
  };
  var mapReader = function (f) {
      return Control_Monad_Reader_Trans.mapReaderT(function ($1) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
      });
  };
  exports["withReader"] = withReader;
  exports["mapReader"] = mapReader;
  exports["runReader"] = runReader;;
 
})(PS["Control.Monad.Reader"] = PS["Control.Monad.Reader"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];     
  var withState = Control_Monad_State_Trans.withStateT;
  var runState = function (s) {
      return function ($0) {
          return Data_Identity.runIdentity(Control_Monad_State_Trans.runStateT(s)($0));
      };
  };
  var mapState = function (f) {
      return Control_Monad_State_Trans.mapStateT(function ($1) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
      });
  };
  var execState = function (m) {
      return function (s) {
          return Data_Tuple.snd(runState(m)(s));
      };
  };
  var evalState = function (m) {
      return function (s) {
          return Data_Tuple.fst(runState(m)(s));
      };
  };
  exports["withState"] = withState;
  exports["mapState"] = mapState;
  exports["execState"] = execState;
  exports["evalState"] = evalState;
  exports["runState"] = runState;;
 
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];     
  var runWriter = function ($0) {
      return Data_Identity.runIdentity(Control_Monad_Writer_Trans.runWriterT($0));
  };
  var mapWriter = function (f) {
      return Control_Monad_Writer_Trans.mapWriterT(function ($1) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
      });
  };
  var execWriter = function (m) {
      return Data_Tuple.snd(runWriter(m));
  };
  exports["mapWriter"] = mapWriter;
  exports["execWriter"] = execWriter;
  exports["runWriter"] = runWriter;;
 
})(PS["Control.Monad.Writer"] = PS["Control.Monad.Writer"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Event.Event

  exports.bubbles = function (e) {
    return e.bubbles;
  };

  exports.cancelable = function (e) {
    return e.cancelable;
  };

  exports.currentTarget = function (e) {
    return e.currentTarget;
  };

  exports.defaultPrevented = function (e) {
    return e.defaultPrevented;
  };

  exports.eventPhaseIndex = function (e) {
    return e.eventPhase;
  };

  exports.target = function (e) {
    return e.target;
  };

  exports.timeStamp = function (e) {
    return e.timeStamp;
  };

  exports.type_ = function (e) {
    return e.type;
  };

  exports.preventDefault = function (e) {
    return function () {
      return e.preventDefault();
    };
  };

  exports.stopImmediatePropagation = function (e) {
    return function () {
      return e.stopImmediatePropagation();
    };
  };

  exports.stopPropagation = function (e) {
    return function () {
      return e.stopPropagation();
    };
  };
 
})(PS["DOM.Event.Event"] = PS["DOM.Event.Event"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toString = function (c) {
    return c;
  };

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };

  exports.toLower = function (c) {
    return c.toLowerCase();
  };

  exports.toUpper = function (c) {
    return c.toUpperCase();
  };
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["toUpper"] = $foreign.toUpper;
  exports["toLower"] = $foreign.toLower;
  exports["toCharCode"] = $foreign.toCharCode;
  exports["fromCharCode"] = $foreign.fromCharCode;
  exports["toString"] = $foreign.toString;;
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;
  exports["unsafeThrow"] = $foreign.unsafeThrow;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Cardinality = function (x) {
      return x;
  };
  var Enum = function (__superclass_Prelude$dotBounded_0, cardinality, fromEnum, pred, succ, toEnum) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.pred = pred;
      this.succ = succ;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  };
  var runCardinality = function (v) {
      return v;
  };
  var tupleCardinality = function (dictEnum) {
      return function (dictEnum1) {
          return function (l) {
              return function (r) {
                  return Cardinality(runCardinality(l) * runCardinality(r) | 0);
              };
          };
      };
  };
  var tupleToEnum = function (dictEnum) {
      return function (dictEnum1) {
          return function (cardb) {
              return function (n) {
                  return Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(toEnum(dictEnum)(n / runCardinality(cardb) | 0)))(toEnum(dictEnum1)(n % runCardinality(cardb)));
              };
          };
      };
  };
  var pred = function (dict) {
      return dict.pred;
  };
  var maybeCardinality = function (dictEnum) {
      return function (c) {
          return Cardinality(1 + runCardinality(c) | 0);
      };
  };
  var maybeToEnum = function (dictEnum) {
      return function (carda) {
          return function (n) {
              if (n <= runCardinality(maybeCardinality(dictEnum)(carda))) {
                  var $36 = n === 0;
                  if ($36) {
                      return Data_Maybe.Just.create(Data_Maybe.Nothing.value);
                  };
                  if (!$36) {
                      return Data_Maybe.Just.create(toEnum(dictEnum)(n - 1));
                  };
                  throw new Error("Failed pattern match at Data.Enum line 138, column 1 - line 139, column 1: " + [ $36.constructor.name ]);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var intStepFromTo = function (step) {
      return function (from) {
          return function (to) {
              return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(function (e) {
                  var $37 = e <= to;
                  if ($37) {
                      return Data_Maybe.Just.create(new Data_Tuple.Tuple(e, e + step | 0));
                  };
                  if (!$37) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Enum line 103, column 1 - line 104, column 1: " + [ $37.constructor.name ]);
              })(from);
          };
      };
  };
  var intFromTo = intStepFromTo(1);
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var tupleFromEnum = function (dictEnum) {
      return function (dictEnum1) {
          return function (cardb) {
              return function (v) {
                  return (fromEnum(dictEnum)(v.value0) * runCardinality(cardb) | 0) + fromEnum(dictEnum1)(v.value1) | 0;
              };
          };
      };
  };
  var enumFromTo = function (dictEnum) {
      return function (a) {
          return function (b) {
              var b$prime = fromEnum(dictEnum)(b);
              var a$prime = fromEnum(dictEnum)(a);
              return Prelude["<$>"](Prelude.functorArray)(Prelude[">>>"](Prelude.semigroupoidFn)(toEnum(dictEnum))(Data_Maybe_Unsafe.fromJust))(intFromTo(a$prime)(b$prime));
          };
      };
  };
  var enumFromThenTo = function (dictEnum) {
      return function (a) {
          return function (b) {
              return function (c) {
                  var c$prime = fromEnum(dictEnum)(c);
                  var b$prime = fromEnum(dictEnum)(b);
                  var a$prime = fromEnum(dictEnum)(a);
                  return Prelude["<$>"](Prelude.functorArray)(Prelude[">>>"](Prelude.semigroupoidFn)(toEnum(dictEnum))(Data_Maybe_Unsafe.fromJust))(intStepFromTo(b$prime - a$prime)(a$prime)(c$prime));
              };
          };
      };
  };
  var eitherFromEnum = function (dictEnum) {
      return function (dictEnum1) {
          return function (carda) {
              return function (v) {
                  if (v instanceof Data_Either.Left) {
                      return fromEnum(dictEnum)(v.value0);
                  };
                  if (v instanceof Data_Either.Right) {
                      return fromEnum(dictEnum1)(v.value0) + runCardinality(carda) | 0;
                  };
                  throw new Error("Failed pattern match at Data.Enum line 197, column 1 - line 198, column 1: " + [ carda.constructor.name, v.constructor.name ]);
              };
          };
      };
  };
  var eitherCardinality = function (dictEnum) {
      return function (dictEnum1) {
          return function (l) {
              return function (r) {
                  return Cardinality(runCardinality(l) + runCardinality(r) | 0);
              };
          };
      };
  };
  var eitherToEnum = function (dictEnum) {
      return function (dictEnum1) {
          return function (carda) {
              return function (cardb) {
                  return function (n) {
                      var $46 = n >= 0 && n < runCardinality(carda);
                      if ($46) {
                          return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Either.Left.create)(toEnum(dictEnum)(n));
                      };
                      if (!$46) {
                          var $47 = n >= runCardinality(carda) && n < runCardinality(eitherCardinality(dictEnum)(dictEnum1)(carda)(cardb));
                          if ($47) {
                              return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Either.Right.create)(toEnum(dictEnum1)(n - runCardinality(carda)));
                          };
                          if (!$47) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match: " + [ $47.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Enum line 189, column 1 - line 190, column 1: " + [ $46.constructor.name ]);
                  };
              };
          };
      };
  };
  var defaultToEnum = function (succ$prime) {
      return function (bottom$prime) {
          return function (n) {
              if (n < 0) {
                  return Data_Maybe.Nothing.value;
              };
              if (n === 0) {
                  return new Data_Maybe.Just(bottom$prime);
              };
              if (Prelude.otherwise) {
                  return Prelude[">>="](Data_Maybe.bindMaybe)(defaultToEnum(succ$prime)(bottom$prime)(n - 1))(succ$prime);
              };
              throw new Error("Failed pattern match: " + [ succ$prime.constructor.name, bottom$prime.constructor.name, n.constructor.name ]);
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1);
          };
      };
  };
  var defaultFromEnum = function (pred$prime) {
      return function (e) {
          return Data_Maybe.maybe(0)(function (prd) {
              return defaultFromEnum(pred$prime)(prd) + 1 | 0;
          })(pred$prime(e));
      };
  };
  var charToEnum = function (n) {
      if (n >= 0 && n <= 65535) {
          return Data_Maybe.Just.create(Data_Char.fromCharCode(n));
      };
      return Data_Maybe.Nothing.value;
  };
  var charFromEnum = Data_Char.toCharCode;
  var enumChar = new Enum(function () {
      return Prelude.boundedChar;
  }, 65536, charFromEnum, defaultPred(charToEnum)(charFromEnum), defaultSucc(charToEnum)(charFromEnum), charToEnum);
  var cardinality = function (dict) {
      return dict.cardinality;
  };
  var enumEither = function (dictEnum) {
      return function (dictEnum1) {
          return new Enum(function () {
              return Data_Either.boundedEither(dictEnum["__superclass_Prelude.Bounded_0"]())(dictEnum1["__superclass_Prelude.Bounded_0"]());
          }, eitherCardinality(dictEnum)(dictEnum1)(cardinality(dictEnum))(cardinality(dictEnum1)), eitherFromEnum(dictEnum)(dictEnum1)(cardinality(dictEnum)), function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($72) {
                      return Data_Maybe.Just.create(Data_Either.Left.create($72));
                  })(pred(dictEnum)(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return Data_Maybe.maybe(Data_Maybe.Just.create(new Data_Either.Left(Prelude.top(dictEnum["__superclass_Prelude.Bounded_0"]()))))(function ($73) {
                      return Data_Maybe.Just.create(Data_Either.Right.create($73));
                  })(pred(dictEnum1)(v.value0));
              };
              throw new Error("Failed pattern match at Data.Enum line 180, column 1 - line 189, column 1: " + [ v.constructor.name ]);
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(Data_Maybe.Just.create(new Data_Either.Right(Prelude.bottom(dictEnum1["__superclass_Prelude.Bounded_0"]()))))(function ($74) {
                      return Data_Maybe.Just.create(Data_Either.Left.create($74));
                  })(succ(dictEnum)(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($75) {
                      return Data_Maybe.Just.create(Data_Either.Right.create($75));
                  })(succ(dictEnum1)(v.value0));
              };
              throw new Error("Failed pattern match at Data.Enum line 180, column 1 - line 189, column 1: " + [ v.constructor.name ]);
          }, eitherToEnum(dictEnum)(dictEnum1)(cardinality(dictEnum))(cardinality(dictEnum1)));
      };
  };
  var enumMaybe = function (dictEnum) {
      return new Enum(function () {
          return Data_Maybe.boundedMaybe(dictEnum["__superclass_Prelude.Bounded_0"]());
      }, maybeCardinality(dictEnum)(cardinality(dictEnum)), function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return 0;
          };
          if (v instanceof Data_Maybe.Just) {
              return fromEnum(dictEnum)(v.value0) + 1 | 0;
          };
          throw new Error("Failed pattern match at Data.Enum line 128, column 1 - line 138, column 1: " + [ v.constructor.name ]);
      }, function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Just) {
              return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(pred(dictEnum)(v.value0));
          };
          throw new Error("Failed pattern match at Data.Enum line 128, column 1 - line 138, column 1: " + [ v.constructor.name ]);
      }, function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Just.create(Prelude.bottom(Data_Maybe.boundedMaybe(dictEnum["__superclass_Prelude.Bounded_0"]())));
          };
          if (v instanceof Data_Maybe.Just) {
              return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictEnum)(v.value0));
          };
          throw new Error("Failed pattern match at Data.Enum line 128, column 1 - line 138, column 1: " + [ v.constructor.name ]);
      }, maybeToEnum(dictEnum)(cardinality(dictEnum)));
  };
  var enumTuple = function (dictEnum) {
      return function (dictEnum1) {
          return new Enum(function () {
              return Data_Tuple.boundedTuple(dictEnum["__superclass_Prelude.Bounded_0"]())(dictEnum1["__superclass_Prelude.Bounded_0"]());
          }, tupleCardinality(dictEnum)(dictEnum1)(cardinality(dictEnum))(cardinality(dictEnum1)), tupleFromEnum(dictEnum)(dictEnum1)(cardinality(dictEnum1)), function (v) {
              return Data_Maybe.maybe(Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude.flip(Data_Tuple.Tuple.create)(Prelude.bottom(dictEnum1["__superclass_Prelude.Bounded_0"]())))(pred(dictEnum)(v.value0)))(function ($76) {
                  return Data_Maybe.Just.create(Data_Tuple.Tuple.create(v.value0)($76));
              })(pred(dictEnum1)(v.value1));
          }, function (v) {
              return Data_Maybe.maybe(Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude.flip(Data_Tuple.Tuple.create)(Prelude.bottom(dictEnum1["__superclass_Prelude.Bounded_0"]())))(succ(dictEnum)(v.value0)))(function ($77) {
                  return Data_Maybe.Just.create(Data_Tuple.Tuple.create(v.value0)($77));
              })(succ(dictEnum1)(v.value1));
          }, tupleToEnum(dictEnum)(dictEnum1)(cardinality(dictEnum1)));
      };
  };
  var booleanSucc = function (v) {
      if (!v) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  };
  var booleanPred = function (v) {
      if (v) {
          return new Data_Maybe.Just(false);
      };
      return Data_Maybe.Nothing.value;
  };
  var enumBoolean = new Enum(function () {
      return Prelude.boundedBoolean;
  }, 2, defaultFromEnum(booleanPred), booleanPred, booleanSucc, defaultToEnum(booleanSucc)(false));
  exports["Cardinality"] = Cardinality;
  exports["Enum"] = Enum;
  exports["enumFromThenTo"] = enumFromThenTo;
  exports["enumFromTo"] = enumFromTo;
  exports["intStepFromTo"] = intStepFromTo;
  exports["intFromTo"] = intFromTo;
  exports["defaultFromEnum"] = defaultFromEnum;
  exports["defaultToEnum"] = defaultToEnum;
  exports["defaultPred"] = defaultPred;
  exports["defaultSucc"] = defaultSucc;
  exports["toEnum"] = toEnum;
  exports["succ"] = succ;
  exports["runCardinality"] = runCardinality;
  exports["pred"] = pred;
  exports["fromEnum"] = fromEnum;
  exports["cardinality"] = cardinality;
  exports["enumChar"] = enumChar;
  exports["enumMaybe"] = enumMaybe;
  exports["enumBoolean"] = enumBoolean;
  exports["enumTuple"] = enumTuple;
  exports["enumEither"] = enumEither;;
 
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Maybe = PS["Data.Maybe"];     
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var Capturing = (function () {
      function Capturing() {

      };
      Capturing.value = new Capturing();
      return Capturing;
  })();
  var AtTarget = (function () {
      function AtTarget() {

      };
      AtTarget.value = new AtTarget();
      return AtTarget;
  })();
  var Bubbling = (function () {
      function Bubbling() {

      };
      Bubbling.value = new Bubbling();
      return Bubbling;
  })();
  var toEnumEventPhase = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(None.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Capturing.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(AtTarget.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Bubbling.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var fromEnumEventPhase = function (v) {
      if (v instanceof None) {
          return 0;
      };
      if (v instanceof Capturing) {
          return 1;
      };
      if (v instanceof AtTarget) {
          return 2;
      };
      if (v instanceof Bubbling) {
          return 3;
      };
      throw new Error("Failed pattern match at DOM.Event.EventPhase line 44, column 1 - line 45, column 1: " + [ v.constructor.name ]);
  };
  var eqEventPhase = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof None && v1 instanceof None) {
              return true;
          };
          if (v instanceof Capturing && v1 instanceof Capturing) {
              return true;
          };
          if (v instanceof AtTarget && v1 instanceof AtTarget) {
              return true;
          };
          if (v instanceof Bubbling && v1 instanceof Bubbling) {
              return true;
          };
          return false;
      };
  });
  var ordEventPhase = new Prelude.Ord(function () {
      return eqEventPhase;
  }, function (x) {
      return function (y) {
          return Prelude.compare(Prelude.ordInt)(fromEnumEventPhase(x))(fromEnumEventPhase(y));
      };
  });
  var boundedEventPhase = new Prelude.Bounded(None.value, Bubbling.value);
  var boundedOrdEventPhase = new Prelude.BoundedOrd(function () {
      return boundedEventPhase;
  }, function () {
      return ordEventPhase;
  });
  var enumEventPhase = new Data_Enum.Enum(function () {
      return boundedEventPhase;
  }, 4, fromEnumEventPhase, Data_Enum.defaultPred(toEnumEventPhase)(fromEnumEventPhase), Data_Enum.defaultSucc(toEnumEventPhase)(fromEnumEventPhase), toEnumEventPhase);
  exports["None"] = None;
  exports["Capturing"] = Capturing;
  exports["AtTarget"] = AtTarget;
  exports["Bubbling"] = Bubbling;
  exports["eqEventPhase"] = eqEventPhase;
  exports["ordEventPhase"] = ordEventPhase;
  exports["boundedEventPhase"] = boundedEventPhase;
  exports["boundedOrdEventPhase"] = boundedOrdEventPhase;
  exports["enumEventPhase"] = enumEventPhase;;
 
})(PS["DOM.Event.EventPhase"] = PS["DOM.Event.EventPhase"] || {});
(function(exports) {
  /* global exports, EventTarget */
  "use strict";

  // module DOM.Event.Types

  exports._readEventTarget = function (left) {
    return function (right) {
      return function (foreign) {
        return foreign instanceof EventTarget ? left("Value is not an EventTarget") : right(foreign);
      };
    };
  };
 
})(PS["DOM.Event.Types"] = PS["DOM.Event.Types"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign

  // jshint maxparams: 3
  exports.parseJSONImpl = function (left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  };

  // jshint maxparams: 1
  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringImpl = function (just) {
    return function (nothing) {
      return function (s) {
        /* jshint bitwise: false */
        var i = parseFloat(s);
        return (i | 0) === i ? just(i) : nothing;
      };
    };
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int.Bits

  exports.andImpl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 & n2;
    };
  };

  exports.orImpl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 | n2;
    };
  };

  exports.xorImpl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };

  exports.shl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 << n2;
    };
  };

  exports.shr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >> n2;
    };
  };

  exports.zshr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >>> n2;
    };
  };

  exports.complement = function (n) {
    /* jshint bitwise: false */
    return ~n;
  };
 
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int.Bits"]; 
  var $dot$bar$dot = $foreign.orImpl;
  var $dot$up$dot = $foreign.xorImpl;
  var $dot$amp$dot = $foreign.andImpl;
  exports[".^."] = $dot$up$dot;
  exports[".|."] = $dot$bar$dot;
  exports[".&."] = $dot$amp$dot;
  exports["complement"] = $foreign.complement;
  exports["zshr"] = $foreign.zshr;
  exports["shr"] = $foreign.shr;
  exports["shl"] = $foreign.shl;;
 
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.acos = Math.acos;

  exports.asin = Math.asin;

  exports.atan = Math.atan;

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };

  exports.ceil = Math.ceil;

  exports.cos = Math.cos;

  exports.exp = Math.exp;

  exports.floor = Math.floor;

  exports.log = Math.log;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;

  exports.tan = Math.tan;

  exports.e = Math.E;

  exports.ln2 = Math.LN2;

  exports.ln10 = Math.LN10;

  exports.log2e = Math.LOG2E;

  exports.log10e = Math.LOG10E;

  exports.pi = Math.PI;

  exports.sqrt1_2 = Math.SQRT1_2;

  exports.sqrt2 = Math.SQRT2;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Math"];
  exports["sqrt2"] = $foreign.sqrt2;
  exports["sqrt1_2"] = $foreign.sqrt1_2;
  exports["pi"] = $foreign.pi;
  exports["log10e"] = $foreign.log10e;
  exports["log2e"] = $foreign.log2e;
  exports["ln10"] = $foreign.ln10;
  exports["ln2"] = $foreign.ln2;
  exports["e"] = $foreign.e;
  exports["%"] = $foreign["%"];
  exports["tan"] = $foreign.tan;
  exports["sqrt"] = $foreign.sqrt;
  exports["sin"] = $foreign.sin;
  exports["round"] = $foreign.round;
  exports["pow"] = $foreign.pow;
  exports["min"] = $foreign.min;
  exports["max"] = $foreign.max;
  exports["log"] = $foreign.log;
  exports["floor"] = $foreign.floor;
  exports["exp"] = $foreign.exp;
  exports["cos"] = $foreign.cos;
  exports["ceil"] = $foreign.ceil;
  exports["atan2"] = $foreign.atan2;
  exports["atan"] = $foreign.atan;
  exports["asin"] = $foreign.asin;
  exports["acos"] = $foreign.acos;
  exports["abs"] = $foreign.abs;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];     
  var odd = function (x) {
      return (x & 1) !== 0;
  };
  var fromString = $foreign.fromStringImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
  };
  var round = function ($1) {
      return unsafeClamp($$Math.round($1));
  };
  var floor = function ($2) {
      return unsafeClamp($$Math.floor($2));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };
  var ceil = function ($3) {
      return unsafeClamp($$Math.ceil($3));
  };
  exports["odd"] = odd;
  exports["even"] = even;
  exports["fromString"] = fromString;
  exports["round"] = round;
  exports["floor"] = floor;
  exports["ceil"] = ceil;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports._charCodeAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charCodeAt(i)) : nothing;
        };
      };
    };
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_indexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_lastIndexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.lastIndexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._localeCompare = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (s1) {
          return function (s2) {
            var result = s1.localeCompare(s2);
            return result < 0 ? lt : result > 0 ? gt : eq;
          };
        };
      };
    };
  };

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substr(n);
    };
  };

  exports.count = function (p) {
    return function (s) {
      for (var i = 0; i < s.length && p(s.charAt(i)); i++); {}
      return i;
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String.Unsafe

  exports.charCodeAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charCodeAt(i);
      throw new Error("Data.String.Unsafe.charCodeAt: Invalid index.");
    };
  };

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };

  exports.char = function (s) {
    if (s.length === 1) return s.charAt(0);
    throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
  };
 
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charCodeAt"] = $foreign.charCodeAt;
  exports["charAt"] = $foreign.charAt;
  exports["char"] = $foreign["char"];;
 
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];     
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v), 
          tail: $foreign.drop(1)(v)
      });
  };
  var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var takeWhile = function (p) {
      return function (s) {
          return $foreign.take($foreign.count(p)(s))(s);
      };
  };
  var $$null = function (s) {
      return $foreign.length(s) === 0;
  };
  var localeCompare = $foreign._localeCompare(Prelude.LT.value)(Prelude.EQ.value)(Prelude.GT.value);
  var lastIndexOf$prime = $foreign["_lastIndexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var lastIndexOf = $foreign._lastIndexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripSuffix = function (suffix) {
      return function (str) {
          var $2 = lastIndexOf(suffix)(str);
          if ($2 instanceof Data_Maybe.Just && $2.value0 === $foreign.length(str) - $foreign.length(suffix)) {
              return Data_Maybe.Just.create($foreign.take($2.value0)(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (prefix) {
      return function (str) {
          var $4 = indexOf(prefix)(str);
          if ($4 instanceof Data_Maybe.Just && $4.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(prefix))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var fromChar = Data_Char.toString;
  var singleton = fromChar;
  var dropWhile = function (p) {
      return function (s) {
          return $foreign.drop($foreign.count(p)(s))(s);
      };
  };
  var contains = function (x) {
      return function (s) {
          return Data_Maybe.isJust(indexOf(x)(s));
      };
  };
  var charCodeAt = $foreign._charCodeAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripSuffix"] = stripSuffix;
  exports["stripPrefix"] = stripPrefix;
  exports["dropWhile"] = dropWhile;
  exports["takeWhile"] = takeWhile;
  exports["localeCompare"] = localeCompare;
  exports["singleton"] = singleton;
  exports["uncons"] = uncons;
  exports["null"] = $$null;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["indexOf"] = indexOf;
  exports["contains"] = contains;
  exports["toChar"] = toChar;
  exports["fromChar"] = fromChar;
  exports["charCodeAt"] = charCodeAt;
  exports["charAt"] = charAt;
  exports["joinWith"] = $foreign.joinWith;
  exports["trim"] = $foreign.trim;
  exports["toUpper"] = $foreign.toUpper;
  exports["toLower"] = $foreign.toLower;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["split"] = $foreign.split;
  exports["drop"] = $foreign.drop;
  exports["take"] = $foreign.take;
  exports["count"] = $foreign.count;
  exports["replace"] = $foreign.replace;
  exports["length"] = $foreign.length;
  exports["fromCharArray"] = $foreign.fromCharArray;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_String = PS["Data.String"];     
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if (Prelude["=="](Prelude.eqString)($foreign.tagOf(value))(tag)) {
              return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
          };
          return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
      };
  };
  var showForeignError = new Prelude.Show(function (v) {
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Prelude.show(Prelude.showInt)(v.value0) + (": " + Prelude.show(showForeignError)(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Prelude.show(Prelude.showString)(v.value0) + (": " + Prelude.show(showForeignError)(v.value1)));
      };
      if (v instanceof JSONError) {
          return "JSON error: " + v.value0;
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  });
  var readString = unsafeReadTagged("String");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(new TypeMismatch("Int", $foreign.tagOf(value)));
      var fromNumber = function ($30) {
          return Data_Maybe.maybe(error)(Prelude.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($30));
      };
      return Data_Either.either(Prelude["const"](error))(fromNumber)(readNumber(value));
  };
  var readChar = function (value) {
      var error = Data_Either.Left.create(new TypeMismatch("Char", $foreign.tagOf(value)));
      var fromString = function ($31) {
          return Data_Maybe.maybe(error)(Prelude.pure(Data_Either.applicativeEither))(Data_String.toChar($31));
      };
      return Data_Either.either(Prelude["const"](error))(fromString)(readString(value));
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
      };
      return new Data_Either.Left(new TypeMismatch("array", $foreign.tagOf(value)));
  };
  var parseJSON = function (json) {
      return $foreign.parseJSONImpl(function ($32) {
          return Data_Either.Left.create(JSONError.create($32));
      }, Data_Either.Right.create, json);
  };
  var eqForeignError = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof TypeMismatch && v1 instanceof TypeMismatch) {
              return Prelude["=="](Prelude.eqString)(v.value0)(v1.value0) && Prelude["=="](Prelude.eqString)(v.value1)(v1.value1);
          };
          if (v instanceof ErrorAtIndex && v1 instanceof ErrorAtIndex) {
              return v.value0 === v1.value0 && Prelude["=="](eqForeignError)(v.value1)(v1.value1);
          };
          if (v instanceof ErrorAtProperty && v1 instanceof ErrorAtProperty) {
              return Prelude["=="](Prelude.eqString)(v.value0)(v1.value0) && Prelude["=="](eqForeignError)(v.value1)(v1.value1);
          };
          if (v instanceof JSONError && v1 instanceof JSONError) {
              return Prelude["=="](Prelude.eqString)(v.value0)(v1.value0);
          };
          return false;
      };
  });
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["readArray"] = readArray;
  exports["readInt"] = readInt;
  exports["readNumber"] = readNumber;
  exports["readBoolean"] = readBoolean;
  exports["readChar"] = readChar;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["parseJSON"] = parseJSON;
  exports["showForeignError"] = showForeignError;
  exports["eqForeignError"] = eqForeignError;
  exports["isArray"] = $foreign.isArray;
  exports["isUndefined"] = $foreign.isUndefined;
  exports["isNull"] = $foreign.isNull;
  exports["tagOf"] = $foreign.tagOf;
  exports["typeOf"] = $foreign.typeOf;
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;
  exports["toForeign"] = $foreign.toForeign;;
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  exports.replicate = function (n) {
    return function (v) {
      if (n < 1) return [];
      var r = new Array(n);
      for (var i = 0; i < n; i++) r[i] = v;
      return r;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      /* jshint maxparams: 2 */
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];     
  var $colon = $foreign.cons;
  var $dot$dot = $foreign.range;
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unzip = $foreign["uncons'"](function (v) {
      return new Data_Tuple.Tuple([  ], [  ]);
  })(function (v) {
      return function (ts) {
          var $34 = unzip(ts);
          return new Data_Tuple.Tuple($colon(v.value0)($34.value0), $colon(v.value1)($34.value1));
      };
  });
  var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var take = $foreign.slice(0);
  var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var span = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $40 = uncons(xs);
                  if ($40 instanceof Data_Maybe.Just && p($40.value0.head)) {
                      var __tco_acc = $colon($40.value0.head)(acc);
                      acc = __tco_acc;
                      xs = $40.value0.tail;
                      continue tco;
                  };
                  return {
                      init: $foreign.reverse(acc), 
                      rest: xs
                  };
              };
          };
      };
      return go([  ]);
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var $44 = comp(x)(y);
                  if ($44 instanceof Prelude.GT) {
                      return 1;
                  };
                  if ($44 instanceof Prelude.EQ) {
                      return 0;
                  };
                  if ($44 instanceof Prelude.LT) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.Array line 409, column 3 - line 414, column 1: " + [ $44.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Prelude.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())([  ]);
              };
              if (Prelude.otherwise) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictMonad["__superclass_Prelude.Applicative_0"]())($foreign.replicate(n)(m));
              };
              throw new Error("Failed pattern match at Data.Array line 136, column 1 - line 137, column 1: " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubBy = function (eq) {
      return function (xs) {
          var $47 = uncons(xs);
          if ($47 instanceof Data_Maybe.Just) {
              return $colon($47.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                  return !eq($47.value0.head)(y);
              })($47.value0.tail)));
          };
          if ($47 instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          throw new Error("Failed pattern match: " + [ $47.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Prelude.eq(dictEq));
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())($colon)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())([  ]));
          };
      };
  };
  var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Prelude.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1)(xs));
      };
      throw new Error("Failed pattern match at Data.Array line 226, column 1 - line 227, column 1: " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $bang$bang = index;
  var last = function (xs) {
      return $bang$bang(xs)($foreign.length(xs) - 1);
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
          };
      };
  };
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  var groupBy = function (op) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $52 = uncons(xs);
                  if ($52 instanceof Data_Maybe.Just) {
                      var sp = span(op($52.value0.head))($52.value0.tail);
                      var __tco_acc = $colon($colon($52.value0.head)(sp.init))(acc);
                      acc = __tco_acc;
                      xs = sp.rest;
                      continue tco;
                  };
                  if ($52 instanceof Data_Maybe.Nothing) {
                      return $foreign.reverse(acc);
                  };
                  throw new Error("Failed pattern match at Data.Array line 476, column 1 - line 477, column 1: " + [ $52.constructor.name ]);
              };
          };
      };
      return go([  ]);
  };
  var group = function (dictEq) {
      return function (xs) {
          return groupBy(Prelude.eq(dictEq))(xs);
      };
  };
  var group$prime = function (dictOrd) {
      return function ($66) {
          return group(dictOrd["__superclass_Prelude.Eq_0"]())(sort(dictOrd)($66));
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(a);
              })(function (b) {
                  return function (bs) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBy = function (cmp) {
      return function (x) {
          return function (ys) {
              var i = Data_Maybe.maybe(0)(function (v) {
                  return v + 1 | 0;
              })(findLastIndex(function (y) {
                  return Prelude["=="](Prelude.eqOrdering)(cmp(x)(y))(Prelude.GT.value);
              })(ys));
              return Data_Maybe_Unsafe.fromJust(insertAt(i)(x)(ys));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Prelude.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return $foreign.filter(function (x) {
                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Prelude.eq(dictEq));
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return $foreign["uncons'"](function (v) {
              return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())([  ]);
          })(function (x) {
              return function (xs) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(p(x))(function (v) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(filterM(dictMonad)(p)(xs))(function (v1) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                              if (v) {
                                  return $colon(x)(v1);
                              };
                              if (!v) {
                                  return v1;
                              };
                              throw new Error("Failed pattern match: " + [ v.constructor.name ]);
                          })());
                      });
                  });
              };
          });
      };
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (eq) {
      return function (x) {
          return function (v) {
              if (v.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v)(function (i) {
                  return Data_Maybe_Unsafe.fromJust(deleteAt(i)(v));
              })(findIndex(eq(x))(v));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Prelude["++"](Prelude.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Prelude["=="](dictEq));
  };
  var $$delete = function (dictEq) {
      return deleteBy(Prelude.eq(dictEq));
  };
  var $bslash$bslash = function (dictEq) {
      return function (xs) {
          return function (ys) {
              if ($$null(xs)) {
                  return [  ];
              };
              if (Prelude.otherwise) {
                  return $foreign["uncons'"](Prelude["const"](xs))(function (y) {
                      return function (ys2) {
                          return $bslash$bslash(dictEq)($$delete(dictEq)(y)(xs))(ys2);
                      };
                  })(ys);
              };
              throw new Error("Failed pattern match: " + [ xs.constructor.name, ys.constructor.name ]);
          };
      };
  };
  var concatMap = Prelude.flip(Prelude.bind(Prelude.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($67) {
          return Data_Maybe.maybe([  ])(singleton)(f($67));
      });
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  var alterAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  var $64 = f(x);
                  if ($64 instanceof Data_Maybe.Nothing) {
                      return deleteAt(i)(xs);
                  };
                  if ($64 instanceof Data_Maybe.Just) {
                      return updateAt(i)($64.value0)(xs);
                  };
                  throw new Error("Failed pattern match at Data.Array line 349, column 3 - line 358, column 1: " + [ $64.constructor.name ]);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
          };
      };
  };
  exports["foldM"] = foldM;
  exports["unzip"] = unzip;
  exports["zip"] = zip;
  exports["zipWithA"] = zipWithA;
  exports["intersectBy"] = intersectBy;
  exports["intersect"] = intersect;
  exports["\\\\"] = $bslash$bslash;
  exports["deleteBy"] = deleteBy;
  exports["delete"] = $$delete;
  exports["unionBy"] = unionBy;
  exports["union"] = union;
  exports["nubBy"] = nubBy;
  exports["nub"] = nub;
  exports["groupBy"] = groupBy;
  exports["group'"] = group$prime;
  exports["group"] = group;
  exports["span"] = span;
  exports["dropWhile"] = dropWhile;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["sortBy"] = sortBy;
  exports["sort"] = sort;
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["filterM"] = filterM;
  exports["concatMap"] = concatMap;
  exports["alterAt"] = alterAt;
  exports["modifyAt"] = modifyAt;
  exports["updateAt"] = updateAt;
  exports["deleteAt"] = deleteAt;
  exports["insertAt"] = insertAt;
  exports["findLastIndex"] = findLastIndex;
  exports["findIndex"] = findIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["elemIndex"] = elemIndex;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports["insertBy"] = insertBy;
  exports["insert"] = insert;
  exports[":"] = $colon;
  exports["null"] = $$null;
  exports["many"] = many;
  exports["some"] = some;
  exports["replicateM"] = replicateM;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["zipWith"] = $foreign.zipWith;
  exports["drop"] = $foreign.drop;
  exports["slice"] = $foreign.slice;
  exports["filter"] = $foreign.filter;
  exports["concat"] = $foreign.concat;
  exports["reverse"] = $foreign.reverse;
  exports["snoc"] = $foreign.snoc;
  exports["cons"] = $foreign.cons;
  exports["length"] = $foreign.length;
  exports["replicate"] = $foreign.replicate;
  exports["range"] = $foreign.range;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign.Index

  // jshint maxparams: 4
  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  // jshint maxparams: 2
  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
 
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];     
  var Index = function (errorAt, hasOwnProperty, hasProperty, ix) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(new Data_Either.Left(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Prelude.pure(Data_Either.applicativeEither), k, value);
      };
  };
  var prop = unsafeReadProp;
  var ix = function (dict) {
      return dict.ix;
  };
  var $bang = function (dictIndex) {
      return ix(dictIndex);
  };
  var index = unsafeReadProp;
  var hasPropertyImpl = function (p) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Prelude["=="](Prelude.eqString)(Data_Foreign.typeOf(value))("object") || Prelude["=="](Prelude.eqString)(Data_Foreign.typeOf(value))("function")) {
              return $foreign.unsafeHasProperty(p, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (p) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Prelude["=="](Prelude.eqString)(Data_Foreign.typeOf(value))("object") || Prelude["=="](Prelude.eqString)(Data_Foreign.typeOf(value))("function")) {
              return $foreign.unsafeHasOwnProperty(p, value);
          };
          return false;
      };
  };
  var indexInt = new Index(Data_Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Prelude.flip(index));
  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Prelude.flip(prop));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["errorAt"] = errorAt;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["hasProperty"] = hasProperty;
  exports["!"] = $bang;
  exports["ix"] = ix;
  exports["index"] = index;
  exports["prop"] = prop;
  exports["indexString"] = indexString;
  exports["indexInt"] = indexInt;;
 
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Either = PS["Data.Either"];     
  var Null = function (x) {
      return x;
  };
  var runNull = function (v) {
      return v;
  };
  var readNull = function (f) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          return Prelude["<$>"](Data_Either.functorEither)(function ($4) {
              return Null(Data_Maybe.Just.create($4));
          })(f(value));
      };
  };
  exports["Null"] = Null;
  exports["readNull"] = readNull;
  exports["runNull"] = runNull;;
 
})(PS["Data.Foreign.Null"] = PS["Data.Foreign.Null"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Either = PS["Data.Either"];     
  var NullOrUndefined = function (x) {
      return x;
  };
  var runNullOrUndefined = function (v) {
      return v;
  };
  var readNullOrUndefined = function (f) {
      return function (value) {
          if (Data_Foreign.isNull(value) || Data_Foreign.isUndefined(value)) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          return Prelude["<$>"](Data_Either.functorEither)(function ($4) {
              return NullOrUndefined(Data_Maybe.Just.create($4));
          })(f(value));
      };
  };
  exports["NullOrUndefined"] = NullOrUndefined;
  exports["readNullOrUndefined"] = readNullOrUndefined;
  exports["runNullOrUndefined"] = runNullOrUndefined;;
 
})(PS["Data.Foreign.NullOrUndefined"] = PS["Data.Foreign.NullOrUndefined"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Either = PS["Data.Either"];     
  var Undefined = function (x) {
      return x;
  };
  var runUndefined = function (v) {
      return v;
  };
  var readUndefined = function (f) {
      return function (value) {
          if (Data_Foreign.isUndefined(value)) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          return Prelude["<$>"](Data_Either.functorEither)(function ($4) {
              return Undefined(Data_Maybe.Just.create($4));
          })(f(value));
      };
  };
  exports["Undefined"] = Undefined;
  exports["readUndefined"] = readUndefined;
  exports["runUndefined"] = runUndefined;;
 
})(PS["Data.Foreign.Undefined"] = PS["Data.Foreign.Undefined"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Foreign_Null = PS["Data.Foreign.Null"];
  var Data_Foreign_NullOrUndefined = PS["Data.Foreign.NullOrUndefined"];
  var Data_Foreign_Undefined = PS["Data.Foreign.Undefined"];
  var Data_Int = PS["Data.Int"];
  var Data_Traversable = PS["Data.Traversable"];     
  var IsForeign = function (read) {
      this.read = read;
  };
  var stringIsForeign = new IsForeign(Data_Foreign.readString);
  var read = function (dict) {
      return dict.read;
  };
  var readJSON = function (dictIsForeign) {
      return function (json) {
          return Prelude[">>="](Data_Either.bindEither)(Data_Foreign.parseJSON(json))(read(dictIsForeign));
      };
  };
  var readWith = function (dictIsForeign) {
      return function (f) {
          return function (value) {
              return Data_Either.either(function ($8) {
                  return Data_Either.Left.create(f($8));
              })(Data_Either.Right.create)(read(dictIsForeign)(value));
          };
      };
  };
  var readProp = function (dictIsForeign) {
      return function (dictIndex) {
          return function (prop) {
              return function (value) {
                  return Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Index["!"](dictIndex)(value)(prop))(readWith(dictIsForeign)(Data_Foreign_Index.errorAt(dictIndex)(prop)));
              };
          };
      };
  };
  var undefinedIsForeign = function (dictIsForeign) {
      return new IsForeign(Data_Foreign_Undefined.readUndefined(read(dictIsForeign)));
  };
  var numberIsForeign = new IsForeign(Data_Foreign.readNumber);
  var nullOrUndefinedIsForeign = function (dictIsForeign) {
      return new IsForeign(Data_Foreign_NullOrUndefined.readNullOrUndefined(read(dictIsForeign)));
  };
  var nullIsForeign = function (dictIsForeign) {
      return new IsForeign(Data_Foreign_Null.readNull(read(dictIsForeign)));
  };
  var intIsForeign = new IsForeign(Data_Foreign.readInt);
  var foreignIsForeign = new IsForeign(function (f) {
      return Prelude["return"](Data_Either.applicativeEither)(f);
  });
  var charIsForeign = new IsForeign(Data_Foreign.readChar);
  var booleanIsForeign = new IsForeign(Data_Foreign.readBoolean);
  var arrayIsForeign = function (dictIsForeign) {
      return new IsForeign(function (value) {
          var readElement = function (i) {
              return function (value1) {
                  return readWith(dictIsForeign)(Data_Foreign.ErrorAtIndex.create(i))(value1);
              };
          };
          var readElements = function (arr) {
              return Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Array.zipWith(readElement)(Data_Array.range(0)(Data_Array.length(arr)))(arr));
          };
          return Prelude[">>="](Data_Either.bindEither)(Data_Foreign.readArray(value))(readElements);
      });
  };
  exports["IsForeign"] = IsForeign;
  exports["readProp"] = readProp;
  exports["readWith"] = readWith;
  exports["readJSON"] = readJSON;
  exports["read"] = read;
  exports["foreignIsForeign"] = foreignIsForeign;
  exports["stringIsForeign"] = stringIsForeign;
  exports["charIsForeign"] = charIsForeign;
  exports["booleanIsForeign"] = booleanIsForeign;
  exports["numberIsForeign"] = numberIsForeign;
  exports["intIsForeign"] = intIsForeign;
  exports["arrayIsForeign"] = arrayIsForeign;
  exports["nullIsForeign"] = nullIsForeign;
  exports["undefinedIsForeign"] = undefinedIsForeign;
  exports["nullOrUndefinedIsForeign"] = nullOrUndefinedIsForeign;;
 
})(PS["Data.Foreign.Class"] = PS["Data.Foreign.Class"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function(x) { return x; }
 
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;;
 
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Event.Types"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];     
  var EventType = function (x) {
      return x;
  };
  var unsafeToEvent = Unsafe_Coerce.unsafeCoerce;
  var userProximityEventToEvent = unsafeToEvent;
  var wheelEventToEvent = unsafeToEvent;
  var uiEventToEvent = unsafeToEvent;
  var transitionEventToEvent = unsafeToEvent;
  var touchEventToEvent = unsafeToEvent;
  var timeEventToEvent = unsafeToEvent;
  var svgZoomEventToEvent = unsafeToEvent;
  var svgEventToEvent = unsafeToEvent;
  var storageEventToEvent = unsafeToEvent;
  var sensorEventToEvent = unsafeToEvent;
  var rtcPeerConnectionIceEventToEvent = unsafeToEvent;
  var rtcIdentityEventToEvent = unsafeToEvent;
  var rtcIdentityErrorEventToEvent = unsafeToEvent;
  var rtcDataChannelEventToEvent = unsafeToEvent;
  var relatedEventToEvent = unsafeToEvent;
  var readWheelEvent = Data_Foreign.unsafeReadTagged("WheelEvent");
  var readUserProximityEvent = Data_Foreign.unsafeReadTagged("UserProximityEvent");
  var readUIEvent = Data_Foreign.unsafeReadTagged("UIEvent");
  var readTransitionEvent = Data_Foreign.unsafeReadTagged("TransitionEvent");
  var readTouchEvent = Data_Foreign.unsafeReadTagged("TouchEvent");
  var readTimeEvent = Data_Foreign.unsafeReadTagged("TimeEvent");
  var readStorageEvent = Data_Foreign.unsafeReadTagged("StorageEvent");
  var readSensorEvent = Data_Foreign.unsafeReadTagged("SensorEvent");
  var readSVGZoomEvent = Data_Foreign.unsafeReadTagged("SVGZoomEvent");
  var readSVGEvent = Data_Foreign.unsafeReadTagged("SVGEvent");
  var readRelatedEvent = Data_Foreign.unsafeReadTagged("RelatedEvent");
  var readRTCPeerConnectionIceEvent = Data_Foreign.unsafeReadTagged("RTCPeerConnectionIceEvent");
  var readRTCIdentityEvent = Data_Foreign.unsafeReadTagged("RTCIdentityEvent");
  var readRTCIdentityErrorEvent = Data_Foreign.unsafeReadTagged("RTCIdentityErrorEvent");
  var readRTCDataChannelEvent = Data_Foreign.unsafeReadTagged("RTCDataChannelEvent");
  var readProgressEvent = Data_Foreign.unsafeReadTagged("ProgressEvent");
  var readPopStateEvent = Data_Foreign.unsafeReadTagged("PopStateEvent");
  var readPointerEvent = Data_Foreign.unsafeReadTagged("PointerEvent");
  var readPageTransitionEvent = Data_Foreign.unsafeReadTagged("PageTransitionEvent");
  var readOfflineAudioCompletionEvent = Data_Foreign.unsafeReadTagged("OfflineAudioCompletionEvent");
  var readMutationEvent = Data_Foreign.unsafeReadTagged("MutationEvent");
  var readMouseEvent = Data_Foreign.unsafeReadTagged("MouseEvent");
  var readMessageEvent = Data_Foreign.unsafeReadTagged("MessageEvent");
  var readMediaStreamEvent = Data_Foreign.unsafeReadTagged("MediaStreamEvent");
  var readKeyboardEvent = Data_Foreign.unsafeReadTagged("KeyboardEvent");
  var readInputEvent = Data_Foreign.unsafeReadTagged("InputEvent");
  var readIDBVersionChangeEvent = Data_Foreign.unsafeReadTagged("IDBVersionChangeEvent");
  var readHashChangeEvent = Data_Foreign.unsafeReadTagged("HashChangeEvent");
  var readGamepadEvent = Data_Foreign.unsafeReadTagged("GamepadEvent");
  var readFocusEvent = Data_Foreign.unsafeReadTagged("FocusEvent");
  var readFetchEvent = Data_Foreign.unsafeReadTagged("FetchEvent");
  var readEventTarget = $foreign._readEventTarget(Data_Either.Left.create)(Data_Either.Right.create);
  var readErrorEvent = Data_Foreign.unsafeReadTagged("ErrorEvent");
  var readEditingBeforeInputEvent = Data_Foreign.unsafeReadTagged("EditingBeforeInputEvent");
  var readDragEvent = Data_Foreign.unsafeReadTagged("DragEvent");
  var readDeviceProximityEvent = Data_Foreign.unsafeReadTagged("DeviceProximityEvent");
  var readDeviceOrientationEvent = Data_Foreign.unsafeReadTagged("DeviceOrientationEvent");
  var readDeviceMotionEvent = Data_Foreign.unsafeReadTagged("DeviceMotionEvent");
  var readDeviceLightEvent = Data_Foreign.unsafeReadTagged("DeviceLightEvent");
  var readDOMTransactionEvent = Data_Foreign.unsafeReadTagged("DOMTransactionEvent");
  var readCustomEvent = Data_Foreign.unsafeReadTagged("CustomEvent");
  var readCompositionEvent = Data_Foreign.unsafeReadTagged("CompositionEvent");
  var readCloseEvent = Data_Foreign.unsafeReadTagged("CloseEvent");
  var readClipboardEvent = Data_Foreign.unsafeReadTagged("ClipboardEvent");
  var readCSSFontFaceLoadEvent = Data_Foreign.unsafeReadTagged("CSSFontFaceLoadEvent");
  var readBlobEvent = Data_Foreign.unsafeReadTagged("BlobEvent");
  var readBeforeUnloadEvent = Data_Foreign.unsafeReadTagged("BeforeUnloadEvent");
  var readBeforeInputEvent = Data_Foreign.unsafeReadTagged("BeforeInputEvent");
  var readAudioProcessingEvent = Data_Foreign.unsafeReadTagged("AudioProcessingEvent");
  var readAnimationEvent = Data_Foreign.unsafeReadTagged("AnimationEvent");
  var progressEventToEvent = unsafeToEvent;
  var popStateEventToEvent = unsafeToEvent;
  var pointerEventToEvent = unsafeToEvent;
  var pageTransitionEventToEvent = unsafeToEvent;
  var offlineAudioCompletionEventToEvent = unsafeToEvent;
  var mutationEventToEvent = unsafeToEvent;
  var mouseEventToEvent = unsafeToEvent;
  var messageEventToEvent = unsafeToEvent;
  var mediaStreamEventToEvent = unsafeToEvent;
  var keyboardEventToEvent = unsafeToEvent;
  var isForeignWheelEvent = new Data_Foreign_Class.IsForeign(readWheelEvent);
  var isForeignUserProximityEvent = new Data_Foreign_Class.IsForeign(readUserProximityEvent);
  var isForeignUIEvent = new Data_Foreign_Class.IsForeign(readUIEvent);
  var isForeignTransitionEvent = new Data_Foreign_Class.IsForeign(readTransitionEvent);
  var isForeignTouchEvent = new Data_Foreign_Class.IsForeign(readTouchEvent);
  var isForeignTimeEvent = new Data_Foreign_Class.IsForeign(readTimeEvent);
  var isForeignStorageEvent = new Data_Foreign_Class.IsForeign(readStorageEvent);
  var isForeignSensorEvent = new Data_Foreign_Class.IsForeign(readSensorEvent);
  var isForeignSVGZoomEvent = new Data_Foreign_Class.IsForeign(readSVGZoomEvent);
  var isForeignSVGEvent = new Data_Foreign_Class.IsForeign(readSVGEvent);
  var isForeignRelatedEvent = new Data_Foreign_Class.IsForeign(readRelatedEvent);
  var isForeignRTCPeerConnectionIceEvent = new Data_Foreign_Class.IsForeign(readRTCPeerConnectionIceEvent);
  var isForeignRTCIdentityEvent = new Data_Foreign_Class.IsForeign(readRTCIdentityEvent);
  var isForeignRTCIdentityErrorEvent = new Data_Foreign_Class.IsForeign(readRTCIdentityErrorEvent);
  var isForeignRTCDataChannelEvent = new Data_Foreign_Class.IsForeign(readRTCDataChannelEvent);
  var isForeignProgressEvent = new Data_Foreign_Class.IsForeign(readProgressEvent);
  var isForeignPopStateEvent = new Data_Foreign_Class.IsForeign(readPopStateEvent);
  var isForeignPointerEvent = new Data_Foreign_Class.IsForeign(readPointerEvent);
  var isForeignPageTransitionEvent = new Data_Foreign_Class.IsForeign(readPageTransitionEvent);
  var isForeignOfflineAudioCompletionEvent = new Data_Foreign_Class.IsForeign(readOfflineAudioCompletionEvent);
  var isForeignMutationEvent = new Data_Foreign_Class.IsForeign(readMutationEvent);
  var isForeignMouseEvent = new Data_Foreign_Class.IsForeign(readMouseEvent);
  var isForeignMessageEvent = new Data_Foreign_Class.IsForeign(readMessageEvent);
  var isForeignMediaStreamEvent = new Data_Foreign_Class.IsForeign(readMediaStreamEvent);
  var isForeignKeyboardEvent = new Data_Foreign_Class.IsForeign(readKeyboardEvent);
  var isForeignInputEvent = new Data_Foreign_Class.IsForeign(readInputEvent);
  var isForeignIDBVersionChangeEvent = new Data_Foreign_Class.IsForeign(readIDBVersionChangeEvent);
  var isForeignHashChangeEvent = new Data_Foreign_Class.IsForeign(readHashChangeEvent);
  var isForeignGamepadEvent = new Data_Foreign_Class.IsForeign(readGamepadEvent);
  var isForeignFocusEvent = new Data_Foreign_Class.IsForeign(readFocusEvent);
  var isForeignFetchEvent = new Data_Foreign_Class.IsForeign(readFetchEvent);
  var isForeignEventTarget = new Data_Foreign_Class.IsForeign(readEventTarget);
  var isForeignErrorEvent = new Data_Foreign_Class.IsForeign(readErrorEvent);
  var isForeignEditingBeforeInputEvent = new Data_Foreign_Class.IsForeign(readEditingBeforeInputEvent);
  var isForeignDragEvent = new Data_Foreign_Class.IsForeign(readDragEvent);
  var isForeignDeviceProximityEvent = new Data_Foreign_Class.IsForeign(readDeviceProximityEvent);
  var isForeignDeviceOrientationEvent = new Data_Foreign_Class.IsForeign(readDeviceOrientationEvent);
  var isForeignDeviceMotionEvent = new Data_Foreign_Class.IsForeign(readDeviceMotionEvent);
  var isForeignDeviceLightEvent = new Data_Foreign_Class.IsForeign(readDeviceLightEvent);
  var isForeignDOMTransactionEvent = new Data_Foreign_Class.IsForeign(readDOMTransactionEvent);
  var isForeignCustomEvent = new Data_Foreign_Class.IsForeign(readCustomEvent);
  var isForeignCompositionEvent = new Data_Foreign_Class.IsForeign(readCompositionEvent);
  var isForeignCloseEvent = new Data_Foreign_Class.IsForeign(readCloseEvent);
  var isForeignClipboardEvent = new Data_Foreign_Class.IsForeign(readClipboardEvent);
  var isForeignCSSFontFaceLoadEvent = new Data_Foreign_Class.IsForeign(readCSSFontFaceLoadEvent);
  var isForeignBlobEvent = new Data_Foreign_Class.IsForeign(readBlobEvent);
  var isForeignBeforeUnloadEvent = new Data_Foreign_Class.IsForeign(readBeforeUnloadEvent);
  var isForeignBeforeInputEvent = new Data_Foreign_Class.IsForeign(readBeforeInputEvent);
  var isForeignAudioProcessingEvent = new Data_Foreign_Class.IsForeign(readAudioProcessingEvent);
  var isForeignAnimationEvent = new Data_Foreign_Class.IsForeign(readAnimationEvent);
  var inputEventToEvent = unsafeToEvent;
  var idbVersionChangeEventToEvent = unsafeToEvent;
  var hashChangeEventToEvent = unsafeToEvent;
  var gamepadEventToEvent = unsafeToEvent;
  var focusEventToEvent = unsafeToEvent;
  var fetchEventToEvent = unsafeToEvent;
  var errorEventToEvent = unsafeToEvent;
  var eqEventType = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Prelude.eqString)(v)(v1);
      };
  });
  var ordEventType = new Prelude.Ord(function () {
      return eqEventType;
  }, function (v) {
      return function (v1) {
          return Prelude.compare(Prelude.ordString)(v)(v1);
      };
  });
  var editingBeforeInputEventToEvent = unsafeToEvent;
  var dragEventToEvent = unsafeToEvent;
  var domTransactionEventToEvent = unsafeToEvent;
  var deviceProximityEventToEvent = unsafeToEvent;
  var deviceOrientationEventToEvent = unsafeToEvent;
  var deviceMotionEventToEvent = unsafeToEvent;
  var deviceLightEventToEvent = unsafeToEvent;
  var customEventToEvent = unsafeToEvent;
  var cssFontFaceLoadEventToEvent = unsafeToEvent;
  var compositionEventToEvent = unsafeToEvent;
  var closeEventToEvent = unsafeToEvent;
  var clipboardEventToEvent = unsafeToEvent;
  var blobEventToEvent = unsafeToEvent;
  var beforeUnloadEventToEvent = unsafeToEvent;
  var beforeInputEventToEvent = unsafeToEvent;
  var audioProcessingEventToEvent = unsafeToEvent;
  var animationEventToEvent = unsafeToEvent;
  exports["EventType"] = EventType;
  exports["readWheelEvent"] = readWheelEvent;
  exports["wheelEventToEvent"] = wheelEventToEvent;
  exports["readUserProximityEvent"] = readUserProximityEvent;
  exports["userProximityEventToEvent"] = userProximityEventToEvent;
  exports["readUIEvent"] = readUIEvent;
  exports["uiEventToEvent"] = uiEventToEvent;
  exports["readTransitionEvent"] = readTransitionEvent;
  exports["transitionEventToEvent"] = transitionEventToEvent;
  exports["readTouchEvent"] = readTouchEvent;
  exports["touchEventToEvent"] = touchEventToEvent;
  exports["readTimeEvent"] = readTimeEvent;
  exports["timeEventToEvent"] = timeEventToEvent;
  exports["readSVGZoomEvent"] = readSVGZoomEvent;
  exports["svgZoomEventToEvent"] = svgZoomEventToEvent;
  exports["readSVGEvent"] = readSVGEvent;
  exports["svgEventToEvent"] = svgEventToEvent;
  exports["readStorageEvent"] = readStorageEvent;
  exports["storageEventToEvent"] = storageEventToEvent;
  exports["readSensorEvent"] = readSensorEvent;
  exports["sensorEventToEvent"] = sensorEventToEvent;
  exports["readRTCPeerConnectionIceEvent"] = readRTCPeerConnectionIceEvent;
  exports["rtcPeerConnectionIceEventToEvent"] = rtcPeerConnectionIceEventToEvent;
  exports["readRTCIdentityEvent"] = readRTCIdentityEvent;
  exports["rtcIdentityEventToEvent"] = rtcIdentityEventToEvent;
  exports["readRTCIdentityErrorEvent"] = readRTCIdentityErrorEvent;
  exports["rtcIdentityErrorEventToEvent"] = rtcIdentityErrorEventToEvent;
  exports["readRTCDataChannelEvent"] = readRTCDataChannelEvent;
  exports["rtcDataChannelEventToEvent"] = rtcDataChannelEventToEvent;
  exports["readRelatedEvent"] = readRelatedEvent;
  exports["relatedEventToEvent"] = relatedEventToEvent;
  exports["readProgressEvent"] = readProgressEvent;
  exports["progressEventToEvent"] = progressEventToEvent;
  exports["readPopStateEvent"] = readPopStateEvent;
  exports["popStateEventToEvent"] = popStateEventToEvent;
  exports["readPointerEvent"] = readPointerEvent;
  exports["pointerEventToEvent"] = pointerEventToEvent;
  exports["readPageTransitionEvent"] = readPageTransitionEvent;
  exports["pageTransitionEventToEvent"] = pageTransitionEventToEvent;
  exports["readOfflineAudioCompletionEvent"] = readOfflineAudioCompletionEvent;
  exports["offlineAudioCompletionEventToEvent"] = offlineAudioCompletionEventToEvent;
  exports["readMutationEvent"] = readMutationEvent;
  exports["mutationEventToEvent"] = mutationEventToEvent;
  exports["readMouseEvent"] = readMouseEvent;
  exports["mouseEventToEvent"] = mouseEventToEvent;
  exports["readMessageEvent"] = readMessageEvent;
  exports["messageEventToEvent"] = messageEventToEvent;
  exports["readMediaStreamEvent"] = readMediaStreamEvent;
  exports["mediaStreamEventToEvent"] = mediaStreamEventToEvent;
  exports["readKeyboardEvent"] = readKeyboardEvent;
  exports["keyboardEventToEvent"] = keyboardEventToEvent;
  exports["readInputEvent"] = readInputEvent;
  exports["inputEventToEvent"] = inputEventToEvent;
  exports["readIDBVersionChangeEvent"] = readIDBVersionChangeEvent;
  exports["idbVersionChangeEventToEvent"] = idbVersionChangeEventToEvent;
  exports["readHashChangeEvent"] = readHashChangeEvent;
  exports["hashChangeEventToEvent"] = hashChangeEventToEvent;
  exports["readGamepadEvent"] = readGamepadEvent;
  exports["gamepadEventToEvent"] = gamepadEventToEvent;
  exports["readFocusEvent"] = readFocusEvent;
  exports["focusEventToEvent"] = focusEventToEvent;
  exports["readFetchEvent"] = readFetchEvent;
  exports["fetchEventToEvent"] = fetchEventToEvent;
  exports["readErrorEvent"] = readErrorEvent;
  exports["errorEventToEvent"] = errorEventToEvent;
  exports["readEditingBeforeInputEvent"] = readEditingBeforeInputEvent;
  exports["editingBeforeInputEventToEvent"] = editingBeforeInputEventToEvent;
  exports["readDragEvent"] = readDragEvent;
  exports["dragEventToEvent"] = dragEventToEvent;
  exports["readDOMTransactionEvent"] = readDOMTransactionEvent;
  exports["domTransactionEventToEvent"] = domTransactionEventToEvent;
  exports["readDeviceProximityEvent"] = readDeviceProximityEvent;
  exports["deviceProximityEventToEvent"] = deviceProximityEventToEvent;
  exports["readDeviceOrientationEvent"] = readDeviceOrientationEvent;
  exports["deviceOrientationEventToEvent"] = deviceOrientationEventToEvent;
  exports["readDeviceMotionEvent"] = readDeviceMotionEvent;
  exports["deviceMotionEventToEvent"] = deviceMotionEventToEvent;
  exports["readDeviceLightEvent"] = readDeviceLightEvent;
  exports["deviceLightEventToEvent"] = deviceLightEventToEvent;
  exports["readCustomEvent"] = readCustomEvent;
  exports["customEventToEvent"] = customEventToEvent;
  exports["readCSSFontFaceLoadEvent"] = readCSSFontFaceLoadEvent;
  exports["cssFontFaceLoadEventToEvent"] = cssFontFaceLoadEventToEvent;
  exports["readCompositionEvent"] = readCompositionEvent;
  exports["compositionEventToEvent"] = compositionEventToEvent;
  exports["readCloseEvent"] = readCloseEvent;
  exports["closeEventToEvent"] = closeEventToEvent;
  exports["readClipboardEvent"] = readClipboardEvent;
  exports["clipboardEventToEvent"] = clipboardEventToEvent;
  exports["readBlobEvent"] = readBlobEvent;
  exports["blobEventToEvent"] = blobEventToEvent;
  exports["readBeforeUnloadEvent"] = readBeforeUnloadEvent;
  exports["beforeUnloadEventToEvent"] = beforeUnloadEventToEvent;
  exports["readBeforeInputEvent"] = readBeforeInputEvent;
  exports["beforeInputEventToEvent"] = beforeInputEventToEvent;
  exports["readAudioProcessingEvent"] = readAudioProcessingEvent;
  exports["audioProcessingEventToEvent"] = audioProcessingEventToEvent;
  exports["readAnimationEvent"] = readAnimationEvent;
  exports["animationEventToEvent"] = animationEventToEvent;
  exports["readEventTarget"] = readEventTarget;
  exports["eqEventType"] = eqEventType;
  exports["ordEventType"] = ordEventType;
  exports["isForeignEventTarget"] = isForeignEventTarget;
  exports["isForeignAnimationEvent"] = isForeignAnimationEvent;
  exports["isForeignAudioProcessingEvent"] = isForeignAudioProcessingEvent;
  exports["isForeignBeforeInputEvent"] = isForeignBeforeInputEvent;
  exports["isForeignBeforeUnloadEvent"] = isForeignBeforeUnloadEvent;
  exports["isForeignBlobEvent"] = isForeignBlobEvent;
  exports["isForeignClipboardEvent"] = isForeignClipboardEvent;
  exports["isForeignCloseEvent"] = isForeignCloseEvent;
  exports["isForeignCompositionEvent"] = isForeignCompositionEvent;
  exports["isForeignCSSFontFaceLoadEvent"] = isForeignCSSFontFaceLoadEvent;
  exports["isForeignCustomEvent"] = isForeignCustomEvent;
  exports["isForeignDeviceLightEvent"] = isForeignDeviceLightEvent;
  exports["isForeignDeviceMotionEvent"] = isForeignDeviceMotionEvent;
  exports["isForeignDeviceOrientationEvent"] = isForeignDeviceOrientationEvent;
  exports["isForeignDeviceProximityEvent"] = isForeignDeviceProximityEvent;
  exports["isForeignDOMTransactionEvent"] = isForeignDOMTransactionEvent;
  exports["isForeignDragEvent"] = isForeignDragEvent;
  exports["isForeignEditingBeforeInputEvent"] = isForeignEditingBeforeInputEvent;
  exports["isForeignErrorEvent"] = isForeignErrorEvent;
  exports["isForeignFetchEvent"] = isForeignFetchEvent;
  exports["isForeignFocusEvent"] = isForeignFocusEvent;
  exports["isForeignGamepadEvent"] = isForeignGamepadEvent;
  exports["isForeignHashChangeEvent"] = isForeignHashChangeEvent;
  exports["isForeignIDBVersionChangeEvent"] = isForeignIDBVersionChangeEvent;
  exports["isForeignInputEvent"] = isForeignInputEvent;
  exports["isForeignKeyboardEvent"] = isForeignKeyboardEvent;
  exports["isForeignMediaStreamEvent"] = isForeignMediaStreamEvent;
  exports["isForeignMessageEvent"] = isForeignMessageEvent;
  exports["isForeignMouseEvent"] = isForeignMouseEvent;
  exports["isForeignMutationEvent"] = isForeignMutationEvent;
  exports["isForeignOfflineAudioCompletionEvent"] = isForeignOfflineAudioCompletionEvent;
  exports["isForeignPageTransitionEvent"] = isForeignPageTransitionEvent;
  exports["isForeignPointerEvent"] = isForeignPointerEvent;
  exports["isForeignPopStateEvent"] = isForeignPopStateEvent;
  exports["isForeignProgressEvent"] = isForeignProgressEvent;
  exports["isForeignRelatedEvent"] = isForeignRelatedEvent;
  exports["isForeignRTCDataChannelEvent"] = isForeignRTCDataChannelEvent;
  exports["isForeignRTCIdentityErrorEvent"] = isForeignRTCIdentityErrorEvent;
  exports["isForeignRTCIdentityEvent"] = isForeignRTCIdentityEvent;
  exports["isForeignRTCPeerConnectionIceEvent"] = isForeignRTCPeerConnectionIceEvent;
  exports["isForeignSensorEvent"] = isForeignSensorEvent;
  exports["isForeignStorageEvent"] = isForeignStorageEvent;
  exports["isForeignSVGEvent"] = isForeignSVGEvent;
  exports["isForeignSVGZoomEvent"] = isForeignSVGZoomEvent;
  exports["isForeignTimeEvent"] = isForeignTimeEvent;
  exports["isForeignTouchEvent"] = isForeignTouchEvent;
  exports["isForeignTransitionEvent"] = isForeignTransitionEvent;
  exports["isForeignUIEvent"] = isForeignUIEvent;
  exports["isForeignUserProximityEvent"] = isForeignUserProximityEvent;
  exports["isForeignWheelEvent"] = isForeignWheelEvent;;
 
})(PS["DOM.Event.Types"] = PS["DOM.Event.Types"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];     
  var ElementId = function (x) {
      return x;
  };
  var textToNode = Unsafe_Coerce.unsafeCoerce;
  var processingInstructionToNode = Unsafe_Coerce.unsafeCoerce;
  var elementToParentNode = Unsafe_Coerce.unsafeCoerce;
  var elementToNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var elementToNode = Unsafe_Coerce.unsafeCoerce;
  var elementToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var documentTypeToNode = Unsafe_Coerce.unsafeCoerce;
  var documentToParentNode = Unsafe_Coerce.unsafeCoerce;
  var documentToNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  var documentToNode = Unsafe_Coerce.unsafeCoerce;
  var documentToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var documentFragmentToParentNode = Unsafe_Coerce.unsafeCoerce;
  var documentFragmentToNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  var documentFragmentToNode = Unsafe_Coerce.unsafeCoerce;
  var commentToNode = Unsafe_Coerce.unsafeCoerce;
  var characterDataToNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  exports["ElementId"] = ElementId;
  exports["documentTypeToNode"] = documentTypeToNode;
  exports["documentFragmentToNode"] = documentFragmentToNode;
  exports["documentFragmentToParentNode"] = documentFragmentToParentNode;
  exports["documentFragmentToNonElementParentNode"] = documentFragmentToNonElementParentNode;
  exports["processingInstructionToNode"] = processingInstructionToNode;
  exports["commentToNode"] = commentToNode;
  exports["textToNode"] = textToNode;
  exports["characterDataToNonDocumentTypeChildNode"] = characterDataToNonDocumentTypeChildNode;
  exports["elementToEventTarget"] = elementToEventTarget;
  exports["elementToNode"] = elementToNode;
  exports["elementToNonDocumentTypeChildNode"] = elementToNonDocumentTypeChildNode;
  exports["elementToParentNode"] = elementToParentNode;
  exports["documentToEventTarget"] = documentToEventTarget;
  exports["documentToNode"] = documentToNode;
  exports["documentToParentNode"] = documentToParentNode;
  exports["documentToNonElementParentNode"] = documentToNonElementParentNode;;
 
})(PS["DOM.Node.Types"] = PS["DOM.Node.Types"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Event.Event"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var DOM = PS["DOM"];
  var DOM_Event_EventPhase = PS["DOM.Event.EventPhase"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];     
  var eventPhase = function ($0) {
      return Data_Maybe_Unsafe.fromJust(Data_Enum.toEnum(DOM_Event_EventPhase.enumEventPhase)($foreign.eventPhaseIndex($0)));
  };
  exports["eventPhase"] = eventPhase;
  exports["stopPropagation"] = $foreign.stopPropagation;
  exports["stopImmediatePropagation"] = $foreign.stopImmediatePropagation;
  exports["preventDefault"] = $foreign.preventDefault;
  exports["type_"] = $foreign.type_;
  exports["timeStamp"] = $foreign.timeStamp;
  exports["target"] = $foreign.target;
  exports["eventPhaseIndex"] = $foreign.eventPhaseIndex;
  exports["defaultPrevented"] = $foreign.defaultPrevented;
  exports["currentTarget"] = $foreign.currentTarget;
  exports["cancelable"] = $foreign.cancelable;
  exports["bubbles"] = $foreign.bubbles;;
 
})(PS["DOM.Event.Event"] = PS["DOM.Event.Event"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Event.EventTarget

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.removeEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };

  exports.dispatchEvent = function (event) {
    return function (target) {
      return function () {
        return target.dispatchEvent(event);
      };
    };
  };
 
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  exports["dispatchEvent"] = $foreign.dispatchEvent;
  exports["removeEventListener"] = $foreign.removeEventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["eventListener"] = $foreign.eventListener;;
 
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];     
  var wheel = "wheel";
  var waiting = "waiting";
  var volumechange = "volumechange";
  var visibilitychange = "visibilitychange";
  var unload = "unload";
  var transitionend = "transitionend";
  var touchstart = "touchstart";
  var touchmove = "touchmove";
  var touchleave = "touchleave";
  var touchenter = "touchenter";
  var touchend = "touchend";
  var touchcancel = "touchcancel";
  var timeupdate = "timeupdate";
  var timeout = "timeout";
  var suspend = "suspend";
  var submit = "submit";
  var stalled = "stalled";
  var show = "show";
  var select = "select";
  var seeking = "seeking";
  var seeked = "seeked";
  var scroll = "scroll";
  var resize = "resize";
  var reset = "reset";
  var readystatechange = "readystatechange";
  var ratechange = "ratechange";
  var progress = "progress";
  var popstate = "popstate";
  var playing = "playing";
  var play = "play";
  var pause = "pause";
  var paste = "paste";
  var pageshow = "pageshow";
  var pagehide = "pagehide";
  var open = "open";
  var mouseup = "mouseup";
  var mouseover = "mouseover";
  var mouseout = "mouseout";
  var mousemove = "mousemove";
  var mouseleave = "mouseleave";
  var mouseenter = "mouseenter";
  var mousedown = "mousedown";
  var message = "message";
  var loadstart = "loadstart";
  var loadend = "loadend";
  var loadedmetadata = "loadedmetadata";
  var loadeddata = "loadeddata";
  var load = "load";
  var keyup = "keyup";
  var keypress = "keypress";
  var keydown = "keydown";
  var invalid = "invalid";
  var input = "input";
  var hashchange = "hashchange";
  var fullscreenerror = "fullscreenerror";
  var fullscreenchange = "fullscreenchange";
  var focus = "focus";
  var error = "error";
  var ended = "ended";
  var emptied = "emptied";
  var durationchange = "durationchange";
  var drop = "drop";
  var dragstart = "dragstart";
  var dragover = "dragover";
  var dragleave = "dragleave";
  var dragenter = "dragenter";
  var dragend = "dragend";
  var drag = "drag";
  var dblclick = "dblclick";
  var cut = "cut";
  var copy = "copy";
  var contextmenu = "contextmenu";
  var compositionupdate = "compositionupdate";
  var compositionstart = "compositionstart";
  var compositionend = "compositionend";
  var complete = "complete";
  var click = "click";
  var change = "change";
  var canplaythrough = "canplaythrough";
  var canplay = "canplay";
  var blur = "blur";
  var beforeunload = "beforeunload";
  var beforeprint = "beforeprint";
  var audioprocess = "audioprocess";
  var animationstart = "animationstart";
  var animationiteration = "animationiteration";
  var animationend = "animationend";
  var abort = "abort";
  exports["wheel"] = wheel;
  exports["waiting"] = waiting;
  exports["volumechange"] = volumechange;
  exports["visibilitychange"] = visibilitychange;
  exports["unload"] = unload;
  exports["transitionend"] = transitionend;
  exports["touchstart"] = touchstart;
  exports["touchmove"] = touchmove;
  exports["touchleave"] = touchleave;
  exports["touchenter"] = touchenter;
  exports["touchend"] = touchend;
  exports["touchcancel"] = touchcancel;
  exports["timeupdate"] = timeupdate;
  exports["timeout"] = timeout;
  exports["suspend"] = suspend;
  exports["submit"] = submit;
  exports["stalled"] = stalled;
  exports["show"] = show;
  exports["select"] = select;
  exports["seeking"] = seeking;
  exports["seeked"] = seeked;
  exports["scroll"] = scroll;
  exports["resize"] = resize;
  exports["reset"] = reset;
  exports["readystatechange"] = readystatechange;
  exports["ratechange"] = ratechange;
  exports["progress"] = progress;
  exports["popstate"] = popstate;
  exports["playing"] = playing;
  exports["play"] = play;
  exports["pause"] = pause;
  exports["paste"] = paste;
  exports["pageshow"] = pageshow;
  exports["pagehide"] = pagehide;
  exports["open"] = open;
  exports["mouseup"] = mouseup;
  exports["mouseover"] = mouseover;
  exports["mouseout"] = mouseout;
  exports["mousemove"] = mousemove;
  exports["mouseleave"] = mouseleave;
  exports["mouseenter"] = mouseenter;
  exports["mousedown"] = mousedown;
  exports["message"] = message;
  exports["loadstart"] = loadstart;
  exports["loadend"] = loadend;
  exports["loadedmetadata"] = loadedmetadata;
  exports["loadeddata"] = loadeddata;
  exports["load"] = load;
  exports["keyup"] = keyup;
  exports["keypress"] = keypress;
  exports["keydown"] = keydown;
  exports["invalid"] = invalid;
  exports["input"] = input;
  exports["hashchange"] = hashchange;
  exports["fullscreenerror"] = fullscreenerror;
  exports["fullscreenchange"] = fullscreenchange;
  exports["focus"] = focus;
  exports["error"] = error;
  exports["ended"] = ended;
  exports["emptied"] = emptied;
  exports["durationchange"] = durationchange;
  exports["drop"] = drop;
  exports["dragstart"] = dragstart;
  exports["dragover"] = dragover;
  exports["dragleave"] = dragleave;
  exports["dragenter"] = dragenter;
  exports["dragend"] = dragend;
  exports["drag"] = drag;
  exports["dblclick"] = dblclick;
  exports["cut"] = cut;
  exports["copy"] = copy;
  exports["contextmenu"] = contextmenu;
  exports["compositionupdate"] = compositionupdate;
  exports["compositionstart"] = compositionstart;
  exports["compositionend"] = compositionend;
  exports["complete"] = complete;
  exports["click"] = click;
  exports["change"] = change;
  exports["canplaythrough"] = canplaythrough;
  exports["canplay"] = canplay;
  exports["blur"] = blur;
  exports["beforeunload"] = beforeunload;
  exports["beforeprint"] = beforeprint;
  exports["audioprocess"] = audioprocess;
  exports["animationstart"] = animationstart;
  exports["animationiteration"] = animationiteration;
  exports["animationend"] = animationend;
  exports["abort"] = abort;;
 
})(PS["DOM.Event.EventTypes"] = PS["DOM.Event.EventTypes"] || {});
(function(exports) {
  /* global exports, window */
  "use strict";

  // module DOM.HTML

  exports.window = function () {
    return window;
  };
 
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.HTML.Types

  exports._readHTMLElement = function (failure) {
    return function (success) {
      return function (value) {
        var tag = Object.prototype.toString.call(value);
        if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
          return success(value);
        } else {
          return failure(tag);
        }
      };
    };
  };
 
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];     
  var windowToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var readHTMLElement = $foreign._readHTMLElement(function ($0) {
      return Data_Either.Left.create(Data_Foreign.TypeMismatch.create("HTMLElement")($0));
  })(Data_Either.Right.create);
  var readHTMLDocument = Data_Foreign.unsafeReadTagged("HTMLDocument");
  var isForeignHTMLElement = new Data_Foreign_Class.IsForeign(readHTMLElement);
  var isForeignHTMLDocument = new Data_Foreign_Class.IsForeign(readHTMLDocument);
  var htmlElementToParentNode = Unsafe_Coerce.unsafeCoerce;
  var htmlElementToNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var htmlElementToNode = Unsafe_Coerce.unsafeCoerce;
  var htmlElementToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var htmlElementToElement = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToParentNode = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToNode = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToDocument = Unsafe_Coerce.unsafeCoerce;
  exports["readHTMLElement"] = readHTMLElement;
  exports["htmlElementToEventTarget"] = htmlElementToEventTarget;
  exports["htmlElementToNode"] = htmlElementToNode;
  exports["htmlElementToNonDocumentTypeChildNode"] = htmlElementToNonDocumentTypeChildNode;
  exports["htmlElementToParentNode"] = htmlElementToParentNode;
  exports["htmlElementToElement"] = htmlElementToElement;
  exports["readHTMLDocument"] = readHTMLDocument;
  exports["htmlDocumentToEventTarget"] = htmlDocumentToEventTarget;
  exports["htmlDocumentToNode"] = htmlDocumentToNode;
  exports["htmlDocumentToParentNode"] = htmlDocumentToParentNode;
  exports["htmlDocumentToNonElementParentNode"] = htmlDocumentToNonElementParentNode;
  exports["htmlDocumentToDocument"] = htmlDocumentToDocument;
  exports["windowToEventTarget"] = windowToEventTarget;
  exports["isForeignHTMLDocument"] = isForeignHTMLDocument;
  exports["isForeignHTMLElement"] = isForeignHTMLElement;;
 
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;;
 
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.HTML.Document

  exports.body = function (doc) {
    return function () {
      return doc.body;
    };
  };
 
})(PS["DOM.HTML.Document"] = PS["DOM.HTML.Document"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Nullable

  exports["null"] = null;

  exports.nullable = function(a, r, f) {
      return a == null ? r : f(a);
  };

  exports.notNull = function(x) {
      return x;
  }; 
 
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];     
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  var showNullable = function (dictShow) {
      return new Prelude.Show(function (n) {
          var $3 = toMaybe(n);
          if ($3 instanceof Data_Maybe.Nothing) {
              return "null";
          };
          if ($3 instanceof Data_Maybe.Just) {
              return Prelude.show(dictShow)($3.value0);
          };
          throw new Error("Failed pattern match at Data.Nullable line 37, column 1 - line 42, column 1: " + [ $3.constructor.name ]);
      });
  };
  var eqNullable = function (dictEq) {
      return new Prelude.Eq(Data_Function.on(Prelude.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe));
  };
  var ordNullable = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqNullable(dictOrd["__superclass_Prelude.Eq_0"]());
      }, Data_Function.on(Prelude.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe));
  };
  exports["toNullable"] = toNullable;
  exports["toMaybe"] = toMaybe;
  exports["showNullable"] = showNullable;
  exports["eqNullable"] = eqNullable;
  exports["ordNullable"] = ordNullable;;
 
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML.Document"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["body"] = $foreign.body;;
 
})(PS["DOM.HTML.Document"] = PS["DOM.HTML.Document"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.HTML.Location

  exports.hash = function (location) {
    return function () {
      return location.hash;
    };
  };

  exports.setHash = function (hash) {
    return function (location) {
      return function () {
        location.hash = hash;
      };
    };
  };

  exports.host = function (location) {
    return function () {
      return location.host;
    };
  };

  exports.setHost = function (host) {
    return function (location) {
      return function () {
        location.host = host;
      };
    };
  };

  exports.hostname = function (location) {
    return function () {
      return location.hostname;
    };
  };

  exports.setHostname = function (hostname) {
    return function (location) {
      return function () {
        location.hostname = hostname;
      };
    };
  };

  exports.href = function (location) {
    return function () {
      return location.href;
    };
  };

  exports.setHref = function (href) {
    return function (location) {
      return function () {
        location.href = href;
      };
    };
  };

  exports.origin = function (location) {
    return function () {
      return location.origin;
    };
  };

  exports.setOrigin = function (origin) {
    return function (location) {
      return function () {
        location.origin = origin;
      };
    };
  };

  exports.pathname = function (location) {
    return function () {
      return location.pathname;
    };
  };

  exports.setPathname = function (pathname) {
    return function (location) {
      return function () {
        location.pathname = pathname;
      };
    };
  };

  exports.port = function (location) {
    return function () {
      return location.port;
    };
  };

  exports.setPort = function (port) {
    return function (location) {
      return function () {
        location.port = port;
      };
    };
  };

  exports.protocol = function (location) {
    return function () {
      return location.protocol;
    };
  };

  exports.setProtocol = function (protocol) {
    return function (location) {
      return function () {
        location.protocol = protocol;
      };
    };
  };

  exports.search = function (location) {
    return function () {
      return location.search;
    };
  };

  exports.setSearch = function (search) {
    return function (location) {
      return function () {
        location.search = search;
      };
    };
  };

  exports.assign = function (url) {
    return function (location) {
      return function () {
        location.assign(url);
      };
    };
  };

  exports.replace = function (url) {
    return function (location) {
      return function () {
        location.replace(url);
      };
    };
  };

  exports.reload = function (location) {
    return function() {
      location.reload();
    };
  };
 
})(PS["DOM.HTML.Location"] = PS["DOM.HTML.Location"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML.Location"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["reload"] = $foreign.reload;
  exports["replace"] = $foreign.replace;
  exports["assign"] = $foreign.assign;
  exports["setSearch"] = $foreign.setSearch;
  exports["search"] = $foreign.search;
  exports["setProtocol"] = $foreign.setProtocol;
  exports["protocol"] = $foreign.protocol;
  exports["setPort"] = $foreign.setPort;
  exports["port"] = $foreign.port;
  exports["setPathname"] = $foreign.setPathname;
  exports["pathname"] = $foreign.pathname;
  exports["setOrigin"] = $foreign.setOrigin;
  exports["origin"] = $foreign.origin;
  exports["setHref"] = $foreign.setHref;
  exports["href"] = $foreign.href;
  exports["setHostname"] = $foreign.setHostname;
  exports["hostname"] = $foreign.hostname;
  exports["setHost"] = $foreign.setHost;
  exports["host"] = $foreign.host;
  exports["setHash"] = $foreign.setHash;
  exports["hash"] = $foreign.hash;;
 
})(PS["DOM.HTML.Location"] = PS["DOM.HTML.Location"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.HTML.Navigator

  exports.platform = function (navigator) {
    return function () {
      return navigator.platform;
    };
  };
 
})(PS["DOM.HTML.Navigator"] = PS["DOM.HTML.Navigator"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML.Navigator"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["platform"] = $foreign.platform;;
 
})(PS["DOM.HTML.Navigator"] = PS["DOM.HTML.Navigator"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.HTML.Window

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };

  exports.navigator = function (window) {
    return function () {
      return window.navigator;
    };
  };

  exports.location = function (window) {
    return function () {
      return window.location;
    };
  };
 
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["location"] = $foreign.location;
  exports["navigator"] = $foreign.navigator;
  exports["document"] = $foreign.document;;
 
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.ChildNode

  exports.remove = function (node) {
    return function () {
      return node.remove();
    };
  };
 
})(PS["DOM.Node.ChildNode"] = PS["DOM.Node.ChildNode"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.ChildNode"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["remove"] = $foreign.remove;;
 
})(PS["DOM.Node.ChildNode"] = PS["DOM.Node.ChildNode"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.Document

  var getEffProp = function (name) {
    return function (doc) {
      return function () {
        return doc[name];
      };
    };
  };

  exports.url = getEffProp("URL");
  exports.documentURI = getEffProp("documentURI");
  exports.origin = getEffProp("origin");
  exports.compatMode = getEffProp("compatMode");
  exports.characterSet = getEffProp("characterSet");
  exports.contentType = getEffProp("contentType");

  exports.doctype = getEffProp("doctype");
  exports.documentElement = getEffProp("documentElement");

  exports.getElementsByTagName = function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagName(localName);
      };
    };
  };

  exports.getElementsByTagNameNS = function (ns) {
    return function (localName) {
      return function (doc) {
        return function () {
          return doc.getElementsByTagNameNS(ns, localName);
        };
      };
    };
  };

  exports.getElementsByClassName = function (classNames) {
    return function (doc) {
      return function () {
        return doc.getElementsByClassName(classNames);
      };
    };
  };

  exports.createElement = function (localName) {
    return function (doc) {
      return function () {
        return doc.createElement(localName);
      };
    };
  };

  exports.createElementNS = function (ns) {
    return function (qualifiedName) {
      return function (doc) {
        return function () {
          return doc.createElementNS(ns, qualifiedName);
        };
      };
    };
  };

  exports.createDocumentFragment = function (doc) {
    return function () {
      return doc.createDocumentFragment();
    };
  };

  exports.createTextNode = function (data) {
    return function (doc) {
      return function () {
        return doc.createTextNode(data);
      };
    };
  };

  exports.createComment = function (data) {
    return function (doc) {
      return function () {
        return doc.createComment(data);
      };
    };
  };

  exports.createProcessingInstruction = function (target) {
    return function (data) {
      return function (doc) {
        return function () {
          return doc.createProcessingInstruction(target, data);
        };
      };
    };
  };

  exports.importNode = function (node) {
    return function (deep) {
      return function (doc) {
        return function () {
          return doc.importNode(node, deep);
        };
      };
    };
  };

  exports.adoptNode = function (node) {
    return function (doc) {
      return function () {
        return doc.adoptNode(node);
      };
    };
  };
 
})(PS["DOM.Node.Document"] = PS["DOM.Node.Document"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.Document"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["adoptNode"] = $foreign.adoptNode;
  exports["importNode"] = $foreign.importNode;
  exports["createProcessingInstruction"] = $foreign.createProcessingInstruction;
  exports["createComment"] = $foreign.createComment;
  exports["createTextNode"] = $foreign.createTextNode;
  exports["createDocumentFragment"] = $foreign.createDocumentFragment;
  exports["createElementNS"] = $foreign.createElementNS;
  exports["createElement"] = $foreign.createElement;
  exports["getElementsByClassName"] = $foreign.getElementsByClassName;
  exports["getElementsByTagNameNS"] = $foreign.getElementsByTagNameNS;
  exports["getElementsByTagName"] = $foreign.getElementsByTagName;
  exports["documentElement"] = $foreign.documentElement;
  exports["doctype"] = $foreign.doctype;
  exports["contentType"] = $foreign.contentType;
  exports["characterSet"] = $foreign.characterSet;
  exports["compatMode"] = $foreign.compatMode;
  exports["origin"] = $foreign.origin;
  exports["documentURI"] = $foreign.documentURI;
  exports["url"] = $foreign.url;;
 
})(PS["DOM.Node.Document"] = PS["DOM.Node.Document"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.DocumentType

  var getProp = function (name) {
    return function (doctype) {
      return doctype[name];
    };
  };

  exports.name = getProp("name");
  exports.publicId = getProp("publicId");
  exports.systemId = getProp("systemId");
 
})(PS["DOM.Node.DocumentType"] = PS["DOM.Node.DocumentType"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.DocumentType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["systemId"] = $foreign.systemId;
  exports["publicId"] = $foreign.publicId;
  exports["name"] = $foreign.name;;
 
})(PS["DOM.Node.DocumentType"] = PS["DOM.Node.DocumentType"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.Element

  var getProp = function (name) {
    return function (doctype) {
      return doctype[name];
    };
  };

  exports.namespaceURI = getProp("namespaceURI");
  exports.prefix = getProp("prefix");
  exports.localName = getProp("localName");
  exports.tagName = getProp("tagName");

  exports.id = function (node) {
    return function () {
      return node.id;
    };
  };

  exports.setId = function (id) {
    return function (node) {
      return function () {
        node.id = id;
        return {};
      };
    };
  };

  exports.className = function (node) {
    return function () {
      return node.className;
    };
  };

  exports.setClassName = function (className) {
    return function (node) {
      return function () {
        node.className = className;
        return {};
      };
    };
  };

  exports.getElementsByTagName = function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagName(localName);
      };
    };
  };

  exports.getElementsByTagNameNS = function (ns) {
    return function (localName) {
      return function (doc) {
        return function () {
          return doc.getElementsByTagNameNS(ns, localName);
        };
      };
    };
  };

  exports.getElementsByClassName = function (classNames) {
    return function (doc) {
      return function () {
        return doc.getElementsByClassName(classNames);
      };
    };
  };

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
          return {};
        };
      };
    };
  };

  exports.getAttribute = function (name) {
    return function (element) {
      return function () {
        return element.getAttribute(name);
      };
    };
  };
 
})(PS["DOM.Node.Element"] = PS["DOM.Node.Element"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.Element"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["getAttribute"] = $foreign.getAttribute;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["getElementsByClassName"] = $foreign.getElementsByClassName;
  exports["getElementsByTagNameNS"] = $foreign.getElementsByTagNameNS;
  exports["getElementsByTagName"] = $foreign.getElementsByTagName;
  exports["setClassName"] = $foreign.setClassName;
  exports["className"] = $foreign.className;
  exports["setId"] = $foreign.setId;
  exports["id"] = $foreign.id;
  exports["tagName"] = $foreign.tagName;
  exports["localName"] = $foreign.localName;
  exports["prefix"] = $foreign.prefix;
  exports["namespaceURI"] = $foreign.namespaceURI;;
 
})(PS["DOM.Node.Element"] = PS["DOM.Node.Element"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.HTMLCollection

  exports.length = function (list) {
    return function () {
      return list.length;
    };
  };

  exports.item = function (index) {
    return function (list) {
      return function () {
        return list.item(index);
      };
    };
  };

  exports.namedItem = function (name) {
    return function (list) {
      return function () {
        return list.namedItem(name);
      };
    };
  };
 
})(PS["DOM.Node.HTMLCollection"] = PS["DOM.Node.HTMLCollection"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.HTMLCollection"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["namedItem"] = $foreign.namedItem;
  exports["item"] = $foreign.item;
  exports["length"] = $foreign.length;;
 
})(PS["DOM.Node.HTMLCollection"] = PS["DOM.Node.HTMLCollection"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.Node

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };

  exports.nodeTypeIndex = function (node) {
    return node.nodeType;
  };

  exports.nodeName = function (node) {
    return node.nodeName;
  };

  exports.baseURI = getEffProp("baseURI");

  exports.ownerDocument = getEffProp("ownerDocument");

  exports.parentNode = getEffProp("parentNode");

  exports.parentElement = getEffProp("parentElement");

  exports.hasChildNodes = function (node) {
    return function () {
      return node.hasChildNodes();
    };
  };

  exports.childNodes = getEffProp("childNodes");

  exports.firstChild = getEffProp("firstChild");

  exports.lastChild = getEffProp("lastChild");

  exports.previousSibling = getEffProp("previousSibling");

  exports.nextSibling = getEffProp("nextSibling");

  exports.nodeValue = getEffProp("nodeValue");

  exports.setNodeValue = function (value) {
    return function (node) {
      return function () {
        node.nodeValue = value;
        return {};
      };
    };
  };

  exports.textContent = getEffProp("textContent");

  exports.setTextContent = function (value) {
    return function (node) {
      return function () {
        node.textContent = value;
        return {};
      };
    };
  };

  exports.normalize = function (node) {
    return function () {
      node.normalize();
      return {};
    };
  };

  exports.clone = function (node) {
    return function () {
      return node.clone(false);
    };
  };

  exports.deepClone = function (node) {
    return function () {
      return node.clone(false);
    };
  };

  exports.isEqualNode = function (node1) {
    return function (node2) {
      return function () {
        return node1.isEqualNode(node2);
      };
    };
  };

  exports.compareDocumentPositionBits = function (node1) {
    return function (node2) {
      return function () {
        return node1.compareDocumentPosition(node2);
      };
    };
  };

  exports.contains = function (node1) {
    return function (node2) {
      return function () {
        return node1.contains(node2);
      };
    };
  };

  exports.lookupPrefix = function (prefix) {
    return function (node) {
      return function () {
        return node.lookupPrefix(prefix);
      };
    };
  };

  exports.lookupNamespaceURI = function (ns) {
    return function (node) {
      return function () {
        return node.lookupNamespaceURI(ns);
      };
    };
  };

  exports.lookupNamespaceURI = function (ns) {
    return function (node) {
      return function () {
        return node.isDefaultNamespace(ns);
      };
    };
  };

  exports.insertBefore = function (node1) {
    return function (node2) {
      return function (parent) {
        return function () {
          return parent.insertBefore(node1, node2);
        };
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };

  exports.replaceChild = function (oldChild) {
    return function (newChild) {
      return function (parent) {
        return function () {
          return parent.replaceChild(oldChild, newChild);
        };
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        return parent.removeChild(node);
      };
    };
  };
 
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Enum = PS["Data.Enum"];     
  var ElementNode = (function () {
      function ElementNode() {

      };
      ElementNode.value = new ElementNode();
      return ElementNode;
  })();
  var AttributeNode = (function () {
      function AttributeNode() {

      };
      AttributeNode.value = new AttributeNode();
      return AttributeNode;
  })();
  var TextNode = (function () {
      function TextNode() {

      };
      TextNode.value = new TextNode();
      return TextNode;
  })();
  var CDATASectionNode = (function () {
      function CDATASectionNode() {

      };
      CDATASectionNode.value = new CDATASectionNode();
      return CDATASectionNode;
  })();
  var EntityReferenceNode = (function () {
      function EntityReferenceNode() {

      };
      EntityReferenceNode.value = new EntityReferenceNode();
      return EntityReferenceNode;
  })();
  var EntityNode = (function () {
      function EntityNode() {

      };
      EntityNode.value = new EntityNode();
      return EntityNode;
  })();
  var ProcessingInstructionNode = (function () {
      function ProcessingInstructionNode() {

      };
      ProcessingInstructionNode.value = new ProcessingInstructionNode();
      return ProcessingInstructionNode;
  })();
  var CommentNode = (function () {
      function CommentNode() {

      };
      CommentNode.value = new CommentNode();
      return CommentNode;
  })();
  var DocumentNode = (function () {
      function DocumentNode() {

      };
      DocumentNode.value = new DocumentNode();
      return DocumentNode;
  })();
  var DocumentTypeNode = (function () {
      function DocumentTypeNode() {

      };
      DocumentTypeNode.value = new DocumentTypeNode();
      return DocumentTypeNode;
  })();
  var DocumentFragmentNode = (function () {
      function DocumentFragmentNode() {

      };
      DocumentFragmentNode.value = new DocumentFragmentNode();
      return DocumentFragmentNode;
  })();
  var NotationNode = (function () {
      function NotationNode() {

      };
      NotationNode.value = new NotationNode();
      return NotationNode;
  })();
  var toEnumNodeType = function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(ElementNode.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(AttributeNode.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(TextNode.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(CDATASectionNode.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(EntityReferenceNode.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(EntityNode.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(ProcessingInstructionNode.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(CommentNode.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(DocumentNode.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(DocumentTypeNode.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(DocumentFragmentNode.value);
      };
      if (v === 12) {
          return new Data_Maybe.Just(NotationNode.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var fromEnumNodeType = function (v) {
      if (v instanceof ElementNode) {
          return 1;
      };
      if (v instanceof AttributeNode) {
          return 2;
      };
      if (v instanceof TextNode) {
          return 3;
      };
      if (v instanceof CDATASectionNode) {
          return 4;
      };
      if (v instanceof EntityReferenceNode) {
          return 5;
      };
      if (v instanceof EntityNode) {
          return 6;
      };
      if (v instanceof ProcessingInstructionNode) {
          return 7;
      };
      if (v instanceof CommentNode) {
          return 8;
      };
      if (v instanceof DocumentNode) {
          return 9;
      };
      if (v instanceof DocumentTypeNode) {
          return 10;
      };
      if (v instanceof DocumentFragmentNode) {
          return 11;
      };
      if (v instanceof NotationNode) {
          return 12;
      };
      throw new Error("Failed pattern match at DOM.Node.NodeType line 67, column 1 - line 68, column 1: " + [ v.constructor.name ]);
  };
  var eqNodeType = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof ElementNode && v1 instanceof ElementNode) {
              return true;
          };
          if (v instanceof AttributeNode && v1 instanceof AttributeNode) {
              return true;
          };
          if (v instanceof TextNode && v1 instanceof TextNode) {
              return true;
          };
          if (v instanceof CDATASectionNode && v1 instanceof CDATASectionNode) {
              return true;
          };
          if (v instanceof EntityReferenceNode && v1 instanceof EntityReferenceNode) {
              return true;
          };
          if (v instanceof EntityNode && v1 instanceof EntityNode) {
              return true;
          };
          if (v instanceof ProcessingInstructionNode && v1 instanceof ProcessingInstructionNode) {
              return true;
          };
          if (v instanceof CommentNode && v1 instanceof CommentNode) {
              return true;
          };
          if (v instanceof DocumentNode && v1 instanceof DocumentNode) {
              return true;
          };
          if (v instanceof DocumentTypeNode && v1 instanceof DocumentTypeNode) {
              return true;
          };
          if (v instanceof DocumentFragmentNode && v1 instanceof DocumentFragmentNode) {
              return true;
          };
          if (v instanceof NotationNode && v1 instanceof NotationNode) {
              return true;
          };
          return false;
      };
  });
  var ordNodeType = new Prelude.Ord(function () {
      return eqNodeType;
  }, function (x) {
      return function (y) {
          return Prelude.compare(Prelude.ordInt)(fromEnumNodeType(x))(fromEnumNodeType(y));
      };
  });
  var boundedNodeType = new Prelude.Bounded(ElementNode.value, NotationNode.value);
  var boundedOrdNodeType = new Prelude.BoundedOrd(function () {
      return boundedNodeType;
  }, function () {
      return ordNodeType;
  });
  var enumNodeType = new Data_Enum.Enum(function () {
      return boundedNodeType;
  }, 4, fromEnumNodeType, Data_Enum.defaultPred(toEnumNodeType)(fromEnumNodeType), Data_Enum.defaultSucc(toEnumNodeType)(fromEnumNodeType), toEnumNodeType);
  exports["ElementNode"] = ElementNode;
  exports["AttributeNode"] = AttributeNode;
  exports["TextNode"] = TextNode;
  exports["CDATASectionNode"] = CDATASectionNode;
  exports["EntityReferenceNode"] = EntityReferenceNode;
  exports["EntityNode"] = EntityNode;
  exports["ProcessingInstructionNode"] = ProcessingInstructionNode;
  exports["CommentNode"] = CommentNode;
  exports["DocumentNode"] = DocumentNode;
  exports["DocumentTypeNode"] = DocumentTypeNode;
  exports["DocumentFragmentNode"] = DocumentFragmentNode;
  exports["NotationNode"] = NotationNode;
  exports["eqNodeType"] = eqNodeType;
  exports["ordNodeType"] = ordNodeType;
  exports["boundedNodeType"] = boundedNodeType;
  exports["boundedOrdNodeType"] = boundedOrdNodeType;
  exports["enumNodeType"] = enumNodeType;;
 
})(PS["DOM.Node.NodeType"] = PS["DOM.Node.NodeType"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.Node"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var DOM = PS["DOM"];
  var DOM_Node_NodeType = PS["DOM.Node.NodeType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];     
  var nodeType = function ($0) {
      return Data_Maybe_Unsafe.fromJust(Data_Enum.toEnum(DOM_Node_NodeType.enumNodeType)($foreign.nodeTypeIndex($0)));
  };
  exports["nodeType"] = nodeType;
  exports["removeChild"] = $foreign.removeChild;
  exports["replaceChild"] = $foreign.replaceChild;
  exports["appendChild"] = $foreign.appendChild;
  exports["insertBefore"] = $foreign.insertBefore;
  exports["isDefaultNamespace"] = $foreign.isDefaultNamespace;
  exports["lookupNamespaceURI"] = $foreign.lookupNamespaceURI;
  exports["lookupPrefix"] = $foreign.lookupPrefix;
  exports["contains"] = $foreign.contains;
  exports["compareDocumentPositionBits"] = $foreign.compareDocumentPositionBits;
  exports["isEqualNode"] = $foreign.isEqualNode;
  exports["deepClone"] = $foreign.deepClone;
  exports["clone"] = $foreign.clone;
  exports["normalize"] = $foreign.normalize;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["textContent"] = $foreign.textContent;
  exports["setNodeValue"] = $foreign.setNodeValue;
  exports["nodeValue"] = $foreign.nodeValue;
  exports["nextSibling"] = $foreign.nextSibling;
  exports["previousSibling"] = $foreign.previousSibling;
  exports["lastChild"] = $foreign.lastChild;
  exports["firstChild"] = $foreign.firstChild;
  exports["childNodes"] = $foreign.childNodes;
  exports["hasChildNodes"] = $foreign.hasChildNodes;
  exports["parentElement"] = $foreign.parentElement;
  exports["parentNode"] = $foreign.parentNode;
  exports["ownerDocument"] = $foreign.ownerDocument;
  exports["baseURI"] = $foreign.baseURI;
  exports["nodeName"] = $foreign.nodeName;
  exports["nodeTypeIndex"] = $foreign.nodeTypeIndex;;
 
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.NodeList

  exports.length = function (list) {
    return function () {
      return list.length;
    };
  };

  exports.item = function (index) {
    return function (list) {
      return function () {
        return list.item(index);
      };
    };
  };
 
})(PS["DOM.Node.NodeList"] = PS["DOM.Node.NodeList"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.NodeList"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["item"] = $foreign.item;
  exports["length"] = $foreign.length;;
 
})(PS["DOM.Node.NodeList"] = PS["DOM.Node.NodeList"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.NonDocumentTypeChildNode

  exports.previousElementSibling = function (node) {
    return function () {
      return node.previousElementSibling;
    };
  };

  exports.nextElementSibling = function (node) {
    return function () {
      return node.nextElementSibling;
    };
  };
 
})(PS["DOM.Node.NonDocumentTypeChildNode"] = PS["DOM.Node.NonDocumentTypeChildNode"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.NonDocumentTypeChildNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["nextElementSibling"] = $foreign.nextElementSibling;
  exports["previousElementSibling"] = $foreign.previousElementSibling;;
 
})(PS["DOM.Node.NonDocumentTypeChildNode"] = PS["DOM.Node.NonDocumentTypeChildNode"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.NonElementParentNode

  exports.getElementById = function (id) {
    return function (node) {
      return function () {
        return node.getElementById(id);
      };
    };
  };
 
})(PS["DOM.Node.NonElementParentNode"] = PS["DOM.Node.NonElementParentNode"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.NonElementParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["getElementById"] = $foreign.getElementById;;
 
})(PS["DOM.Node.NonElementParentNode"] = PS["DOM.Node.NonElementParentNode"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Node.ParentNode

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };

  exports.children = getEffProp("children");

  exports.firstElementChild = getEffProp("firstElementChild");

  exports.lastElementChild = getEffProp("lastElementChild");

  exports.childElementCount = getEffProp("childElementCount");

  exports.querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };

  exports.querySelectorAll = function (selector) {
    return function (node) {
      return function () {
        return node.querySelectorAll(selector);
      };
    };
  };
 
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["querySelectorAll"] = $foreign.querySelectorAll;
  exports["querySelector"] = $foreign.querySelector;
  exports["childElementCount"] = $foreign.childElementCount;
  exports["lastElementChild"] = $foreign.lastElementChild;
  exports["firstElementChild"] = $foreign.firstElementChild;
  exports["children"] = $foreign.children;;
 
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // module Data.Argonaut.Core

  function id(x) {
      return x;
  }
    

  exports.fromNull = function() {
      return null;
  };

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports._stringify = function(j) {
      return JSON.stringify(j);
  };

  exports._foldJson = function(isNull, isBool, isNum, isStr, isArr, isObj, j) {
      if (j == null) return isNull(null);
      else if (typeof j === 'boolean') return isBool(j);
      else if (typeof j === 'number') return isNum(j);
      else if (typeof j === 'string') return isStr(j);
      else if (Object.prototype.toString.call(j) === '[object Array]')
          return isArr(j);
      else return isObj(j);
  };

  function _compare(EQ, GT, LT, a, b) {
      function isArray(a) {
          return Object.prototype.toString.call(a) === '[object Array]';
      }
      function keys(o) {
          var a = [];
          for (var k in o) {
              a.push(k);
          }
          return a;
      }

      if (a == null) {
          if (b == null) return EQ;
          else return LT;
      } else if (typeof a === 'boolean') {
          if (typeof b === 'boolean') {
              // boolean / boolean
              if (a === b) return EQ;
              else if (a == false) return LT;
              else return GT;
          } else if (b == null) return GT;
          else return LT;
      } else if (typeof a === 'number') {
          if (typeof b === 'number') {
              if (a === b) return EQ;
              else if (a < b) return LT;
              else return GT;
          } else if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else return LT;
      } else if (typeof a === 'string') {
          if (typeof b === 'string') {
              if (a === b) return EQ;
              else if (a < b) return LT;
              else return GT;
          } else if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else if (typeof b === 'number') return GT;
          else return LT;
      } else if (isArray(a)) {
          if (isArray(b)) {
              for (var i = 0; i < Math.min(a.length, b.length); i++) {
                  var c = _compare(EQ, GT, LT, a[i], b[i]);
                
                  if (c !== EQ) return c;
              }
              if (a.length === b.length) return EQ;
              else if (a.length < b.length) return LT;
              else return GT;
          } else if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else if (typeof b === 'number') return GT;
          else if (typeof b === 'string') return GT;
          else return LT;
      }
      else {
          if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else if (typeof b === 'number') return GT;
          else if (typeof b === 'string') return GT;
          else if (isArray(b)) return GT;
          else {
              var akeys = keys(a);
              var bkeys = keys(b);
            
              var keys = akeys.concat(bkeys).sort();
            
              for (var i = 0; i < keys.length; i++) {
                  var k = keys[i];
                
                  if (a[k] === undefined) return LT;
                  else if (b[k] === undefined) return GT;
                
                  var c = _compare(EQ, GT, LT, a[k], b[k]);
                
                  if (c !== EQ) return c;
              }
            
              if (akeys.length === bkeys.length) return EQ;
              else if (akeys.length < bkeys.length) return LT;
              else return GT;
          }
      }
  };

  exports._compare = _compare;
 
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap

  exports._copy = function (m) {
    var r = {};
    for (var k in m) {
      if (m.hasOwnProperty(k)) {
        r[k] = m[k];
      }
    }
    return r;
  };

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 2
  exports._fmapStrMap = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (m0.hasOwnProperty(k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  // jshint maxparams: 1
  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          function g (k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (m.hasOwnProperty(k)) {
              mz = bind(mz)(g(k));
            }
          }
          return mz;
        };
      };
    };
  };

  // jshint maxparams: 4
  exports._foldSCStrMap = function (m, z, f, fromMaybe) {
    for (var k in m) {
      if (m.hasOwnProperty(k)) {
        var maybeR = f(z)(k)(m[k]);
        var r = fromMaybe(null)(maybeR);
        if (r === null) return z;
        else z = r;
      }
    }
    return z;
  };

  // jshint maxparams: 1
  exports.all = function (f) {
    return function (m) {
      for (var k in m) {
        if (m.hasOwnProperty(k) && !f(k)(m[k])) return false;
      }
      return true;
    };
  };

  exports.size = function (m) {
    var s = 0;
    for (var k in m) {
      if (m.hasOwnProperty(k)) {
        ++s;
      }
    }
    return s;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  // jshint maxparams: 2
  exports._unsafeDeleteStrMap = function (m, k) {
    delete m[k];
    return m;
  };

  // jshint maxparams: 4
  exports._lookupST = function (no, yes, k, m) {
    return function () {
      return k in m ? yes(m[k]) : no;
    };
  };

  function _collect (f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports._collect = _collect;

  exports.keys = Object.keys || _collect(function (k) {
    return function () { return k; };
  });
 
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var updateAt = function (v) {
      return function (x) {
          return function (v1) {
              if (v === 0 && v1 instanceof Cons) {
                  return new Data_Maybe.Just(new Cons(x, v1.value1));
              };
              if (v1 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(updateAt(v - 1)(x)(v1.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 270, column 1 - line 271, column 1: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 251, column 1 - line 252, column 1: " + [ v.constructor.name ]);
  };
  var span = function (p) {
      return function (v) {
          if (v instanceof Cons && p(v.value0)) {
              var $114 = span(p)(v.value1);
              return {
                  init: new Cons(v.value0, $114.init), 
                  rest: $114.rest
              };
          };
          return {
              init: Nil.value, 
              rest: v
          };
      };
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Cons && v1 instanceof Cons) {
                  if (Prelude["=="](Prelude.eqOrdering)(cmp(v.value0)(v1.value0))(Prelude.GT.value)) {
                      return new Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Prelude.otherwise) {
                      return new Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Nil) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List line 444, column 1 - line 445, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              return new Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && v.value1 instanceof Nil) {
                  return v.value0;
              };
              var __tco_v = mergePairs(v);
              v = __tco_v;
              continue tco;
          };
      };
      var sequences = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              if (Prelude["=="](Prelude.eqOrdering)(cmp(v.value0)(v.value1.value0))(Prelude.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Prelude.otherwise) {
                  return ascending(v.value1.value0)(Cons.create(v.value0))(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function (__copy_a) {
          return function (__copy_as) {
              return function (__copy_v) {
                  var a = __copy_a;
                  var as = __copy_as;
                  var v = __copy_v;
                  tco: while (true) {
                      var a1 = a;
                      var as1 = as;
                      if (v instanceof Cons && Prelude["=="](Prelude.eqOrdering)(cmp(a1)(v.value0))(Prelude.GT.value)) {
                          var __tco_a = v.value0;
                          var __tco_as = new Cons(a1, as1);
                          var __tco_v = v.value1;
                          a = __tco_a;
                          as = __tco_as;
                          v = __tco_v;
                          continue tco;
                      };
                      return new Cons(new Cons(a, as), sequences(v));
                  };
              };
          };
      };
      var ascending = function (a) {
          return function (as) {
              return function (v) {
                  if (v instanceof Cons && Prelude["/="](Prelude.eqOrdering)(cmp(a)(v.value0))(Prelude.GT.value)) {
                      return ascending(v.value0)(function (ys) {
                          return as(new Cons(a, ys));
                      })(v.value1);
                  };
                  return new Cons(as(singleton(a)), sequences(v));
              };
          };
      };
      return function ($345) {
          return mergeAll(sequences($345));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Prelude.compare(dictOrd))(xs);
      };
  };
  var showList = function (dictShow) {
      return new Prelude.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          if (v instanceof Cons) {
              return "Cons (" + (Prelude.show(dictShow)(v.value0) + (") (" + (Prelude.show(showList(dictShow))(v.value1) + ")")));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      });
  };
  var semigroupList = new Prelude.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Nil) {
                      return acc1;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 1 - line 369, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var snoc = function (xs) {
      return function (x) {
          return reverse(new Cons(x, reverse(xs)));
      };
  };
  var take = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var acc = __copy_acc;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      var acc1 = acc;
                      if (v === 0) {
                          return reverse(acc1);
                      };
                      var acc1 = acc;
                      if (v1 instanceof Nil) {
                          return reverse(acc1);
                      };
                      if (v1 instanceof Cons) {
                          var __tco_acc = new Cons(v1.value0, acc);
                          var __tco_v = v - 1;
                          var __tco_v1 = v1.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 490, column 1 - line 491, column 1: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go(Nil.value);
  })();
  var takeWhile = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Cons && p(v.value0)) {
                      var __tco_acc = new Cons(v.value0, acc1);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  return reverse(acc);
              };
          };
      };
      return go(Nil.value);
  };
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function (__copy_source) {
              return function (__copy_memo) {
                  var source = __copy_source;
                  var memo = __copy_memo;
                  tco: while (true) {
                      var $168 = f(source);
                      if ($168 instanceof Data_Maybe.Nothing) {
                          return reverse(memo);
                      };
                      if ($168 instanceof Data_Maybe.Just) {
                          var __tco_memo = new Cons($168.value0.value0, memo);
                          source = $168.value0.value1;
                          memo = __tco_memo;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 748, column 1 - line 755, column 1: " + [ $168.constructor.name ]);
                  };
              };
          };
          return go(b)(Nil.value);
      };
  });
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_acc) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (v instanceof Nil) {
                                  return acc;
                              };
                              if (v1 instanceof Nil) {
                                  return acc;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_acc = new Cons(f(v.value0)(v1.value0), acc);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 654, column 1 - line 655, column 1: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Nil.value);
              };
              if (Prelude.otherwise) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(replicateM(dictMonad)(n - 1)(m))(function (v1) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Cons(v, v1));
                      });
                  });
              };
              throw new Error("Failed pattern match: " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  var replicate = function (n) {
      return function (value) {
          var go = function (__copy_n1) {
              return function (__copy_rest) {
                  var n1 = __copy_n1;
                  var rest = __copy_rest;
                  tco: while (true) {
                      if (n1 <= 0) {
                          return rest;
                      };
                      if (Prelude.otherwise) {
                          var __tco_n1 = n1 - 1;
                          var __tco_rest = new Cons(value, rest);
                          n1 = __tco_n1;
                          rest = __tco_rest;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 148, column 1 - line 149, column 1: " + [ n1.constructor.name, rest.constructor.name ]);
                  };
              };
          };
          return go(n)(Nil.value);
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $191 = start > end;
                  if ($191) {
                      return 1;
                  };
                  if (!$191) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ $191.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var $$null = function (v) {
      if (v instanceof Nil) {
          return true;
      };
      return false;
  };
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var mapMaybe = function (f) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Nil) {
                      return reverse(acc1);
                  };
                  if (v instanceof Cons) {
                      var $195 = f(v.value0);
                      if ($195 instanceof Data_Maybe.Nothing) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if ($195 instanceof Data_Maybe.Just) {
                          var __tco_acc = new Cons($195.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 420, column 1 - line 421, column 1: " + [ $195.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List line 420, column 1 - line 421, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())(Nil.value));
          };
      };
  };
  var last = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v instanceof Cons && v.value1 instanceof Nil) {
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Cons) {
              var __tco_v = v.value1;
              v = __tco_v;
              continue tco;
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var insertBy = function (cmp) {
      return function (x) {
          return function (v) {
              if (v instanceof Nil) {
                  return new Cons(x, Nil.value);
              };
              if (v instanceof Cons) {
                  var $208 = cmp(x)(v.value0);
                  if ($208 instanceof Prelude.GT) {
                      return new Cons(v.value0, insertBy(cmp)(x)(v.value1));
                  };
                  return new Cons(x, v);
              };
              throw new Error("Failed pattern match: " + [ cmp.constructor.name, x.constructor.name, v.constructor.name ]);
          };
      };
  };
  var insertAt = function (v) {
      return function (x) {
          return function (v1) {
              if (v === 0) {
                  return new Data_Maybe.Just(new Cons(x, v1));
              };
              if (v1 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(insertAt(v - 1)(x)(v1.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Prelude.compare(dictOrd));
  };
  var init = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      var go = function (__copy_v1) {
          return function (__copy_acc) {
              var v1 = __copy_v1;
              var acc = __copy_acc;
              tco: while (true) {
                  if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                      return acc;
                  };
                  if (v1 instanceof Cons) {
                      var __tco_v1 = v1.value1;
                      var __tco_acc = new Cons(v1.value0, acc);
                      v1 = __tco_v1;
                      acc = __tco_acc;
                      continue tco;
                  };
                  return acc;
              };
          };
      };
      return Data_Maybe.Just.create(reverse(go(v)(Nil.value)));
  };
  var index = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v instanceof Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Cons && v1 === 0) {
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Cons) {
                  var __tco_v = v.value1;
                  var __tco_v1 = v1 - 1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var $bang$bang = index;
  var head = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 236, column 1 - line 237, column 1: " + [ v.constructor.name ]);
  };
  var groupBy = function (eq) {
      return function (v) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              var $234 = span(eq(v.value0))(v.value1);
              return new Cons(new Cons(v.value0, $234.init), groupBy(eq)($234.rest));
          };
          throw new Error("Failed pattern match: " + [ eq.constructor.name, v.constructor.name ]);
      };
  };
  var group = function (dictEq) {
      return groupBy(Prelude["=="](dictEq));
  };
  var group$prime = function (dictOrd) {
      return function ($346) {
          return group(dictOrd["__superclass_Prelude.Eq_0"]())(sort(dictOrd)($346));
      };
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 731, column 1 - line 738, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromList = function (dictUnfoldable) {
      return toUnfoldable(dictUnfoldable);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($347) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($347));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_o) {
          return function (__copy_b) {
              return function (__copy_v) {
                  var o = __copy_o;
                  var b = __copy_b;
                  var v = __copy_v;
                  tco: while (true) {
                      var b1 = b;
                      if (v instanceof Nil) {
                          return b1;
                      };
                      if (v instanceof Cons) {
                          var __tco_o = o;
                          var __tco_b = o(b)(v.value0);
                          var __tco_v = v.value1;
                          o = __tco_o;
                          b = __tco_b;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (o) {
      return function (b) {
          return function (v) {
              if (v instanceof Nil) {
                  return b;
              };
              if (v instanceof Cons) {
                  return o(v.value0)(Data_Foldable.foldr(foldableList)(o)(b)(v.value1));
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, v.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Nil) {
              return Prelude.pure(dictApplicative)(Nil.value);
          };
          if (v instanceof Cons) {
              return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Nil) {
                  return Prelude.pure(dictApplicative)(Nil.value);
              };
              if (v instanceof Cons) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(v.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(f)(v.value1));
              };
              throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var unzip = Data_Foldable.foldr(foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(new Cons(v.value0, v1.value0), new Cons(v.value1, v1.value1));
      };
  })(new Data_Tuple.Tuple(Nil.value, Nil.value));
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return function (v) {
                  if (v instanceof Nil) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(a);
                  };
                  if (v instanceof Cons) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(f(a)(v.value0))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(v.value1);
                      });
                  };
                  throw new Error("Failed pattern match: " + [ f.constructor.name, a.constructor.name, v.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function (__copy_n) {
          return function (__copy_v) {
              var n = __copy_n;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Cons) {
                      if (fn(v.value0)) {
                          return new Data_Maybe.Just(n);
                      };
                      if (Prelude.otherwise) {
                          var __tco_n = n + 1 | 0;
                          var __tco_v = v.value1;
                          n = __tco_n;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  if (v instanceof Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 301, column 1 - line 302, column 1: " + [ n.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(0);
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude["-"](Prelude.ringInt)(length(xs) - 1))(findIndex(fn)(reverse(xs)));
      };
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return function (v) {
              if (v instanceof Nil) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Nil.value);
              };
              if (v instanceof Cons) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(p(v.value0))(function (v1) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(filterM(dictMonad)(p)(v.value1))(function (v2) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                              if (v1) {
                                  return new Cons(v.value0, v2);
                              };
                              if (!v1) {
                                  return v2;
                              };
                              throw new Error("Failed pattern match: " + [ v1.constructor.name ]);
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match: " + [ p.constructor.name, v.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Nil) {
                      return reverse(acc1);
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Prelude.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 391, column 1 - line 392, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var intersectBy = function (eq) {
      return function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              return filter(function (x) {
                  return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(v1);
              })(v);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Prelude["=="](dictEq));
  };
  var nubBy = function ($eq$eq) {
      return function (v) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, nubBy($eq$eq)(filter(function (y) {
                  return !$eq$eq(v.value0)(y);
              })(v.value1)));
          };
          throw new Error("Failed pattern match: " + [ $eq$eq.constructor.name, v.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Prelude.eq(dictEq));
  };
  var eqList = function (dictEq) {
      return new Prelude.Eq(function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_v2) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var v2 = __copy_v2;
                          tco: while (true) {
                              if (!v2) {
                                  return false;
                              };
                              if (v instanceof Nil && v1 instanceof Nil) {
                                  return v2;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_v2 = v2 && Prelude["=="](dictEq)(v1.value0)(v.value0);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  v2 = __tco_v2;
                                  continue tco;
                              };
                              return false;
                          };
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      });
  };
  var ordList = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqList(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return Prelude.EQ.value;
                          };
                          if (v instanceof Nil) {
                              return Prelude.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              return Prelude.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var $303 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                              if ($303 instanceof Prelude.EQ) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              return $303;
                          };
                          throw new Error("Failed pattern match at Data.List line 713, column 1 - line 724, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
              return go(xs)(ys);
          };
      });
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && p(v.value0)) {
                  var __tco_v = v.value1;
                  v = __tco_v;
                  continue tco;
              };
              return v;
          };
      };
      return go;
  };
  var drop = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v === 0) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v1 instanceof Cons) {
                  var __tco_v = v - 1;
                  var __tco_v1 = v1.value1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start)(drop(start)(xs));
          };
      };
  };
  var deleteBy = function ($eq$eq) {
      return function (x) {
          return function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons && $eq$eq(x)(v.value0)) {
                  return v.value1;
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, deleteBy($eq$eq)(x)(v.value1));
              };
              throw new Error("Failed pattern match: " + [ $eq$eq.constructor.name, x.constructor.name, v.constructor.name ]);
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Prelude["=="](dictEq));
  };
  var deleteAt = function (v) {
      return function (v1) {
          if (v === 0 && v1 instanceof Cons) {
              return new Data_Maybe.Just(v1.value1);
          };
          if (v1 instanceof Cons) {
              return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(deleteAt(v - 1)(v1.value1));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Prelude["=="](dictEq));
  };
  var $bslash$bslash = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(dictEq)));
  };
  var concatMap = function (f) {
      return function (v) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(f(v.value0))(concatMap(f)(v.value1));
          };
          throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
      };
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, function (v) {
      return function (xs) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(v.value0)(xs))(Prelude["<*>"](applyList)(v.value1)(xs));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, xs.constructor.name ]);
      };
  });
  var bindList = new Prelude.Bind(function () {
      return applyList;
  }, Prelude.flip(concatMap));
  var concat = function (v) {
      return Prelude[">>="](bindList)(v)(Prelude.id(Prelude.categoryFn));
  };
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  var monadList = new Prelude.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var alterAt = function (v) {
      return function (f) {
          return function (v1) {
              if (v === 0 && v1 instanceof Cons) {
                  return Data_Maybe.Just.create((function () {
                      var $339 = f(v1.value0);
                      if ($339 instanceof Data_Maybe.Nothing) {
                          return v1.value1;
                      };
                      if ($339 instanceof Data_Maybe.Just) {
                          return new Cons($339.value0, v1.value1);
                      };
                      throw new Error("Failed pattern match: " + [ $339.constructor.name ]);
                  })());
              };
              if (v1 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(alterAt(v - 1)(f)(v1.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($348) {
              return Data_Maybe.Just.create(f($348));
          });
      };
  };
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Prelude.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return plusList;
  }, function () {
      return applicativeList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["foldM"] = foldM;
  exports["unzip"] = unzip;
  exports["zip"] = zip;
  exports["zipWithA"] = zipWithA;
  exports["zipWith"] = zipWith;
  exports["intersectBy"] = intersectBy;
  exports["intersect"] = intersect;
  exports["\\\\"] = $bslash$bslash;
  exports["deleteBy"] = deleteBy;
  exports["delete"] = $$delete;
  exports["unionBy"] = unionBy;
  exports["union"] = union;
  exports["nubBy"] = nubBy;
  exports["nub"] = nub;
  exports["groupBy"] = groupBy;
  exports["group'"] = group$prime;
  exports["group"] = group;
  exports["span"] = span;
  exports["dropWhile"] = dropWhile;
  exports["drop"] = drop;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["slice"] = slice;
  exports["sortBy"] = sortBy;
  exports["sort"] = sort;
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["filterM"] = filterM;
  exports["filter"] = filter;
  exports["concatMap"] = concatMap;
  exports["concat"] = concat;
  exports["reverse"] = reverse;
  exports["alterAt"] = alterAt;
  exports["modifyAt"] = modifyAt;
  exports["updateAt"] = updateAt;
  exports["deleteAt"] = deleteAt;
  exports["insertAt"] = insertAt;
  exports["findLastIndex"] = findLastIndex;
  exports["findIndex"] = findIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["elemIndex"] = elemIndex;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports["insertBy"] = insertBy;
  exports["insert"] = insert;
  exports["snoc"] = snoc;
  exports[":"] = $colon;
  exports["length"] = length;
  exports["null"] = $$null;
  exports["many"] = many;
  exports["some"] = some;
  exports["replicateM"] = replicateM;
  exports["replicate"] = replicate;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["ordList"] = ordList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadPlusList"] = monadPlusList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.peekImpl = function (just) {
    return function (nothing) {
      return function (m) {
        return function (k) {
          return function () {
            return {}.hasOwnProperty.call(m, k) ? just(m[k]) : nothing;
          };
        };
      };
    };
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (m) {
    return function (k) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
 
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];     
  var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["peek"] = peek;
  exports["delete"] = $foreign["delete"];
  exports["poke"] = $foreign.poke;
  exports["new"] = $foreign["new"];;
 
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List = PS["Data.List"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];     
  var values = function ($38) {
      return Data_List.toList(Data_Foldable.foldableArray)($foreign._collect(function (v) {
          return function (v1) {
              return v1;
          };
      })($38));
  };
  var toList = function ($39) {
      return Data_List.toList(Data_Foldable.foldableArray)($foreign._collect(Data_Tuple.Tuple.create)($39));
  };
  var thawST = $foreign._copyEff;
  var showStrMap = function (dictShow) {
      return new Prelude.Show(function (m) {
          return "fromList " + Prelude.show(Data_List.showList(Data_Tuple.showTuple(Prelude.showString)(dictShow)))(toList(m));
      });
  };
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var singleton = function (k) {
      return function (v) {
          return pureST(function __do() {
              var v1 = Data_StrMap_ST["new"]();
              Data_StrMap_ST.poke(v1)(k)(v)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v1)();
          });
      };
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              f(v)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          });
      };
  };
  var member = Data_Function.runFn4($foreign._lookup)(false)(Prelude["const"](true));
  var lookup = Data_Function.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isSubmap = function (dictEq) {
      return function (m1) {
          return function (m2) {
              var f = function (k) {
                  return function (v) {
                      return $foreign._lookup(false, Prelude["=="](dictEq)(v), k, m2);
                  };
              };
              return $foreign.all(f)(m1);
          };
      };
  };
  var isEmpty = $foreign.all(function (v) {
      return function (v1) {
          return false;
      };
  });
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_StrMap_ST.poke(s)(k)(v);
          });
      };
  };
  var functorStrMap = new Prelude.Functor(function (f) {
      return function (m) {
          return $foreign._fmapStrMap(m, f);
      };
  });
  var fromFoldableWith = function (dictFoldable) {
      return function (f) {
          return function (l) {
              return pureST(function __do() {
                  var v = Data_StrMap_ST["new"]();
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                      return Prelude[">>="](Control_Monad_Eff.bindEff)($foreign._lookupST(v1.value1, f(v1.value1), v1.value0, v))(Data_StrMap_ST.poke(v)(v1.value0));
                  })();
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
              });
          };
      };
  };
  var fromListWith = fromFoldableWith(Data_List.foldableList);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                  return Data_StrMap_ST.poke(v)(v1.value0)(v1.value1);
              })();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          });
      };
  };
  var fromList = fromFoldable(Data_List.foldableList);
  var freezeST = $foreign._copyEff;
  var foldMaybe = function (f) {
      return function (z) {
          return function (m) {
              return $foreign._foldSCStrMap(m, z, f, Data_Maybe.fromMaybe);
          };
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign._foldM(Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]()))(f)(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(z));
          };
      };
  };
  var semigroupStrMap = function (dictSemigroup) {
      return new Prelude.Semigroup(function (m1) {
          return function (m2) {
              return mutate(function (s1) {
                  return foldM(Control_Monad_Eff.monadEff)(function (s2) {
                      return function (k) {
                          return function (v2) {
                              return Data_StrMap_ST.poke(s2)(k)($foreign._lookup(v2, function (v1) {
                                  return Prelude["<>"](dictSemigroup)(v1)(v2);
                              }, k, m2));
                          };
                      };
                  })(s1)(m1);
              })(m2);
          };
      });
  };
  var monoidStrMap = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupStrMap(dictSemigroup);
      }, $foreign.empty);
  };
  var union = function (m) {
      return mutate(function (s) {
          return foldM(Control_Monad_Eff.monadEff)(Data_StrMap_ST.poke)(s)(m);
      });
  };
  var unions = Data_Foldable.foldl(Data_List.foldableList)(union)($foreign.empty);
  var fold = $foreign._foldM(Prelude["#"]);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableStrMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Prelude["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List.foldableList)(f)(z)(values(m));
          };
      };
  });
  var traversableStrMap = new Data_Traversable.Traversable(function () {
      return foldableStrMap;
  }, function () {
      return functorStrMap;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableStrMap)(dictApplicative)(Prelude.id(Prelude.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return Data_Foldable.foldr(Data_List.foldableList)(function (x) {
                  return function (acc) {
                      return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(union)(x))(acc);
                  };
              })(Prelude.pure(dictApplicative)($foreign.empty))(Prelude["<$>"](Data_List.functorList)(Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Prelude["<$>"](Data_List.functorList)(Data_Traversable.traverse(Data_Tuple.traversableTuple)(dictApplicative)(f))(toList(ms))));
          };
      };
  });
  var eqStrMap = function (dictEq) {
      return new Prelude.Eq(function (m1) {
          return function (m2) {
              return isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1);
          };
      });
  };
  var $$delete = function (k) {
      return mutate(function (s) {
          return Data_StrMap_ST["delete"](s)(k);
      });
  };
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var $36 = f(lookup(k)(m));
              if ($36 instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if ($36 instanceof Data_Maybe.Just) {
                  return insert(k)($36.value0)(m);
              };
              throw new Error("Failed pattern match at Data.StrMap line 177, column 1 - line 178, column 1: " + [ $36.constructor.name ]);
          };
      };
  };
  var update = function (f) {
      return function (k) {
          return function (m) {
              return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
          };
      };
  };
  exports["freezeST"] = freezeST;
  exports["thawST"] = thawST;
  exports["foldMaybe"] = foldMaybe;
  exports["foldM"] = foldM;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["isSubmap"] = isSubmap;
  exports["unions"] = unions;
  exports["union"] = union;
  exports["values"] = values;
  exports["update"] = update;
  exports["alter"] = alter;
  exports["member"] = member;
  exports["delete"] = $$delete;
  exports["fromListWith"] = fromListWith;
  exports["fromList"] = fromList;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["fromFoldable"] = fromFoldable;
  exports["toList"] = toList;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["singleton"] = singleton;
  exports["isEmpty"] = isEmpty;
  exports["functorStrMap"] = functorStrMap;
  exports["foldableStrMap"] = foldableStrMap;
  exports["traversableStrMap"] = traversableStrMap;
  exports["eqStrMap"] = eqStrMap;
  exports["showStrMap"] = showStrMap;
  exports["semigroupStrMap"] = semigroupStrMap;
  exports["monoidStrMap"] = monoidStrMap;
  exports["runST"] = $foreign.runST;
  exports["all"] = $foreign.all;
  exports["keys"] = $foreign.keys;
  exports["size"] = $foreign.size;
  exports["empty"] = $foreign.empty;;
 
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];
  var Data_StrMap = PS["Data.StrMap"];     
  var verbJsonType = function (def) {
      return function (f) {
          return function (fold) {
              return fold(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var showJson = new Prelude.Show($foreign._stringify);
  var showJNull = new Prelude.Show(function (v) {
      return "null";
  });
  var jsonZero = $foreign.fromNumber(0.0);
  var jsonTrue = $foreign.fromBoolean(true);
  var jsonSingletonObject = function (key) {
      return function (val) {
          return $foreign.fromObject(Data_StrMap.singleton(key)(val));
      };
  };
  var jsonSingletonArray = function (j) {
      return $foreign.fromArray([ j ]);
  };
  var jsonFalse = $foreign.fromBoolean(false);
  var jsonEmptyString = $foreign.fromString("");
  var jsonEmptyObject = $foreign.fromObject(Data_StrMap.empty);
  var jsonEmptyArray = $foreign.fromArray([  ]);
  var isJsonType = verbJsonType(false)(Prelude["const"](true));
  var foldJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), f, Prelude["const"](d), Prelude["const"](d), j);
          };
      };
  };
  var isString = isJsonType(foldJsonString);
  var toString = toJsonType(foldJsonString);
  var foldJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), f, j);
          };
      };
  };
  var isObject = isJsonType(foldJsonObject);
  var toObject = toJsonType(foldJsonObject);
  var foldJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Prelude["const"](d), Prelude["const"](d), f, Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), j);
          };
      };
  };
  var isNumber = isJsonType(foldJsonNumber);
  var toNumber = toJsonType(foldJsonNumber);
  var foldJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(f, Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(foldJsonNull);
  var toNull = toJsonType(foldJsonNull);
  var foldJsonBoolean = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Prelude["const"](d), f, Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), j);
          };
      };
  };
  var isBoolean = isJsonType(foldJsonBoolean);
  var toBoolean = toJsonType(foldJsonBoolean);
  var foldJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), f, Prelude["const"](d), j);
          };
      };
  };
  var isArray = isJsonType(foldJsonArray);
  var toArray = toJsonType(foldJsonArray);
  var foldJson = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (json) {
                              return $foreign._foldJson(a, b, c, d, e, f, json);
                          };
                      };
                  };
              };
          };
      };
  };
  var ordJson = new Prelude.Ord(function () {
      return eqJson;
  }, function (a) {
      return function (b) {
          return $foreign._compare(Prelude.EQ.value, Prelude.GT.value, Prelude.LT.value, a, b);
      };
  });
  var eqJson = new Prelude.Eq(function (j1) {
      return function (j2) {
          return Prelude["=="](Prelude.eqOrdering)(Prelude.compare(ordJson)(j1)(j2))(Prelude.EQ.value);
      };
  });
  var eqJNull = new Prelude.Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var ordJNull = new Prelude.Ord(function () {
      return eqJNull;
  }, function (v) {
      return function (v1) {
          return Prelude.EQ.value;
      };
  });
  exports["jsonSingletonObject"] = jsonSingletonObject;
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["jsonSingletonArray"] = jsonSingletonArray;
  exports["jsonEmptyArray"] = jsonEmptyArray;
  exports["jsonZero"] = jsonZero;
  exports["jsonTrue"] = jsonTrue;
  exports["jsonFalse"] = jsonFalse;
  exports["toObject"] = toObject;
  exports["toArray"] = toArray;
  exports["toString"] = toString;
  exports["toNumber"] = toNumber;
  exports["toBoolean"] = toBoolean;
  exports["toNull"] = toNull;
  exports["isObject"] = isObject;
  exports["isArray"] = isArray;
  exports["isString"] = isString;
  exports["isNumber"] = isNumber;
  exports["isBoolean"] = isBoolean;
  exports["isNull"] = isNull;
  exports["foldJsonObject"] = foldJsonObject;
  exports["foldJsonArray"] = foldJsonArray;
  exports["foldJsonString"] = foldJsonString;
  exports["foldJsonNumber"] = foldJsonNumber;
  exports["foldJsonBoolean"] = foldJsonBoolean;
  exports["foldJsonNull"] = foldJsonNull;
  exports["foldJson"] = foldJson;
  exports["eqJNull"] = eqJNull;
  exports["ordJNull"] = ordJNull;
  exports["showJNull"] = showJNull;
  exports["eqJson"] = eqJson;
  exports["ordJson"] = ordJson;
  exports["showJson"] = showJson;
  exports["jsonNull"] = $foreign.jsonNull;
  exports["fromObject"] = $foreign.fromObject;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromString"] = $foreign.fromString;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNull"] = $foreign.fromNull;;
 
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  // module Data.Argonaut.Parser

  exports._jsonParser = function(fail, succ, s) {
      try {
          return succ(JSON.parse(s));
      }
      catch(e) {
          return fail(e.message);
      }
  };
 
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Function = PS["Data.Function"];
  var Data_Either = PS["Data.Either"];     
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;;
 
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];     
  var Printer = function (printJson) {
      this.printJson = printJson;
  };
  var printerString = new Printer(Prelude.show(Data_Argonaut_Core.showJson));
  var printJson = function (dict) {
      return dict.printJson;
  };
  exports["Printer"] = Printer;
  exports["printJson"] = printJson;
  exports["printerString"] = printerString;;
 
})(PS["Data.Argonaut.Printer"] = PS["Data.Argonaut.Printer"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.Unsafe

  exports.unsafeIndex = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];     
  var tail = function (xs) {
      return Data_Array.slice(1)(Data_Array.length(xs))(xs);
  };
  var last = function (xs) {
      return $foreign.unsafeIndex(xs)(Data_Array.length(xs) - 1);
  };
  var init = function (xs) {
      return Data_Array.slice(0)(Data_Array.length(xs) - 1)(xs);
  };
  var head = function (xs) {
      return $foreign.unsafeIndex(xs)(0);
  };
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["head"] = head;
  exports["unsafeIndex"] = $foreign.unsafeIndex;;
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Clown = (function () {
      function Clown(value0) {
          this.value0 = value0;
      };
      Clown.create = function (value0) {
          return new Clown(value0);
      };
      return Clown;
  })();
  var runClown = function (v) {
      return v.value0;
  };
  var clownFunctor = new Prelude.Functor(function (v) {
      return function ($15) {
          return Clown.create(runClown($15));
      };
  });
  var clownBifunctor = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (v) {
              return function ($16) {
                  return Clown.create(Prelude.map(dictFunctor)(f)(runClown($16)));
              };
          };
      });
  };
  var clownBiapply = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return clownBifunctor(dictApply["__superclass_Prelude.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return new Clown(Prelude["<*>"](dictApply)(v.value0)(v1.value0));
          };
      });
  };
  var clownBiapplicative = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return clownBiapply(dictApplicative["__superclass_Prelude.Apply_0"]());
      }, function (a) {
          return function (v) {
              return new Clown(Prelude.pure(dictApplicative)(a));
          };
      });
  };
  exports["Clown"] = Clown;
  exports["runClown"] = runClown;
  exports["clownBifunctor"] = clownBifunctor;
  exports["clownFunctor"] = clownFunctor;
  exports["clownBiapply"] = clownBiapply;
  exports["clownBiapplicative"] = clownBiapplicative;;
 
})(PS["Data.Bifunctor.Clown"] = PS["Data.Bifunctor.Clown"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Flip = (function () {
      function Flip(value0) {
          this.value0 = value0;
      };
      Flip.create = function (value0) {
          return new Flip(value0);
      };
      return Flip;
  })();
  var runFlip = function (v) {
      return v.value0;
  };
  var flipFunctor = function (dictBifunctor) {
      return new Prelude.Functor(function (f) {
          return function ($13) {
              return Flip.create(Data_Bifunctor.lmap(dictBifunctor)(f)(runFlip($13)));
          };
      });
  };
  var flipBifunctor = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function ($14) {
                  return Flip.create(Data_Bifunctor.bimap(dictBifunctor)(g)(f)(runFlip($14)));
              };
          };
      });
  };
  var flipBiapply = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return flipBifunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return new Flip(Control_Biapply["<<*>>"](dictBiapply)(v.value0)(v1.value0));
          };
      });
  };
  var flipBiapplicative = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return flipBiapply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return function (b) {
              return new Flip(Control_Biapplicative.bipure(dictBiapplicative)(b)(a));
          };
      });
  };
  exports["Flip"] = Flip;
  exports["runFlip"] = runFlip;
  exports["flipBifunctor"] = flipBifunctor;
  exports["flipFunctor"] = flipFunctor;
  exports["flipBiapply"] = flipBiapply;
  exports["flipBiapplicative"] = flipBiapplicative;;
 
})(PS["Data.Bifunctor.Flip"] = PS["Data.Bifunctor.Flip"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Join = (function () {
      function Join(value0) {
          this.value0 = value0;
      };
      Join.create = function (value0) {
          return new Join(value0);
      };
      return Join;
  })();
  var runJoin = function (v) {
      return v.value0;
  };
  var joinFunctor = function (dictBifunctor) {
      return new Prelude.Functor(function (f) {
          return Prelude["<$>"](Prelude.functorFn)(Join.create)(function ($12) {
              return Data_Bifunctor.bimap(dictBifunctor)(f)(f)(runJoin($12));
          });
      });
  };
  var joinApply = function (dictBiapply) {
      return new Prelude.Apply(function () {
          return joinFunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return new Join(Control_Biapply["<<*>>"](dictBiapply)(v.value0)(v1.value0));
          };
      });
  };
  var joinApplicative = function (dictBiapplicative) {
      return new Prelude.Applicative(function () {
          return joinApply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return new Join(Control_Biapplicative.bipure(dictBiapplicative)(a)(a));
      });
  };
  exports["Join"] = Join;
  exports["runJoin"] = runJoin;
  exports["joinFunctor"] = joinFunctor;
  exports["joinApply"] = joinApply;
  exports["joinApplicative"] = joinApplicative;;
 
})(PS["Data.Bifunctor.Join"] = PS["Data.Bifunctor.Join"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Joker = (function () {
      function Joker(value0) {
          this.value0 = value0;
      };
      Joker.create = function (value0) {
          return new Joker(value0);
      };
      return Joker;
  })();
  var runJoker = function (v) {
      return v.value0;
  };
  var jokerFunctor = function (dictFunctor) {
      return new Prelude.Functor(function (g) {
          return function ($15) {
              return Joker.create(Prelude.map(dictFunctor)(g)(runJoker($15)));
          };
      });
  };
  var jokerBifunctor = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (v) {
          return function (g) {
              return function ($16) {
                  return Joker.create(Prelude.map(dictFunctor)(g)(runJoker($16)));
              };
          };
      });
  };
  var jokerBiapply = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return jokerBifunctor(dictApply["__superclass_Prelude.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return new Joker(Prelude["<*>"](dictApply)(v.value0)(v1.value0));
          };
      });
  };
  var jokerBiapplicative = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return jokerBiapply(dictApplicative["__superclass_Prelude.Apply_0"]());
      }, function (v) {
          return function (b) {
              return new Joker(Prelude.pure(dictApplicative)(b));
          };
      });
  };
  exports["Joker"] = Joker;
  exports["runJoker"] = runJoker;
  exports["jokerBifunctor"] = jokerBifunctor;
  exports["jokerFunctor"] = jokerFunctor;
  exports["jokerBiapply"] = jokerBiapply;
  exports["jokerBiapplicative"] = jokerBiapplicative;;
 
})(PS["Data.Bifunctor.Joker"] = PS["Data.Bifunctor.Joker"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Pair = (function () {
      function Pair(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Pair.create = function (value0) {
          return function (value1) {
              return new Pair(value0, value1);
          };
      };
      return Pair;
  })();
  var productBifunctor = function (dictBifunctor) {
      return function (dictBifunctor1) {
          return new Data_Bifunctor.Bifunctor(function (f) {
              return function (g) {
                  return function (v) {
                      return new Pair(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                  };
              };
          });
      };
  };
  var productBiapply = function (dictBiapply) {
      return function (dictBiapply1) {
          return new Control_Biapply.Biapply(function () {
              return productBifunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(dictBiapply1["__superclass_Data.Bifunctor.Bifunctor_0"]());
          }, function (v) {
              return function (v1) {
                  return new Pair(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var productBiapplicative = function (dictBiapplicative) {
      return function (dictBiapplicative1) {
          return new Control_Biapplicative.Biapplicative(function () {
              return productBiapply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]())(dictBiapplicative1["__superclass_Control.Biapply.Biapply_0"]());
          }, function (a) {
              return function (b) {
                  return new Pair(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
              };
          });
      };
  };
  exports["Pair"] = Pair;
  exports["productBifunctor"] = productBifunctor;
  exports["productBiapply"] = productBiapply;
  exports["productBiapplicative"] = productBiapplicative;;
 
})(PS["Data.Bifunctor.Product"] = PS["Data.Bifunctor.Product"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Wrap = (function () {
      function Wrap(value0) {
          this.value0 = value0;
      };
      Wrap.create = function (value0) {
          return new Wrap(value0);
      };
      return Wrap;
  })();
  var unwrap = function (v) {
      return v.value0;
  };
  var wrapBifunctor = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function ($13) {
                  return Wrap.create(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(unwrap($13)));
              };
          };
      });
  };
  var wrapBiapply = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return wrapBifunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return new Wrap(Control_Biapply["<<*>>"](dictBiapply)(v.value0)(v1.value0));
          };
      });
  };
  var wrapBiapplicative = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return wrapBiapply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return function (b) {
              return new Wrap(Control_Biapplicative.bipure(dictBiapplicative)(a)(b));
          };
      });
  };
  var wrapFunctor = function (dictBifunctor) {
      return new Prelude.Functor(function (f) {
          return function ($14) {
              return Wrap.create(Data_Bifunctor.rmap(dictBifunctor)(f)(unwrap($14)));
          };
      });
  };
  exports["Wrap"] = Wrap;
  exports["unwrap"] = unwrap;
  exports["wrapBifunctor"] = wrapBifunctor;
  exports["wrapFunctor"] = wrapFunctor;
  exports["wrapBiapply"] = wrapBiapply;
  exports["wrapBiapplicative"] = wrapBiapplicative;;
 
})(PS["Data.Bifunctor.Wrap"] = PS["Data.Bifunctor.Wrap"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];     
  var either9of9 = function (v) {
      return new Data_Either.Right(v);
  };
  var either9of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either8of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either8of8 = function (v) {
      return new Data_Either.Right(v);
  };
  var either8of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either7of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either7of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either7of7 = function (v) {
      return new Data_Either.Right(v);
  };
  var either7of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either6of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either6of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either6of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either6of6 = function (v) {
      return new Data_Either.Right(v);
  };
  var either6of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either5of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either5of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either5of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either5of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either5of5 = function (v) {
      return new Data_Either.Right(v);
  };
  var either5of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either4of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either4of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either4of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either4of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either4of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either4of4 = function (v) {
      return new Data_Either.Right(v);
  };
  var either4of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
  };
  var either3of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
  };
  var either3of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either3of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either3of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either3of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either3of4 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either3of3 = function (v) {
      return new Data_Either.Right(v);
  };
  var either3of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))))));
  };
  var either2of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))))));
  };
  var either2of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
  };
  var either2of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either2of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either2of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either2of4 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either2of3 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either2of2 = Data_Either.Right.create;
  var either2of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))))));
  };
  var either2 = Data_Either.either;
  var either3 = function (a) {
      return function (b) {
          return function (z) {
              return Data_Either.either(either2(a)(b))(z);
          };
      };
  };
  var either4 = function (a) {
      return function (b) {
          return function (c) {
              return function (z) {
                  return Data_Either.either(either3(a)(b)(c))(z);
              };
          };
      };
  };
  var either5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (z) {
                      return Data_Either.either(either4(a)(b)(c)(d))(z);
                  };
              };
          };
      };
  };
  var either6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (z) {
                          return Data_Either.either(either5(a)(b)(c)(d)(e))(z);
                      };
                  };
              };
          };
      };
  };
  var either7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (z) {
                              return Data_Either.either(either6(a)(b)(c)(d)(e)(f))(z);
                          };
                      };
                  };
              };
          };
      };
  };
  var either8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (z) {
                                  return Data_Either.either(either7(a)(b)(c)(d)(e)(f)(g))(z);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (z) {
                                      return Data_Either.either(either8(a)(b)(c)(d)(e)(f)(g)(h))(z);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either1of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))))))));
  };
  var either1of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))))));
  };
  var either1of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))))));
  };
  var either1of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))));
  };
  var either1of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))));
  };
  var either1of4 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)));
  };
  var either1of3 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(v));
  };
  var either1of2 = Data_Either.Left.create;
  var either1of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))))))));
  };
  var either10of10 = function (v) {
      return new Data_Either.Right(v);
  };
  var either10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (z) {
                                          return Data_Either.either(either9(a)(b)(c)(d)(e)(f)(g)(h)(i))(z);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["either10"] = either10;
  exports["either9"] = either9;
  exports["either8"] = either8;
  exports["either7"] = either7;
  exports["either6"] = either6;
  exports["either5"] = either5;
  exports["either4"] = either4;
  exports["either3"] = either3;
  exports["either2"] = either2;
  exports["either10of10"] = either10of10;
  exports["either9of10"] = either9of10;
  exports["either8of10"] = either8of10;
  exports["either7of10"] = either7of10;
  exports["either6of10"] = either6of10;
  exports["either5of10"] = either5of10;
  exports["either4of10"] = either4of10;
  exports["either3of10"] = either3of10;
  exports["either2of10"] = either2of10;
  exports["either1of10"] = either1of10;
  exports["either9of9"] = either9of9;
  exports["either8of9"] = either8of9;
  exports["either7of9"] = either7of9;
  exports["either6of9"] = either6of9;
  exports["either5of9"] = either5of9;
  exports["either4of9"] = either4of9;
  exports["either3of9"] = either3of9;
  exports["either2of9"] = either2of9;
  exports["either1of9"] = either1of9;
  exports["either8of8"] = either8of8;
  exports["either7of8"] = either7of8;
  exports["either6of8"] = either6of8;
  exports["either5of8"] = either5of8;
  exports["either4of8"] = either4of8;
  exports["either3of8"] = either3of8;
  exports["either2of8"] = either2of8;
  exports["either1of8"] = either1of8;
  exports["either7of7"] = either7of7;
  exports["either6of7"] = either6of7;
  exports["either5of7"] = either5of7;
  exports["either4of7"] = either4of7;
  exports["either3of7"] = either3of7;
  exports["either2of7"] = either2of7;
  exports["either1of7"] = either1of7;
  exports["either6of6"] = either6of6;
  exports["either5of6"] = either5of6;
  exports["either4of6"] = either4of6;
  exports["either3of6"] = either3of6;
  exports["either2of6"] = either2of6;
  exports["either1of6"] = either1of6;
  exports["either5of5"] = either5of5;
  exports["either4of5"] = either4of5;
  exports["either3of5"] = either3of5;
  exports["either2of5"] = either2of5;
  exports["either1of5"] = either1of5;
  exports["either4of4"] = either4of4;
  exports["either3of4"] = either3of4;
  exports["either2of4"] = either2of4;
  exports["either1of4"] = either1of4;
  exports["either3of3"] = either3of3;
  exports["either2of3"] = either2of3;
  exports["either1of3"] = either1of3;
  exports["either2of2"] = either2of2;
  exports["either1of2"] = either1of2;;
 
})(PS["Data.Either.Nested"] = PS["Data.Either.Nested"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign.Keys

  exports.unsafeKeys = Object.keys || function (value) {
    var keys = [];
    for (var prop in value) {
      if (Object.prototype.hasOwnProperty.call(value, prop)) {
        keys.push(prop);
      }
    }
    return keys;
  };
 
})(PS["Data.Foreign.Keys"] = PS["Data.Foreign.Keys"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign.Keys"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];     
  var keys = function (value) {
      if (Data_Foreign.isNull(value)) {
          return Data_Either.Left.create(new Data_Foreign.TypeMismatch("object", "null"));
      };
      if (Data_Foreign.isUndefined(value)) {
          return Data_Either.Left.create(new Data_Foreign.TypeMismatch("object", "undefined"));
      };
      if (Prelude["=="](Prelude.eqString)(Data_Foreign.typeOf(value))("object")) {
          return Data_Either.Right.create($foreign.unsafeKeys(value));
      };
      return Data_Either.Left.create(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value)));
  };
  exports["keys"] = keys;;
 
})(PS["Data.Foreign.Keys"] = PS["Data.Foreign.Keys"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var runList = function (v) {
      return v;
  };
  var step = function ($220) {
      return Data_Lazy.force(runList($220));
  };
  var semigroupList = new Prelude.Semigroup(function (xs) {
      return function (ys) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return step(ys);
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 671, column 5 - line 672, column 5: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  });
  var showList = function (dictShow) {
      return new Prelude.Show(function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return "Nil";
              };
              if (v instanceof Cons) {
                  return "Cons (" + (Prelude.show(dictShow)(v.value0) + (") (" + (go(step(v.value1)) + ")")));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 640, column 1 - line 646, column 1: " + [ v.constructor.name ]);
          };
          return "fromStrict (" + (go(step(xs)) + ")");
      });
  };
  var uncons = function (xs) {
      var $73 = step(xs);
      if ($73 instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if ($73 instanceof Cons) {
          return new Data_Maybe.Just({
              head: $73.value0, 
              tail: $73.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 281, column 1 - line 282, column 1: " + [ $73.constructor.name ]);
  };
  var tail = function (xs) {
      return Prelude["<$>"](Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      })(uncons(xs));
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var take = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v === 0) {
                      return Nil.value;
                  };
                  if (v1 instanceof Nil) {
                      return Nil.value;
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, take(v - 1)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 448, column 3 - line 449, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Cons && p(v.value0)) {
                  return new Cons(v.value0, takeWhile(p)(v.value1));
              };
              return Nil.value;
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var updateAt = function (n) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v === 0 && v1 instanceof Cons) {
                          return new Cons(x, v1.value1);
                      };
                      if (v1 instanceof Cons) {
                          return new Cons(v1.value0, updateAt(v - 1)(x)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 344, column 3 - line 345, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
          };
      };
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      if (v instanceof Nil) {
                          return Nil.value;
                      };
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v instanceof Cons && v1 instanceof Cons) {
                          return new Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 615, column 3 - line 616, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Prelude["<*>"](Data_Lazy.applyLazy)(Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs)))(runList(ys));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var $$null = function ($221) {
      return Data_Maybe.isNothing(uncons($221));
  };
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, nil);
  var mapMaybe = function (f) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      var $97 = f(v.value0);
                      if ($97 instanceof Data_Maybe.Nothing) {
                          var __tco_v = step(v.value1);
                          v = __tco_v;
                          continue tco;
                      };
                      if ($97 instanceof Data_Maybe.Just) {
                          return new Cons($97.value0, mapMaybe(f)(v.value1));
                      };
                      throw new Error("Failed pattern match: " + [ $97.constructor.name ]);
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var length = function (xs) {
      var go = function (v) {
          if (v instanceof Nil) {
              return 0;
          };
          if (v instanceof Cons) {
              return 1 + go(step(v.value1)) | 0;
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 196, column 1 - line 197, column 1: " + [ v.constructor.name ]);
      };
      return go(step(xs));
  };
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($222) {
          return step(f($222));
      }));
  });
  var last = function (xs) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons) {
                  if ($$null(v.value1)) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (Prelude.otherwise) {
                      var __tco_v = step(v.value1);
                      v = __tco_v;
                      continue tco;
                  };
              };
              return Data_Maybe.Nothing.value;
          };
      };
      return go(step(xs));
  };
  var index = function (xs) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Cons && v1 === 0) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Cons) {
                      var __tco_v = step(v.value1);
                      var __tco_v1 = v1 - 1;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 293, column 1 - line 294, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      return go(step(xs));
  };
  var $bang$bang = index;
  var head = function (xs) {
      return Prelude["<$>"](Data_Maybe.functorMaybe)(function (v) {
          return v.head;
      })(uncons(xs));
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(f(v.value0), Prelude["<$>"](functorList)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 680, column 5 - line 681, column 5: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  });
  var fromStep = function ($223) {
      return List(Prelude.pure(Data_Lazy.applicativeLazy)($223));
  };
  var insertBy = function (cmp) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return new Cons(x, nil);
                  };
                  if (v instanceof Cons) {
                      var $117 = cmp(x)(v.value0);
                      if ($117 instanceof Prelude.GT) {
                          return new Cons(v.value0, insertBy(cmp)(x)(v.value1));
                      };
                      return new Cons(x, fromStep(v));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 234, column 3 - line 235, column 3: " + [ v.constructor.name ]);
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Prelude.compare(dictOrd));
  };
  var fromList = function (dictUnfoldable) {
      return toUnfoldable(dictUnfoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v instanceof Cons) {
                      return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(v.value0))(Data_Foldable.foldMap(foldableList)(dictMonoid)(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 699, column 5 - line 700, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  }, function (o) {
      return function (b) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      return Data_Foldable.foldl(foldableList)(o)(o(b)(v.value0))(v.value1);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 693, column 5 - line 694, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  }, function (o) {
      return function (b) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      return o(v.value0)(Data_Foldable.foldr(foldableList)(o)(b)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 687, column 5 - line 688, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  });
  var filter = function (p) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          return new Cons(v.value0, filter(p)(v.value1));
                      };
                      if (Prelude.otherwise) {
                          var __tco_v = step(v.value1);
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return filter(function (x) {
                  return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(ys);
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Prelude["=="](dictEq));
  };
  var nubBy = function (eq) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, nubBy(eq)(filter(function (y) {
                      return !eq(v.value0)(y);
                  })(v.value1)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 542, column 3 - line 543, column 3: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var nub = function (dictEq) {
      return nubBy(Prelude.eq(dictEq));
  };
  var eqList = function (dictEq) {
      return new Prelude.Eq(function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return true;
                          };
                          if (v instanceof Cons && (v1 instanceof Cons && Prelude["=="](dictEq)(v.value0)(v1.value0))) {
                              var __tco_v = step(v.value1);
                              var __tco_v1 = step(v1.value1);
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          return false;
                      };
                  };
              };
              return go(step(xs))(step(ys));
          };
      });
  };
  var ordList = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqList(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return Prelude.EQ.value;
                          };
                          if (v instanceof Nil) {
                              return Prelude.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              return Prelude.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var $143 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                              if ($143 instanceof Prelude.EQ) {
                                  var __tco_v = step(v.value1);
                                  var __tco_v1 = step(v1.value1);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              return $143;
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy line 654, column 1 - line 665, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
              return go(step(xs))(step(ys));
          };
      });
  };
  var dropWhile = function (p) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Cons && p(v.value0)) {
                      var __tco_v = step(v.value1);
                      v = __tco_v;
                      continue tco;
                  };
                  return fromStep(v);
              };
          };
          return go(step(xs));
      };
  };
  var drop = function (n) {
      return function (xs) {
          var go = function (__copy_v) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v === 0) {
                          return v1;
                      };
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v - 1;
                          var __tco_v1 = step(v1.value1);
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 465, column 1 - line 466, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var deleteBy = function (eq) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      if (eq(x)(v.value0)) {
                          return step(v.value1);
                      };
                      if (Prelude.otherwise) {
                          return new Cons(v.value0, deleteBy(eq)(x)(v.value1));
                      };
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 571, column 3 - line 572, column 3: " + [ v.constructor.name ]);
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Prelude["=="](dictEq));
  };
  var deleteAt = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v1 instanceof Nil) {
                      return Nil.value;
                  };
                  if (v === 0 && v1 instanceof Cons) {
                      return step(v1.value1);
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, deleteAt(v - 1)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 330, column 3 - line 331, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Prelude["=="](dictEq));
  };
  var $bslash$bslash = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(dictEq)));
  };
  var cycle = function (xs) {
      return Control_Lazy.fix(lazyList)(function (ys) {
          return Prelude["<>"](semigroupList)(xs)(ys);
      });
  };
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(cons)(nil);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var init = function (xs) {
      var go = function (v) {
          if (v instanceof Cons) {
              if ($$null(v.value1)) {
                  return new Data_Maybe.Just(nil);
              };
              if (Prelude.otherwise) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(cons(v.value0))(go(step(v.value1)));
              };
          };
          return Data_Maybe.Nothing.value;
      };
      return go(step(xs));
  };
  var insertAt = function (v) {
      return function (x) {
          return function (xs) {
              if (v === 0) {
                  return cons(x)(xs);
              };
              var go = function (v1) {
                  if (v1 instanceof Nil) {
                      return new Cons(x, nil);
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, insertAt(v - 1)(x)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 317, column 3 - line 318, column 3: " + [ v1.constructor.name ]);
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var iterate = function (f) {
      return function (x) {
          return Control_Lazy.fix(lazyList)(function (xs) {
              return cons(x)(Prelude["<$>"](functorList)(f)(xs));
          });
      };
  };
  var repeat = function (x) {
      return Control_Lazy.fix(lazyList)(function (xs) {
          return cons(x)(xs);
      });
  };
  var reverse = function (xs) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Nil) {
                      return acc1;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = cons(v.value0)(acc);
                      var __tco_v = step(v.value1);
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 383, column 1 - line 384, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(nil)(step(xs));
  };
  var singleton = function (a) {
      return cons(a)(nil);
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step$prime) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step$prime = __copy_step$prime;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return cons(s)(rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step$prime | 0;
                                      var __tco_e = e;
                                      var __tco_step$prime = step$prime;
                                      var __tco_rest = cons(s)(rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step$prime = __tco_step$prime;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List.Lazy line 164, column 1 - line 165, column 1: " + [ s.constructor.name, e.constructor.name, step$prime.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $184 = start > end;
                  if ($184) {
                      return 1;
                  };
                  if (!$184) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 164, column 1 - line 165, column 1: " + [ $184.constructor.name ]);
              })())(nil);
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 164, column 1 - line 165, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var span = function (p) {
      return function (xs) {
          var $185 = uncons(xs);
          if ($185 instanceof Data_Maybe.Just && p($185.value0.head)) {
              var $186 = span(p)($185.value0.tail);
              return {
                  init: cons($185.value0.head)($186.init), 
                  rest: $186.rest
              };
          };
          return {
              init: nil, 
              rest: xs
          };
      };
  };
  var groupBy = function (eq) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  var $193 = span(eq(v.value0))(v.value1);
                  return new Cons(cons(v.value0)($193.init), groupBy(eq)($193.rest));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 520, column 3 - line 521, column 3: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var group = function (dictEq) {
      return groupBy(Prelude["=="](dictEq));
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Prelude.pure(dictApplicative)(nil);
              };
              if (v instanceof Cons) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 720, column 5 - line 721, column 5: " + [ v.constructor.name ]);
          };
          return go(step(xs));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Prelude.pure(dictApplicative)(nil);
                  };
                  if (v instanceof Cons) {
                      return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(f(v.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 714, column 5 - line 715, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  });
  var $colon = cons;
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return nil;
              };
              if (v instanceof Data_Maybe.Just) {
                  return $colon(v.value0.value0)(Control_Lazy.defer(lazyList)(function (v1) {
                      return go(f(v.value0.value1));
                  }));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 702, column 1 - line 710, column 1: " + [ v.constructor.name ]);
          };
          return go(f(b));
      };
  });
  var concatMap = function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return step(Prelude["<>"](semigroupList)(f(v.value0))(concatMap(f)(v.value1)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 402, column 3 - line 403, column 3: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  var monadList = new Prelude.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var bindList = new Prelude.Bind(function () {
      return applyList;
  }, Prelude.flip(concatMap));
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, Prelude.ap(monadList));
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, singleton);
  var concat = function (v) {
      return Prelude[">>="](bindList)(v)(Prelude.id(Prelude.categoryFn));
  };
  var alterAt = function (n) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v === 0 && v1 instanceof Cons) {
                          var $214 = f(v1.value0);
                          if ($214 instanceof Data_Maybe.Nothing) {
                              return step(v1.value1);
                          };
                          if ($214 instanceof Data_Maybe.Just) {
                              return new Cons($214.value0, v1.value1);
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy line 370, column 3 - line 371, column 3: " + [ $214.constructor.name ]);
                      };
                      if (v1 instanceof Cons) {
                          return new Cons(v1.value0, alterAt(v - 1)(f)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 370, column 3 - line 371, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($224) {
              return Data_Maybe.Just.create(f($224));
          });
      };
  };
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Prelude.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, nil);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return plusList;
  }, function () {
      return applicativeList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["List"] = List;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["zip"] = zip;
  exports["zipWith"] = zipWith;
  exports["intersectBy"] = intersectBy;
  exports["intersect"] = intersect;
  exports["\\\\"] = $bslash$bslash;
  exports["deleteBy"] = deleteBy;
  exports["delete"] = $$delete;
  exports["unionBy"] = unionBy;
  exports["union"] = union;
  exports["nubBy"] = nubBy;
  exports["nub"] = nub;
  exports["groupBy"] = groupBy;
  exports["group"] = group;
  exports["span"] = span;
  exports["dropWhile"] = dropWhile;
  exports["drop"] = drop;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["filter"] = filter;
  exports["concatMap"] = concatMap;
  exports["concat"] = concat;
  exports["reverse"] = reverse;
  exports["alterAt"] = alterAt;
  exports["modifyAt"] = modifyAt;
  exports["updateAt"] = updateAt;
  exports["deleteAt"] = deleteAt;
  exports["insertAt"] = insertAt;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports["insertBy"] = insertBy;
  exports["insert"] = insert;
  exports["cons"] = cons;
  exports[":"] = $colon;
  exports["length"] = length;
  exports["null"] = $$null;
  exports["cycle"] = cycle;
  exports["iterate"] = iterate;
  exports["repeat"] = repeat;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["nil"] = nil;
  exports["step"] = step;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["runList"] = runList;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["ordList"] = ordList;
  exports["lazyList"] = lazyList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadPlusList"] = monadPlusList;;
 
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.List.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.List.Unsafe"] = PS["Data.List.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.List.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];     
  var tail = function (v) {
      if (v instanceof Data_List.Cons) {
          return v.value1;
      };
      if (v instanceof Data_List.Nil) {
          return $foreign.unsafeThrow("Data.List.Unsafe.tail called on empty list");
      };
      throw new Error("Failed pattern match at Data.List.Unsafe line 26, column 1 - line 27, column 1: " + [ v.constructor.name ]);
  };
  var last = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
              return v.value0;
          };
          if (v instanceof Data_List.Cons) {
              var __tco_v = v.value1;
              v = __tco_v;
              continue tco;
          };
          if (v instanceof Data_List.Nil) {
              return $foreign.unsafeThrow("Data.List.Unsafe.last called on empty list");
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      };
  };
  var init = function (v) {
      if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
          return Data_List.Nil.value;
      };
      if (v instanceof Data_List.Cons) {
          return new Data_List.Cons(v.value0, init(v.value1));
      };
      if (v instanceof Data_List.Nil) {
          return $foreign.unsafeThrow("Data.List.Unsafe.init called on empty list");
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var head = function (v) {
      if (v instanceof Data_List.Cons) {
          return v.value0;
      };
      if (v instanceof Data_List.Nil) {
          return $foreign.unsafeThrow("Data.List.Unsafe.head called on empty list");
      };
      throw new Error("Failed pattern match at Data.List.Unsafe line 19, column 1 - line 20, column 1: " + [ v.constructor.name ]);
  };
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["head"] = head;;
 
})(PS["Data.List.Unsafe"] = PS["Data.List.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var ZipList = function (x) {
      return x;
  };
  var showZipList = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "(ZipList " + (Prelude.show(Data_List_Lazy.showList(dictShow))(v) + ")");
      });
  };
  var runZipList = function (v) {
      return v;
  };
  var semigroupZipList = new Prelude.Semigroup(function (z1) {
      return function (z2) {
          return Prelude["++"](Data_List_Lazy.semigroupList)(runZipList(z1))(runZipList(z2));
      };
  });
  var monoidZipList = new Data_Monoid.Monoid(function () {
      return semigroupZipList;
  }, Data_Monoid.mempty(Data_List_Lazy.monoidList));
  var functorZipList = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude.map(Data_List_Lazy.functorList)(f)(v);
      };
  });
  var foldableZipList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldMap(Data_List_Lazy.foldableList)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldl(Data_List_Lazy.foldableList)(f)(b)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldr(Data_List_Lazy.foldableList)(f)(b)(v);
          };
      };
  });
  var traversableZipList = new Data_Traversable.Traversable(function () {
      return foldableZipList;
  }, function () {
      return functorZipList;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(ZipList)(Data_Traversable.sequence(Data_List_Lazy.traversableList)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(ZipList)(Data_Traversable.traverse(Data_List_Lazy.traversableList)(dictApplicative)(f)(v));
          };
      };
  });
  var eqZipList = function (dictEq) {
      return new Prelude.Eq(function (z1) {
          return function (z2) {
              return Prelude.eq(Data_List_Lazy.eqList(dictEq))(runZipList(z1))(runZipList(z2));
          };
      });
  };
  var ordZipList = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqZipList(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (z1) {
          return function (z2) {
              return Prelude.compare(Data_List_Lazy.ordList(dictOrd))(runZipList(z1))(runZipList(z2));
          };
      });
  };
  var applyZipList = new Prelude.Apply(function () {
      return functorZipList;
  }, function (v) {
      return function (v1) {
          return Data_List_Lazy.zipWith(Prelude["$"])(v)(v1);
      };
  });
  var applicativeZipList = new Prelude.Applicative(function () {
      return applyZipList;
  }, function ($33) {
      return ZipList(Data_List_Lazy.repeat($33));
  });
  var altZipList = new Control_Alt.Alt(function () {
      return functorZipList;
  }, Prelude.append(semigroupZipList));
  var plusZipList = new Control_Plus.Plus(function () {
      return altZipList;
  }, Data_Monoid.mempty(monoidZipList));
  var alternativeZipList = new Control_Alternative.Alternative(function () {
      return plusZipList;
  }, function () {
      return applicativeZipList;
  });
  exports["ZipList"] = ZipList;
  exports["runZipList"] = runZipList;
  exports["showZipList"] = showZipList;
  exports["eqZipList"] = eqZipList;
  exports["ordZipList"] = ordZipList;
  exports["semigroupZipList"] = semigroupZipList;
  exports["monoidZipList"] = monoidZipList;
  exports["foldableZipList"] = foldableZipList;
  exports["traversableZipList"] = traversableZipList;
  exports["functorZipList"] = functorZipList;
  exports["applyZipList"] = applyZipList;
  exports["applicativeZipList"] = applicativeZipList;
  exports["altZipList"] = altZipList;
  exports["plusZipList"] = plusZipList;
  exports["alternativeZipList"] = alternativeZipList;;
 
})(PS["Data.List.ZipList"] = PS["Data.List.ZipList"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];     
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Prelude["++"](Data_List.semigroupList)(values(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Prelude["++"](Data_List.semigroupList)(values(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value2))(Prelude["++"](Data_List.semigroupList)(values(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var toList = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Prelude["++"](Data_List.semigroupList)(toList(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value1, v.value2)))(toList(v.value3)));
      };
      if (v instanceof Three) {
          return Prelude["++"](Data_List.semigroupList)(toList(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value1, v.value2)))(Prelude["++"](Data_List.semigroupList)(toList(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value4, v.value5)))(toList(v.value6)))));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var size = function ($596) {
      return Data_List.length(values($596));
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var showTree = function (dictShow) {
      return function (dictShow1) {
          return function (v) {
              if (v instanceof Leaf) {
                  return "Leaf";
              };
              if (v instanceof Two) {
                  return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Prelude.show(dictShow)(v.value1) + (") (" + (Prelude.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
              };
              if (v instanceof Three) {
                  return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Prelude.show(dictShow)(v.value1) + (") (" + (Prelude.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Prelude.show(dictShow)(v.value4) + (") (" + (Prelude.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name ]);
          };
      };
  };
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return new Prelude.Show(function (m) {
              return "fromList " + Prelude.show(Data_List.showList(Data_Tuple.showTuple(dictShow)(dictShow1)))(toList(m));
          });
      };
  };
  var lookup = function (__copy_dictOrd) {
      return function (__copy_k) {
          return function (__copy_v) {
              var dictOrd = __copy_dictOrd;
              var k = __copy_k;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  var k1 = k;
                  if (v instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                      return new Data_Maybe.Just(v.value2);
                  };
                  var k1 = k;
                  if (v instanceof Two && Prelude["<"](dictOrd)(k1)(v.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value0;
                      dictOrd = __tco_dictOrd;
                      k = k1;
                      v = __tco_v;
                      continue tco;
                  };
                  var k1 = k;
                  if (v instanceof Two) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value3;
                      dictOrd = __tco_dictOrd;
                      k = k1;
                      v = __tco_v;
                      continue tco;
                  };
                  var k1 = k;
                  if (v instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                      return new Data_Maybe.Just(v.value2);
                  };
                  var k1 = k;
                  if (v instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value4)) {
                      return new Data_Maybe.Just(v.value5);
                  };
                  var k1 = k;
                  if (v instanceof Three && Prelude["<"](dictOrd)(k1)(v.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value0;
                      dictOrd = __tco_dictOrd;
                      k = k1;
                      v = __tco_v;
                      continue tco;
                  };
                  var k1 = k;
                  if (v instanceof Three && (Prelude["<"](dictOrd)(v.value1)(k1) && Prelude["<="](dictOrd)(k1)(v.value4))) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value3;
                      dictOrd = __tco_dictOrd;
                      k = k1;
                      v = __tco_v;
                      continue tco;
                  };
                  if (v instanceof Three) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_k = k;
                      var __tco_v = v.value6;
                      dictOrd = __tco_dictOrd;
                      k = __tco_k;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ k.constructor.name, v.constructor.name ]);
              };
          };
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(Prelude["++"](Data_List.semigroupList)(keys(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  };
  var functorMap = new Prelude.Functor(function (f) {
      return function (v) {
          if (v instanceof Leaf) {
              return Leaf.value;
          };
          if (v instanceof Two) {
              return new Two(Prelude.map(functorMap)(f)(v.value0), v.value1, f(v.value2), Prelude.map(functorMap)(f)(v.value3));
          };
          if (v instanceof Three) {
              return new Three(Prelude.map(functorMap)(f)(v.value0), v.value1, f(v.value2), Prelude.map(functorMap)(f)(v.value3), v.value4, f(v.value5), Prelude.map(functorMap)(f)(v.value6));
          };
          throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_v1) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return v1;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.Map line 150, column 1 - line 151, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  return function (__copy_v1) {
                      var ctx = __copy_ctx;
                      var k = __copy_k;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Leaf) {
                              return up(ctx1)(new KickUp(Leaf.value, k1, v2, Leaf.value));
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v1.value1)) {
                              return fromZipper(dictOrd)(ctx1)(new Two(v1.value0, k1, v2, v1.value3));
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Two && Prelude["<"](dictOrd)(k1)(v1.value1)) {
                              var __tco_ctx = new Data_List.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx1);
                              var __tco_v1 = v1.value0;
                              ctx = __tco_ctx;
                              k = k1;
                              v = v2;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Two) {
                              var __tco_ctx = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx1);
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = k1;
                              v = v2;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v1.value1)) {
                              return fromZipper(dictOrd)(ctx1)(new Three(v1.value0, k1, v2, v1.value3, v1.value4, v1.value5, v1.value6));
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v1.value4)) {
                              return fromZipper(dictOrd)(ctx1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k1, v2, v1.value6));
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Three && Prelude["<"](dictOrd)(k1)(v1.value1)) {
                              var __tco_ctx = new Data_List.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx1);
                              var __tco_v1 = v1.value0;
                              ctx = __tco_ctx;
                              k = k1;
                              v = v2;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          var ctx1 = ctx;
                          var k1 = k;
                          var v2 = v;
                          if (v1 instanceof Three && (Prelude["<"](dictOrd)(v1.value1)(k1) && Prelude["<="](dictOrd)(k1)(v1.value4))) {
                              var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx1);
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = k1;
                              v = v2;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three) {
                              var __tco_ctx = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.Map line 150, column 1 - line 151, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
          };
      };
      return down(Data_List.Nil.value);
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List.foldableList)(f)(z)(values(m));
          };
      };
  });
  var eqMap = function (dictEq) {
      return function (dictEq1) {
          return new Prelude.Eq(function (m1) {
              return function (m2) {
                  return Prelude["=="](Data_List.eqList(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toList(m1))(toList(m2));
              };
          });
      };
  };
  var ordMap = function (dictOrd) {
      return function (dictOrd1) {
          return new Prelude.Ord(function () {
              return eqMap(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
          }, function (m1) {
              return function (m2) {
                  return Prelude.compare(Data_List.ordList(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toList(m1))(toList(m2));
              };
          });
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var fromList = function (dictOrd) {
      return fromFoldable(dictOrd)(Data_List.foldableList);
  };
  var $$delete = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return v1;
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && (v.value0.value2 instanceof Leaf && v1 instanceof Leaf))) {
                      return fromZipper(dictOrd)(v.value1)(new Two(Leaf.value, v.value0.value0, v.value0.value1, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && (v.value0.value0 instanceof Leaf && v1 instanceof Leaf))) {
                      return fromZipper(dictOrd)(v.value1)(new Two(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && v.value0.value2 instanceof Two)) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0, v.value0.value2.value1, v.value0.value2.value2, v.value0.value2.value3);
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && v.value0.value0 instanceof Two)) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3, v.value0.value1, v.value0.value2, v1);
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoLeft && v.value0.value2 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0), v.value0.value2.value1, v.value0.value2.value2, new Two(v.value0.value2.value3, v.value0.value2.value4, v.value0.value2.value5, v.value0.value2.value6)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof TwoRight && v.value0.value0 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Two(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3), v.value0.value0.value4, v.value0.value0.value5, new Two(v.value0.value0.value6, v.value0.value1, v.value0.value2, v1)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && (v.value0.value2 instanceof Leaf && (v.value0.value5 instanceof Leaf && v1 instanceof Leaf)))) {
                      return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value0, v.value0.value1, Leaf.value, v.value0.value3, v.value0.value4, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && (v.value0.value0 instanceof Leaf && (v.value0.value5 instanceof Leaf && v1 instanceof Leaf)))) {
                      return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value, v.value0.value3, v.value0.value4, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && (v.value0.value0 instanceof Leaf && (v.value0.value3 instanceof Leaf && v1 instanceof Leaf)))) {
                      return fromZipper(dictOrd)(v.value1)(new Three(Leaf.value, v.value0.value1, v.value0.value2, Leaf.value, v.value0.value4, v.value0.value5, Leaf.value));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && v.value0.value2 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0, v.value0.value2.value1, v.value0.value2.value2, v.value0.value2.value3), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value0 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(new Three(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3, v.value0.value1, v.value0.value2, v1), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value5 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(v.value0.value0, v.value0.value1, v.value0.value2, new Three(v1, v.value0.value3, v.value0.value4, v.value0.value5.value0, v.value0.value5.value1, v.value0.value5.value2, v.value0.value5.value3)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && v.value0.value3 instanceof Two)) {
                      return fromZipper(dictOrd)(v.value1)(new Two(v.value0.value0, v.value0.value1, v.value0.value2, new Three(v.value0.value3.value0, v.value0.value3.value1, v.value0.value3.value2, v.value0.value3.value3, v.value0.value4, v.value0.value5, v1)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeLeft && v.value0.value2 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2.value0), v.value0.value2.value1, v.value0.value2.value2, new Two(v.value0.value2.value3, v.value0.value2.value4, v.value0.value2.value5, v.value0.value2.value6), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value0 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(new Two(v.value0.value0.value0, v.value0.value0.value1, v.value0.value0.value2, v.value0.value0.value3), v.value0.value0.value4, v.value0.value0.value5, new Two(v.value0.value0.value6, v.value0.value1, v.value0.value2, v1), v.value0.value3, v.value0.value4, v.value0.value5));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeMiddle && v.value0.value5 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, new Two(v1, v.value0.value3, v.value0.value4, v.value0.value5.value0), v.value0.value5.value1, v.value0.value5.value2, new Two(v.value0.value5.value3, v.value0.value5.value4, v.value0.value5.value5, v.value0.value5.value6)));
                  };
                  if (v instanceof Data_List.Cons && (v.value0 instanceof ThreeRight && v.value0.value3 instanceof Three)) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, new Two(v.value0.value3.value0, v.value0.value3.value1, v.value0.value3.value2, v.value0.value3.value3), v.value0.value3.value4, v.value0.value3.value5, new Two(v.value0.value3.value6, v.value0.value4, v.value0.value5, v1)));
                  };
                  return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'up'");
              };
          };
      };
      var removeMaxNode = function (__copy_ctx) {
          return function (__copy_v) {
              var ctx = __copy_ctx;
              var v = __copy_v;
              tco: while (true) {
                  var ctx1 = ctx;
                  if (v instanceof Two && (v.value0 instanceof Leaf && v.value3 instanceof Leaf)) {
                      return up(ctx1)(Leaf.value);
                  };
                  var ctx1 = ctx;
                  if (v instanceof Two) {
                      var __tco_ctx = new Data_List.Cons(new TwoRight(v.value0, v.value1, v.value2), ctx1);
                      var __tco_v = v.value3;
                      ctx = __tco_ctx;
                      v = __tco_v;
                      continue tco;
                  };
                  var ctx1 = ctx;
                  if (v instanceof Three && (v.value0 instanceof Leaf && (v.value3 instanceof Leaf && v.value6 instanceof Leaf))) {
                      return up(new Data_List.Cons(new TwoRight(Leaf.value, v.value1, v.value2), ctx1))(Leaf.value);
                  };
                  if (v instanceof Three) {
                      var __tco_ctx = new Data_List.Cons(new ThreeRight(v.value0, v.value1, v.value2, v.value3, v.value4, v.value5), ctx);
                      var __tco_v = v.value6;
                      ctx = __tco_ctx;
                      v = __tco_v;
                      continue tco;
                  };
                  if (v instanceof Leaf) {
                      return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'removeMaxNode'");
                  };
                  throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ ctx.constructor.name, v.constructor.name ]);
              };
          };
      };
      var maxNode = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Two && v.value3 instanceof Leaf) {
                  return {
                      key: v.value1, 
                      value: v.value2
                  };
              };
              if (v instanceof Two) {
                  var __tco_v = v.value3;
                  v = __tco_v;
                  continue tco;
              };
              if (v instanceof Three && v.value6 instanceof Leaf) {
                  return {
                      key: v.value4, 
                      value: v.value5
                  };
              };
              if (v instanceof Three) {
                  var __tco_v = v.value6;
                  v = __tco_v;
                  continue tco;
              };
              if (v instanceof Leaf) {
                  return Data_Maybe_Unsafe.unsafeThrow("Impossible case in 'maxNode'");
              };
              throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ v.constructor.name ]);
          };
      };
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  var ctx = __copy_ctx;
                  var k = __copy_k;
                  var v = __copy_v;
                  tco: while (true) {
                      var ctx1 = ctx;
                      if (v instanceof Leaf) {
                          return fromZipper(dictOrd)(ctx1)(Leaf.value);
                      };
                      var ctx1 = ctx;
                      var k1 = k;
                      if (v instanceof Two && (v.value0 instanceof Leaf && (v.value3 instanceof Leaf && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)))) {
                          return up(ctx1)(Leaf.value);
                      };
                      var ctx1 = ctx;
                      var k1 = k;
                      if (v instanceof Two) {
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                              var max = maxNode(v.value0);
                              return removeMaxNode(new Data_List.Cons(new TwoLeft(max.key, max.value, v.value3), ctx1))(v.value0);
                          };
                          if (Prelude["<"](dictOrd)(k1)(v.value1)) {
                              var __tco_ctx = new Data_List.Cons(new TwoLeft(v.value1, v.value2, v.value3), ctx1);
                              var __tco_v = v.value0;
                              ctx = __tco_ctx;
                              k = k1;
                              v = __tco_v;
                              continue tco;
                          };
                          if (Prelude.otherwise) {
                              var __tco_ctx = new Data_List.Cons(new TwoRight(v.value0, v.value1, v.value2), ctx1);
                              var __tco_v = v.value3;
                              ctx = __tco_ctx;
                              k = k1;
                              v = __tco_v;
                              continue tco;
                          };
                      };
                      var ctx1 = ctx;
                      var k1 = k;
                      if (v instanceof Three && (v.value0 instanceof Leaf && (v.value3 instanceof Leaf && v.value6 instanceof Leaf))) {
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value1)) {
                              return fromZipper(dictOrd)(ctx1)(new Two(Leaf.value, v.value4, v.value5, Leaf.value));
                          };
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k1)(v.value4)) {
                              return fromZipper(dictOrd)(ctx1)(new Two(Leaf.value, v.value1, v.value2, Leaf.value));
                          };
                      };
                      if (v instanceof Three) {
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v.value1)) {
                              var max = maxNode(v.value0);
                              return removeMaxNode(new Data_List.Cons(new ThreeLeft(max.key, max.value, v.value3, v.value4, v.value5, v.value6), ctx))(v.value0);
                          };
                          if (Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v.value4)) {
                              var max = maxNode(v.value3);
                              return removeMaxNode(new Data_List.Cons(new ThreeMiddle(v.value0, v.value1, v.value2, max.key, max.value, v.value6), ctx))(v.value3);
                          };
                          if (Prelude["<"](dictOrd)(k)(v.value1)) {
                              var __tco_ctx = new Data_List.Cons(new ThreeLeft(v.value1, v.value2, v.value3, v.value4, v.value5, v.value6), ctx);
                              var __tco_k = k;
                              var __tco_v = v.value0;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              continue tco;
                          };
                          if (Prelude["<"](dictOrd)(v.value1)(k) && Prelude["<"](dictOrd)(k)(v.value4)) {
                              var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v.value0, v.value1, v.value2, v.value4, v.value5, v.value6), ctx);
                              var __tco_k = k;
                              var __tco_v = v.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              continue tco;
                          };
                          if (Prelude.otherwise) {
                              var __tco_ctx = new Data_List.Cons(new ThreeRight(v.value0, v.value1, v.value2, v.value3, v.value4, v.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              continue tco;
                          };
                      };
                      throw new Error("Failed pattern match at Data.Map line 173, column 1 - line 174, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
      return down(Data_List.Nil.value);
  };
  var checkValid = function (tree) {
      var allHeights = function (v) {
          if (v instanceof Leaf) {
              return Prelude.pure(Data_List.applicativeList)(0);
          };
          if (v instanceof Two) {
              return Prelude.map(Data_List.functorList)(function (n) {
                  return n + 1 | 0;
              })(Prelude["++"](Data_List.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
          };
          if (v instanceof Three) {
              return Prelude.map(Data_List.functorList)(function (n) {
                  return n + 1 | 0;
              })(Prelude["++"](Data_List.semigroupList)(allHeights(v.value0))(Prelude["++"](Data_List.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
          };
          throw new Error("Failed pattern match at Data.Map line 108, column 1 - line 109, column 1: " + [ v.constructor.name ]);
      };
      return Data_List.length(Data_List.nub(Prelude.eqInt)(allHeights(tree))) === 1;
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var $584 = f(lookup(dictOrd)(k)(m));
                  if ($584 instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if ($584 instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)($584.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map line 235, column 1 - line 236, column 1: " + [ $584.constructor.name ]);
              };
          };
      };
  };
  var fromFoldableWith = function (dictOrd) {
      return function (dictFoldable) {
          return function (f) {
              var combine = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Just) {
                          return Data_Maybe.Just.create(f(v)(v1.value0));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Data_Maybe.Just(v);
                      };
                      throw new Error("Failed pattern match at Data.Map line 253, column 3 - line 254, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(function (m) {
                  return function (v) {
                      return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                  };
              })(empty);
          };
      };
  };
  var fromListWith = function (dictOrd) {
      return fromFoldableWith(dictOrd)(Data_List.foldableList);
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)(function ($597) {
                              return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($597));
                          })(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List.foldableList)(go)(m2)(toList(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Prelude["const"]);
  };
  var semigroupMap = function (dictOrd) {
      return new Prelude.Semigroup(union(dictOrd));
  };
  var monoidMap = function (dictOrd) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMap(dictOrd);
      }, empty);
  };
  var traversableMap = function (dictOrd) {
      return new Data_Traversable.Traversable(function () {
          return foldableMap;
      }, function () {
          return functorMap;
      }, function (dictApplicative) {
          return Data_Traversable.traverse(traversableMap(dictOrd))(dictApplicative)(Prelude.id(Prelude.categoryFn));
      }, function (dictApplicative) {
          return function (f) {
              return function (ms) {
                  return Data_Foldable.foldr(Data_List.foldableList)(function (x) {
                      return function (acc) {
                          return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(union(dictOrd))(x))(acc);
                      };
                  })(Prelude.pure(dictApplicative)(empty))(Prelude["<$>"](Data_List.functorList)(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Prelude["<$>"](Data_List.functorList)(Data_Traversable.traverse(Data_Tuple.traversableTuple)(dictApplicative)(f))(toList(ms))));
              };
          };
      });
  };
  var unions = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  var update = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
              };
          };
      };
  };
  exports["size"] = size;
  exports["unions"] = unions;
  exports["unionWith"] = unionWith;
  exports["union"] = union;
  exports["values"] = values;
  exports["keys"] = keys;
  exports["update"] = update;
  exports["alter"] = alter;
  exports["member"] = member;
  exports["delete"] = $$delete;
  exports["fromListWith"] = fromListWith;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["fromFoldable"] = fromFoldable;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["checkValid"] = checkValid;
  exports["singleton"] = singleton;
  exports["isEmpty"] = isEmpty;
  exports["empty"] = empty;
  exports["showTree"] = showTree;
  exports["eqMap"] = eqMap;
  exports["showMap"] = showMap;
  exports["ordMap"] = ordMap;
  exports["semigroupMap"] = semigroupMap;
  exports["monoidMap"] = monoidMap;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
  exports["traversableMap"] = traversableMap;;
 
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST.Unsafe

  exports.unsafeGet = function (m) {
    return function () {
      return m;
    };
  };
 
})(PS["Data.StrMap.ST.Unsafe"] = PS["Data.StrMap.ST.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.StrMap.ST.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  exports["unsafeGet"] = $foreign.unsafeGet;;
 
})(PS["Data.StrMap.ST.Unsafe"] = PS["Data.StrMap.ST.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.Unsafe

  exports.unsafeIndex = function (m) {
    return function (k) {
      return m[k];
    };
  };
 
})(PS["Data.StrMap.Unsafe"] = PS["Data.StrMap.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.StrMap.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_StrMap = PS["Data.StrMap"];
  exports["unsafeIndex"] = $foreign.unsafeIndex;;
 
})(PS["Data.StrMap.Unsafe"] = PS["Data.StrMap.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String.Regex

  exports["showRegex'"] = function (r) {
    return "" + r;
  };

  exports["regex'"] = function (s1) {
    return function (s2) {
      return new RegExp(s1, s2);
    };
  };

  exports.source = function (r) {
    return r.source;
  };

  exports.flags = function (r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  };

  exports.test = function (r) {
    return function (s) {
      return r.test(s);
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };

  exports["replace'"] = function (r) {
    return function (f) {
      return function (s2) {
        return s2.replace(r, function (match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  };

  exports._search = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var result = s.search(r);
          return result === -1 ? nothing : just(result);
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
 
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];     
  var showRegex = new Prelude.Show($foreign["showRegex'"]);
  var search = $foreign._search(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var renderFlags = function (f) {
      return (function () {
          if (f.global) {
              return "g";
          };
          if (!f.global) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.global.constructor.name ]);
      })() + ((function () {
          if (f.ignoreCase) {
              return "i";
          };
          if (!f.ignoreCase) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.ignoreCase.constructor.name ]);
      })() + ((function () {
          if (f.multiline) {
              return "m";
          };
          if (!f.multiline) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.multiline.constructor.name ]);
      })() + ((function () {
          if (f.sticky) {
              return "y";
          };
          if (!f.sticky) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.sticky.constructor.name ]);
      })() + (function () {
          if (f.unicode) {
              return "u";
          };
          if (!f.unicode) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.unicode.constructor.name ]);
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](s)(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return {
          global: Data_String.contains("g")(s), 
          ignoreCase: Data_String.contains("i")(s), 
          multiline: Data_String.contains("m")(s), 
          sticky: Data_String.contains("y")(s), 
          unicode: Data_String.contains("u")(s)
      };
  };
  var noFlags = {
      global: false, 
      ignoreCase: false, 
      multiline: false, 
      sticky: false, 
      unicode: false
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["noFlags"] = noFlags;
  exports["search"] = search;
  exports["match"] = match;
  exports["parseFlags"] = parseFlags;
  exports["renderFlags"] = renderFlags;
  exports["regex"] = regex;
  exports["showRegex"] = showRegex;
  exports["split"] = $foreign.split;
  exports["replace'"] = $foreign["replace'"];
  exports["replace"] = $foreign.replace;
  exports["test"] = $foreign.test;
  exports["flags"] = $foreign.flags;
  exports["source"] = $foreign.source;;
 
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];     
  var $div$bslash = function (a) {
      return function (b) {
          return new Data_Tuple.Tuple(a, b);
      };
  };
  var uncurry9 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry8 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry7 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry6 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry5 = function (f) {
      return function (v) {
          return f(v.value0.value0.value0.value0)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry4 = function (f) {
      return function (v) {
          return f(v.value0.value0.value0)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry3 = function (f) {
      return function (v) {
          return f(v.value0.value0)(v.value0.value1)(v.value1);
      };
  };
  var uncurry2 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var uncurry10 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var tuple9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g);
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f);
                      };
                  };
              };
          };
      };
  };
  var tuple5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e);
                  };
              };
          };
      };
  };
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d);
              };
          };
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c);
          };
      };
  };
  var tuple2 = Data_Tuple.Tuple.create;
  var tuple10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry9 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return function (i) {
                                          return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry8 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry7 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry6 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f));
                          };
                      };
                  };
              };
          };
      };
  };
  var curry5 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e));
                      };
                  };
              };
          };
      };
  };
  var curry4 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d));
                  };
              };
          };
      };
  };
  var curry3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c));
              };
          };
      };
  };
  var curry2 = function (f) {
      return function (a) {
          return function (b) {
              return f(new Data_Tuple.Tuple(a, b));
          };
      };
  };
  var curry10 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return function (i) {
                                          return function (j) {
                                              return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j));
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["/\\"] = $div$bslash;
  exports["curry10"] = curry10;
  exports["uncurry10"] = uncurry10;
  exports["curry9"] = curry9;
  exports["uncurry9"] = uncurry9;
  exports["curry8"] = curry8;
  exports["uncurry8"] = uncurry8;
  exports["curry7"] = curry7;
  exports["uncurry7"] = uncurry7;
  exports["curry6"] = curry6;
  exports["uncurry6"] = uncurry6;
  exports["curry5"] = curry5;
  exports["uncurry5"] = uncurry5;
  exports["curry4"] = curry4;
  exports["uncurry4"] = uncurry4;
  exports["curry3"] = curry3;
  exports["uncurry3"] = uncurry3;
  exports["curry2"] = curry2;
  exports["uncurry2"] = uncurry2;
  exports["tuple10"] = tuple10;
  exports["tuple9"] = tuple9;
  exports["tuple8"] = tuple8;
  exports["tuple7"] = tuple7;
  exports["tuple6"] = tuple6;
  exports["tuple5"] = tuple5;
  exports["tuple4"] = tuple4;
  exports["tuple3"] = tuple3;
  exports["tuple2"] = tuple2;;
 
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  // This function maintains a global state `window.flareID` to generate unique
  // DOM element IDs. It is only called from functions with a DOM effect.
  function getUniqueID() {
    if (window.flareID === undefined) {
      window.flareID = 0;
    }
    window.flareID = window.flareID + 1;
    return "flare-component-" + window.flareID.toString();
  }

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(label) {
      return function(initial) {
        return function(send) {
          return function() {
            var uid = getUniqueID();
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;
            el.id = uid;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (label !== "") {
              var labelEl = document.createElement("label");
              labelEl.htmlFor = uid;
              labelEl.appendChild(document.createTextNode(label));
              div.appendChild(labelEl);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  }

  exports.cNumber = createComponent("number",
    function(initial) {
      var input = document.createElement("input");
      input.type = "number";
      input.step = "any";
      input.value = initial.toString();
      return input;
    },
    "input",
    function(t, initial) {
      var val = parseFloat(t.value);
      return (isNaN(val) ? initial : val);
    }
  );

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  }

  exports.cNumberRange = function(type) {
    return function(min) {
      return function(max) {
        return function(step) {
          return createComponent("number-" + type,
            function(initial) {
              var input = document.createElement("input");
              input.type = type;
              input.min = min.toString();
              input.max = max.toString();
              input.step = step.toString();
              input.value = initial.toString();
              return input;
            },
            "input",
            function(t, initial) {
              return clamp(min, max, initial, parseFloat(t.value));
            }
          );
        };
      };
    };
  };

  exports.cIntRange = function(type) {
    return function(min) {
      return function(max) {
        return createComponent("int-" + type,
          function(initial) {
            var input = document.createElement("input");
            input.type = type;
            input.min = min.toString();
            input.max = max.toString();
            input.step = "1";
            input.value = initial.toString();
            return input;
          },
          "input",
          function(t, initial) {
            return clamp(min, max, initial, parseInt(t.value, 10));
          }
        );
      };
    };
  };

  exports.cString = createComponent("string",
    function(initial) {
      var input = document.createElement("input");
      input.type = "text";
      input.value = initial;
      return input;
    },
    "input",
    function(t, initial) {
      return t.value;
    }
  );

  exports.cStringPattern = function(pattern) {
    return createComponent("string-pattern",
      function(initial) {
        var input = document.createElement("input");
        input.type = "text";
        input.pattern = pattern;
        input.required = true;
        input.value = initial;
        return input;
      },
      "input",
      function(t, initial) {
        return t.value;
      }
    );
  };

  exports.cBoolean = createComponent("boolean",
    function(initial) {
      var input = document.createElement("input");
      input.type = "checkbox";
      input.checked = initial;
      return input;
    },
    "change",
    function(t, initial) {
      return t.checked;
    }
  );

  exports.cButton = function(vPressed) {
    return function(label) {
      return function(vDefault) {
        return function(send) {
          return function() {
            var div = document.createElement("div");
            div.className = "flare-input";

            var button = document.createElement("button");
            button.id = getUniqueID();
            button.className = "flare-input-button";
            button.appendChild(document.createTextNode(label));

            button.addEventListener('mousedown', function() {
              send(vPressed)();
            });
            button.addEventListener('mouseup', function() {
              send(vDefault)();
            });

            div.appendChild(button);
            return div;

          };
        };
      };
    };
  };

  exports.cSelect = function(xs) {
    return function(toString) {
      return createComponent("select",
        function(initial) {
          var select = document.createElement("select");

          var x, op;
          for (var i = 0; i < xs.length + 1; i++) {
            x = (i === 0) ? initial : xs[i - 1];
            op = document.createElement("option");
            op.appendChild(document.createTextNode(toString(x)));
            select.appendChild(op);
          }

          return select;
        },
        "change",
        function(t, initial) {
          var ix = t.selectedIndex;
          if (ix === 0) {
            return initial;
          }
          return xs[ix - 1];
        }
      );
    };
  };

  exports.cRadioGroup = function(xs) {
    return function(toString) {
      return function(label) {
        var uid = getUniqueID();
        return createComponent("radioGroup",
          function(initial) {
            var fieldset = document.createElement("fieldset");

            if (label !== "") {
              var legend = document.createElement("legend");
              legend.appendChild(document.createTextNode(label));
              fieldset.appendChild(legend);
            }

            var x, xid, op, labelEl;
            for (var i = 0; i < xs.length + 1; i++) {
              x = (i === 0) ? initial : xs[i - 1];
              xid = uid + "-" + i.toString();

              op = document.createElement("input");
              op.type = "radio";
              op.name = uid;
              op.id = xid;
              if (i === 0) {
                op.checked = "checked";
              }
              fieldset.appendChild(op);

              labelEl = document.createElement("label");
              labelEl.appendChild(document.createTextNode(toString(x)));
              labelEl.htmlFor = xid;
              fieldset.appendChild(labelEl);
            }

            return fieldset;
          },
          "change",
          function(t, initial) {
            var ix = parseInt(t.id.substr(uid.length + 1), 10);
            if (ix === 0) {
              return initial;
            }
            return xs[ix - 1];
          }
        )("");
      };
    };
  };

  exports.toFieldset = function(label) {
    return function(elements) {
      var fieldset = document.createElement("fieldset");

      if (label !== "") {
        var legend = document.createElement("legend");
        legend.appendChild(document.createTextNode(label));
        fieldset.appendChild(legend);
      }

      for (var i = 0; i < elements.length; i++) {
        fieldset.appendChild(elements[i]);
      }

      return fieldset;
    };
  };

  // vim: ts=2:sw=2
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.mergeP =
    function mergeP(constant) {
      return function(sig1) {
        return function(sig2) {
          var out = constant(sig1.get());
          sig2.subscribe(out.set);
          sig1.subscribe(out.set);
          return out;
        };
      };
    };

  exports.foldpP =
    function foldpP(constant) {
      return function(fun) {
        return function(seed) {
          return function(sig) {
            var acc = seed;
            var out = constant(acc);
            sig.subscribe(function(val) {
              acc = fun(val)(acc);
              out.set(acc);
            });
            return out;
          };
        };
      };
    };

  exports.sampleOnP =
    function sampleOnP(constant) {
      return function(sig1) {
        return function(sig2) {
          var out = constant(sig2.get());
          sig1.subscribe(function() {
            out.set(sig2.get());
          });
          return out;
        };
      };
    };

  exports.dropRepeatsP =
  function dropRepeatsP(eq) {
    return function(constant) {
      return function(sig) {
        var val = sig.get();
        var out = constant(val);
        sig.subscribe(function(newval) {
          if (!eq["eq"](val)(newval)) {
            val = newval;
            out.set(val);
          }
        });
        return out;
      };
    };
  };

  exports.dropRepeatsRefP =
    function dropRepeatsRefP(constant) {
      return function(sig) {
        var val = sig.get();
        var out = constant(val);
        sig.subscribe(function(newval) {
          if (val !== newval) {
            val = newval;
            out.set(val);
          }
        });
        return out;
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };

  exports.unwrapP =
    function unwrapP(constant) {
      return function(sig) {
        return function() {
          var out = constant(sig.get()());
          sig.subscribe(function(val) { out.set(val()); });
          return out;
        };
      };
    };

  exports.filterP =
    function keepIfP(constant) {
      return function(fn) {
        return function(seed) {
          return function(sig) {
            var out = constant(fn(sig.get()) ? sig.get() : seed);
            sig.subscribe(function(val) { if (fn(val)) out.set(val); });
            return out;
          };
        };
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];     
  var $tilde$greater = function (dictFunctor) {
      return Prelude.flip(Prelude["<$>"](dictFunctor));
  };
  var $tilde = function (dictApply) {
      return Prelude["<*>"](dictApply);
  };
  var $less$tilde = function (dictFunctor) {
      return Prelude["<$>"](dictFunctor);
  };
  var unwrap = $foreign.unwrapP($foreign.constant);
  var sampleOn = $foreign.sampleOnP($foreign.constant);
  var merge = $foreign.mergeP($foreign.constant);
  var mergeMany = function (dictFunctor) {
      return function (dictFoldable) {
          return function (sigs) {
              var mergeMaybe = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return v;
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return v1;
                      };
                      if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just(merge(v.value0)(v1.value0));
                      };
                      throw new Error("Failed pattern match at Signal line 52, column 9 - line 53, column 9: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(mergeMaybe)(Data_Maybe.Nothing.value)(Prelude["<$>"](dictFunctor)(Data_Maybe.Just.create)(sigs));
          };
      };
  };
  var semigroupSignal = new Prelude.Semigroup(merge);
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var foldp = $foreign.foldpP($foreign.constant);
  var filter = $foreign.filterP($foreign.constant);
  var filterMap = function (f) {
      return function (def) {
          return function (sig) {
              return Prelude["<$>"](functorSignal)(Data_Maybe.fromMaybe(def))(filter(Data_Maybe.isJust)(new Data_Maybe.Just(def))(Prelude["<$>"](functorSignal)(f)(sig)));
          };
      };
  };
  var dropRepeats$prime = $foreign.dropRepeatsRefP($foreign.constant);
  var dropRepeats = function (dictEq) {
      return $foreign.dropRepeatsP(dictEq)($foreign.constant);
  };
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  var map2 = function (f) {
      return function (a) {
          return function (b) {
              return $tilde(applySignal)($less$tilde(functorSignal)(f)(a))(b);
          };
      };
  };
  var map3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return $tilde(applySignal)($tilde(applySignal)($less$tilde(functorSignal)(f)(a))(b))(c);
              };
          };
      };
  };
  var map4 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return $tilde(applySignal)($tilde(applySignal)($tilde(applySignal)($less$tilde(functorSignal)(f)(a))(b))(c))(d);
                  };
              };
          };
      };
  };
  var map5 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return $tilde(applySignal)($tilde(applySignal)($tilde(applySignal)($tilde(applySignal)($less$tilde(functorSignal)(f)(a))(b))(c))(d))(e);
                      };
                  };
              };
          };
      };
  };
  var applicativeSignal = new Prelude.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["~"] = $tilde;
  exports["~>"] = $tilde$greater;
  exports["<~"] = $less$tilde;
  exports["filterMap"] = filterMap;
  exports["filter"] = filter;
  exports["unwrap"] = unwrap;
  exports["dropRepeats'"] = dropRepeats$prime;
  exports["dropRepeats"] = dropRepeats;
  exports["sampleOn"] = sampleOn;
  exports["foldp"] = foldp;
  exports["mergeMany"] = mergeMany;
  exports["merge"] = merge;
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["semigroupSignal"] = semigroupSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];     
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;;
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];     
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var $less$times$times$greater = function (v) {
      return function (v1) {
          return Flare_1.UI(function __do() {
              var v2 = v();
              var v3 = v1();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare_1.Flare(Prelude["<>"](Prelude.semigroupArray)(v2.value0)(v3.value0), Prelude["<*>"](Signal.applySignal)(v3.value1)(v2.value1)))();
          });
      };
  };
  var wrap = function (sig) {
      return Flare_1.UI(Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare_1.Flare([  ], sig)));
  };
  var setupFlare = function (v) {
      return function __do() {
          var v1 = v();
          return Prelude["return"](Control_Monad_Eff.applicativeEff)({
              components: v1.value0, 
              signal: v1.value1
          })();
      };
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (v) {
              return function __do() {
                  var v1 = v();
                  Flare_1.removeChildren(controls)();
                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(Flare_1.appendComponent(controls))(v1.value0)();
                  return Signal.runSignal(Prelude.map(Signal.functorSignal)(handler)(v1.value1))();
              };
          };
      };
  };
  var runFlare = function (controls) {
      return function (target) {
          return Flare_1.runFlareWith(controls)(Flare_1.renderString(target));
      };
  };
  var liftSF = function (f) {
      return function (v) {
          return function __do() {
              var v1 = v();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare_1.Flare(v1.value0, f(v1.value1)))();
          };
      };
  };
  var lift = function (msig) {
      return Flare_1.UI(function __do() {
          var v = msig();
          return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare_1.Flare([  ], v))();
      });
  };
  var functorFlare = new Prelude.Functor(function (f) {
      return function (v) {
          return new Flare_1.Flare(v.value0, Prelude.map(Signal.functorSignal)(f)(v.value1));
      };
  });
  var functorUI = new Prelude.Functor(function (f) {
      return function (v) {
          return Flare_1.UI(Prelude.map(Control_Monad_Eff.functorEff)(Prelude.map(Flare_1.functorFlare)(f))(v));
      };
  });
  var runFlareShow = function (dictShow) {
      return function (controls) {
          return function (target) {
              return function (ui) {
                  return Flare_1.runFlare(controls)(target)(Prelude["<$>"](Flare_1.functorUI)(Prelude.show(dictShow))(ui));
              };
          };
      };
  };
  var foldp = function (f) {
      return function (x0) {
          return Flare_1.liftSF(Signal.foldp(f)(x0));
      };
  };
  var fieldset = function (label) {
      return function (v) {
          return Flare_1.UI(function __do() {
              var v1 = v();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare_1.Flare([ Flare_1.toFieldset(label)(v1.value0) ], v1.value1))();
          });
      };
  };
  var createUI = function (createComp) {
      return function (label) {
          return function ($$default) {
              return Flare_1.UI(function __do() {
                  var v = Signal_Channel.channel($$default)();
                  var v1 = createComp(label)($$default)(Signal_Channel.send(v))();
                  return (function () {
                      var signal = Signal_Channel.subscribe(v);
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare_1.Flare([ v1 ], signal));
                  })()();
              });
          };
      };
  };
  var $$int = function (label) {
      return Flare_1.createUI(Flare_1.cIntRange("number")(Prelude.bottom(Prelude.boundedInt))(Prelude.top(Prelude.boundedInt)))(label);
  };
  var int_ = Flare_1["int"]("");
  var intRange = function (label) {
      return function (min) {
          return function (max) {
              return function ($$default) {
                  return Flare_1.createUI(Flare_1.cIntRange("number")(min)(max))(label)($$default);
              };
          };
      };
  };
  var intRange_ = Flare_1.intRange("");
  var intSlider = function (label) {
      return function (min) {
          return function (max) {
              return function ($$default) {
                  return Flare_1.createUI(Flare_1.cIntRange("range")(min)(max))(label)($$default);
              };
          };
      };
  };
  var intSlider_ = Flare_1.intSlider("");
  var number = Flare_1.createUI(Flare_1.cNumber);
  var number_ = Flare_1.number("");
  var numberRange = function (label) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return Flare_1.createUI(Flare_1.cNumberRange("number")(min)(max)(step))(label)($$default);
                  };
              };
          };
      };
  };
  var numberRange_ = Flare_1.numberRange("");
  var numberSlider = function (label) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return Flare_1.createUI(Flare_1.cNumberRange("range")(min)(max)(step))(label)($$default);
                  };
              };
          };
      };
  };
  var numberSlider_ = Flare_1.numberSlider("");
  var radioGroup = function (label) {
      return function ($$default) {
          return function (xs) {
              return function (toString) {
                  return Flare_1.createUI(Flare_1.cRadioGroup(xs)(toString))(label)($$default);
              };
          };
      };
  };
  var radioGroup_ = Flare_1.radioGroup("");
  var select = function (label) {
      return function ($$default) {
          return function (xs) {
              return function (toString) {
                  return Flare_1.createUI(Flare_1.cSelect(xs)(toString))(label)($$default);
              };
          };
      };
  };
  var select_ = Flare_1.select("");
  var string = Flare_1.createUI(Flare_1.cString);
  var string_ = Flare_1.string("");
  var stringPattern = function (label) {
      return function (pattern) {
          return function ($$default) {
              return Flare_1.createUI(Flare_1.cStringPattern(pattern))(label)($$default);
          };
      };
  };
  var stringPattern_ = Flare_1.stringPattern("");
  var button = function (label) {
      return function (vDefault) {
          return function (vPressed) {
              return Flare_1.createUI(Flare_1.cButton(vPressed))(label)(vDefault);
          };
      };
  };
  var $$boolean = Flare_1.createUI(Flare_1.cBoolean);
  var boolean_ = Flare_1["boolean"]("");
  var optional = function (label) {
      return function (enabled) {
          return function (x) {
              var ret = function (v) {
                  if (v) {
                      return new Data_Maybe.Just(x);
                  };
                  if (!v) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Flare line 249, column 9 - line 250, column 9: " + [ v.constructor.name ]);
              };
              return Prelude["<$>"](Flare_1.functorUI)(ret)(Flare_1["boolean"](label)(enabled));
          };
      };
  };
  var optional_ = Flare_1.optional("");
  var applyFlare = new Prelude.Apply(function () {
      return Flare_1.functorFlare;
  }, function (v) {
      return function (v1) {
          return new Flare_1.Flare(Prelude["<>"](Prelude.semigroupArray)(v.value0)(v1.value0), Prelude["<*>"](Signal.applySignal)(v.value1)(v1.value1));
      };
  });
  var applyUI = new Prelude.Apply(function () {
      return Flare_1.functorUI;
  }, function (v) {
      return function (v1) {
          return Flare_1.UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Prelude.apply(Flare_1.applyFlare))(v)(v1));
      };
  });
  var semigroupUI = function (dictSemigroup) {
      return new Prelude.Semigroup(Control_Apply.lift2(Flare_1.applyUI)(Prelude.append(dictSemigroup)));
  };
  var applicativeFlare = new Prelude.Applicative(function () {
      return Flare_1.applyFlare;
  }, function (x) {
      return new Flare_1.Flare([  ], Prelude.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Prelude.Applicative(function () {
      return Flare_1.applyUI;
  }, function (x) {
      return Flare_1.UI(Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.pure(Flare_1.applicativeFlare)(x)));
  });
  var boundedUI = function (dictBounded) {
      return new Prelude.Bounded(Prelude.pure(Flare_1.applicativeUI)(Prelude.bottom(dictBounded)), Prelude.pure(Flare_1.applicativeUI)(Prelude.top(dictBounded)));
  };
  var booleanAlgebraUI = function (dictBooleanAlgebra) {
      return new Prelude.BooleanAlgebra(function () {
          return Flare_1.boundedUI(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, Control_Apply.lift2(Flare_1.applyUI)(Prelude.conj(dictBooleanAlgebra)), Control_Apply.lift2(Flare_1.applyUI)(Prelude.disj(dictBooleanAlgebra)), Prelude.map(Flare_1.functorUI)(Prelude.not(dictBooleanAlgebra)));
  };
  var buttons = function (xs) {
      return function (toString) {
          var toButton = function (x) {
              return Flare_1.button(toString(x))(Data_Maybe.Nothing.value)(new Data_Maybe.Just(x));
          };
          return Prelude["<$>"](Flare_1.functorUI)(function ($78) {
              return Data_Array.head(Data_Array.catMaybes($78));
          })(Data_Traversable.traverse(Data_Traversable.traversableArray)(Flare_1.applicativeUI)(toButton)(xs));
      };
  };
  var monoidUI = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return Flare_1.semigroupUI(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Prelude.pure(Flare_1.applicativeUI)(Data_Monoid.mempty(dictMonoid)));
  };
  var semiringUI = function (dictSemiring) {
      return new Prelude.Semiring(Control_Apply.lift2(Flare_1.applyUI)(Prelude.add(dictSemiring)), Control_Apply.lift2(Flare_1.applyUI)(Prelude.mul(dictSemiring)), Prelude.pure(Flare_1.applicativeUI)(Prelude.one(dictSemiring)), Prelude.pure(Flare_1.applicativeUI)(Prelude.zero(dictSemiring)));
  };
  var moduloSemiringUI = function (dictModuloSemiring) {
      return new Prelude.ModuloSemiring(function () {
          return Flare_1.semiringUI(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
      }, Control_Apply.lift2(Flare_1.applyUI)(Prelude.div(dictModuloSemiring)), Control_Apply.lift2(Flare_1.applyUI)(Prelude.mod(dictModuloSemiring)));
  };
  var ringUI = function (dictRing) {
      return new Prelude.Ring(function () {
          return Flare_1.semiringUI(dictRing["__superclass_Prelude.Semiring_0"]());
      }, Control_Apply.lift2(Flare_1.applyUI)(Prelude.sub(dictRing)));
  };
  var divisionRingUI = function (dictDivisionRing) {
      return new Prelude.DivisionRing(function () {
          return Flare_1.moduloSemiringUI(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
      }, function () {
          return Flare_1.ringUI(dictDivisionRing["__superclass_Prelude.Ring_0"]());
      });
  };
  var numUI = function (dictNum) {
      return new Prelude.Num(function () {
          return Flare_1.divisionRingUI(dictNum["__superclass_Prelude.DivisionRing_0"]());
      });
  };
  exports["runFlareShow"] = runFlareShow;
  exports["runFlare"] = runFlare;
  exports["runFlareWith"] = runFlareWith;
  exports["setupFlare"] = setupFlare;
  exports["foldp"] = foldp;
  exports["liftSF"] = liftSF;
  exports["lift"] = lift;
  exports["wrap"] = wrap;
  exports["<**>"] = $less$times$times$greater;
  exports["fieldset"] = fieldset;
  exports["radioGroup_"] = radioGroup_;
  exports["radioGroup"] = radioGroup;
  exports["select_"] = select_;
  exports["select"] = select;
  exports["buttons"] = buttons;
  exports["button"] = button;
  exports["optional_"] = optional_;
  exports["optional"] = optional;
  exports["boolean_"] = boolean_;
  exports["boolean"] = $$boolean;
  exports["stringPattern_"] = stringPattern_;
  exports["stringPattern"] = stringPattern;
  exports["string_"] = string_;
  exports["string"] = string;
  exports["intSlider_"] = intSlider_;
  exports["intSlider"] = intSlider;
  exports["intRange_"] = intRange_;
  exports["intRange"] = intRange;
  exports["int_"] = int_;
  exports["int"] = $$int;
  exports["numberSlider_"] = numberSlider_;
  exports["numberSlider"] = numberSlider;
  exports["numberRange_"] = numberRange_;
  exports["numberRange"] = numberRange;
  exports["number_"] = number_;
  exports["number"] = number;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;
  exports["semigroupUI"] = semigroupUI;
  exports["monoidUI"] = monoidUI;
  exports["semiringUI"] = semiringUI;
  exports["ringUI"] = ringUI;
  exports["moduloSemiringUI"] = moduloSemiringUI;
  exports["divisionRingUI"] = divisionRingUI;
  exports["numUI"] = numUI;
  exports["boundedUI"] = boundedUI;
  exports["booleanAlgebraUI"] = booleanAlgebraUI;;
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Graphics.Canvas

  exports.canvasElementToImageSource = function(e) {
      return e;
  };

  exports.withImage = function (src) {
    return function(f) {
          return function () {
              var img = new Image();
              img.src = src;
              img.addEventListener("load", function() {
                  f(img)();
              }, false);

              return {};
          }
      };
  };

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setCanvasWidth = function(width) {
      return function(canvas) {
          return function() {
              canvas.width = width;
              return canvas;
          };
      };
  };

  exports.setCanvasHeight = function(height) {
      return function(canvas) {
          return function() {
              canvas.height = height;
              return canvas;
          };
      };
  };

  exports.canvasToDataURL = function(canvas) {
      return function() {
          return canvas.toDataURL();
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setShadowColor = function(color) {
      return function(ctx) {
          return function() {
              ctx.shadowColor = color;
              return ctx;
          };
      };
  };

  exports.setShadowBlur = function(blur) {
      return function(ctx) {
          return function() {
              ctx.shadowBlur = blur;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetX = function(offsetX) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetX = offsetX;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetY = function(offsetY) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetY = offsetY;
              return ctx;
          };
      };
  };

  exports.setLineCapImpl = function(cap) {
      return function(ctx) {
          return function() {
              ctx.lineCap = cap;
              return ctx;
          };
      };
  };

  exports.setGlobalCompositeOperationImpl = function(ctx) {
      return function(op) {
          return function() {
              ctx.globalCompositeOperation = op;
              return ctx;
          };
      };
  };

  exports.setGlobalAlpha = function(ctx) {
      return function(alpha) {
          return function() {
              ctx.setGlobalAlpha = alpha;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.strokeRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.strokeRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.transform = function(t) {
      return function(ctx) {
          return function() {
              ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.textAlignImpl = function(ctx) {
      return function() {
          return ctx.textAlign;
      }
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
              return ctx;
          }
      }
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.strokeText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.strokeText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.measureText = function(ctx) {
      return function(text) {
          return function() {
              return ctx.measureText(text);
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };

  exports.getImageData = function(ctx) {
      return function(x) {
          return function(y) {
              return function(w) {
                  return function(h) {
                      return function() {
                          return ctx.getImageData(x, y, w, h);
                      };
                  };
              };
          };
      };
  };

  exports.putImageDataFull = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function(dx) {
                      return function(dy) {
                          return function(dw) {
                              return function(dh) {
                                  return function() {
                                      ctx.putImageData(image_data, x, y, dx, dy, dw, dh);
                                      return ctx;
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };

  exports.putImageData = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.putImageData(image_data, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.createImageData = function(ctx) {
      return function(sw) {
          return function(sh) {
              return function() {
                  return ctx.createImageData(sw, sh);
              };
          };
      };
  };

  exports.createImageDataCopy = function(ctx) {
      return function(image_data) {
          return function() {
              return ctx.createImageData(image_data);
          };
      };
  };

  exports.getImageDataWidth = function(image_data) {
      return function() {
          return image_data.width;
      };
  };

  exports.getImageDataHeight = function(image_data) {
      return function() {
          return image_data.height;
      };
  };

  exports.getImageDataPixelArray = function(image_data) {
      return function() {
          return image_data.data;
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.drawImageScale = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function(dWidth) {
                      return function(dHeight) {
                          return function() {
                              ctx.drawImage(image_source, dx, dy, dWidth, dHeight);
                              return ctx;
                          };
                      };
                  };
              };
          };
      };
  };

  exports.drawImageFull = function(ctx) {
      return function(image_source) {
          return function(sx) {
              return function(sy) {
                  return function(sWidth) {
                      return function(sHeight) {
                          return function(dx) {
                              return function(dy) {
                                  return function(dWidth) {
                                      return function(dHeight) {
                                          return function() {
                                              ctx.drawImage(image_source, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
                                              return ctx;
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };

  exports.createLinearGradient = function(linearGradient) {
      return function(ctx) {
          return function() {
              return ctx.createLinearGradient(linearGradient.x0, linearGradient.y0, linearGradient.x1, linearGradient.y1);
          };
      };
  };

  exports.createRadialGradient = function(radialGradient) {
      return function(ctx) {
          return function() {
              return ctx.createRadialGradient(radialGradient.x0, radialGradient.y0, radialGradient.r0, radialGradient.x1, radialGradient.y1, radialGradient.r1);
          };
      };
  };

  exports.addColorStop = function(stop) {
      return function(color) {
          return function(gradient) {
              return function() {
                  gradient.addColorStop(stop, color);
                  return gradient;
              };
          };
      };
  };

  exports.setGradientFillStyle = function(gradient) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = gradient;
              return ctx;
          };
      };
  };

  exports.quadraticCurveTo = function(qCurve) {
      return function(ctx) {
          return function() {
              ctx.quadraticCurveTo(qCurve.cpx, qCurve.cpy, qCurve.x, qCurve.y);
              return ctx;
          };
      };
  };

  exports.bezierCurveTo = function(bCurve) {
      return function(ctx) {
          return function() {
              ctx.bezierCurveTo(bCurve.cp1x, bCurve.cp1y, bCurve.cp2x, bCurve.cp2y, bCurve.x, bCurve.y);
              return ctx;
          };
      };
  };

 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];     
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var Round = (function () {
      function Round() {

      };
      Round.value = new Round();
      return Round;
  })();
  var Square = (function () {
      function Square() {

      };
      Square.value = new Square();
      return Square;
  })();
  var Butt = (function () {
      function Butt() {

      };
      Butt.value = new Butt();
      return Butt;
  })();
  var SourceOver = (function () {
      function SourceOver() {

      };
      SourceOver.value = new SourceOver();
      return SourceOver;
  })();
  var SourceIn = (function () {
      function SourceIn() {

      };
      SourceIn.value = new SourceIn();
      return SourceIn;
  })();
  var SourceOut = (function () {
      function SourceOut() {

      };
      SourceOut.value = new SourceOut();
      return SourceOut;
  })();
  var SourceAtop = (function () {
      function SourceAtop() {

      };
      SourceAtop.value = new SourceAtop();
      return SourceAtop;
  })();
  var DestinationOver = (function () {
      function DestinationOver() {

      };
      DestinationOver.value = new DestinationOver();
      return DestinationOver;
  })();
  var DestinationIn = (function () {
      function DestinationIn() {

      };
      DestinationIn.value = new DestinationIn();
      return DestinationIn;
  })();
  var DestinationOut = (function () {
      function DestinationOut() {

      };
      DestinationOut.value = new DestinationOut();
      return DestinationOut;
  })();
  var DestinationAtop = (function () {
      function DestinationAtop() {

      };
      DestinationAtop.value = new DestinationAtop();
      return DestinationAtop;
  })();
  var Lighter = (function () {
      function Lighter() {

      };
      Lighter.value = new Lighter();
      return Lighter;
  })();
  var Copy = (function () {
      function Copy() {

      };
      Copy.value = new Copy();
      return Copy;
  })();
  var Xor = (function () {
      function Xor() {

      };
      Xor.value = new Xor();
      return Xor;
  })();
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var v = action();
              $foreign.restore(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          };
      };
  };
  var textAlign = function (ctx) {
      var unsafeParseTextAlign = function (v) {
          if (v === "left") {
              return AlignLeft.value;
          };
          if (v === "right") {
              return AlignRight.value;
          };
          if (v === "center") {
              return AlignCenter.value;
          };
          if (v === "start") {
              return AlignStart.value;
          };
          if (v === "end") {
              return AlignEnd.value;
          };
          return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("invalid TextAlign: " + v);
      };
      return Prelude["<$>"](Control_Monad_Eff.functorEff)(unsafeParseTextAlign)($foreign.textAlignImpl(ctx));
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.stroke(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          };
      };
  };
  var showTextAlign = new Prelude.Show(function (v) {
      if (v instanceof AlignLeft) {
          return "left";
      };
      if (v instanceof AlignRight) {
          return "right";
      };
      if (v instanceof AlignCenter) {
          return "center";
      };
      if (v instanceof AlignStart) {
          return "start";
      };
      if (v instanceof AlignEnd) {
          return "end";
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 388, column 1 - line 395, column 1: " + [ v.constructor.name ]);
  });
  var showComposite = new Prelude.Show(function (v) {
      if (v instanceof SourceOver) {
          return "source-over";
      };
      if (v instanceof SourceIn) {
          return "source-in";
      };
      if (v instanceof SourceOut) {
          return "source-out";
      };
      if (v instanceof SourceAtop) {
          return "source-atop";
      };
      if (v instanceof DestinationOver) {
          return "destination-over";
      };
      if (v instanceof DestinationIn) {
          return "destination-in";
      };
      if (v instanceof DestinationOut) {
          return "destination-out";
      };
      if (v instanceof DestinationAtop) {
          return "destination-atop";
      };
      if (v instanceof Lighter) {
          return "lighter";
      };
      if (v instanceof Copy) {
          return "copy";
      };
      if (v instanceof Xor) {
          return "xor";
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 228, column 1 - line 241, column 1: " + [ v.constructor.name ]);
  });
  var setTextAlign = function (ctx) {
      return function (textalign) {
          return $foreign.setTextAlignImpl(ctx)(Prelude.show(showTextAlign)(textalign));
      };
  };
  var setLineCap = function (v) {
      if (v instanceof Round) {
          return $foreign.setLineCapImpl("round");
      };
      if (v instanceof Square) {
          return $foreign.setLineCapImpl("square");
      };
      if (v instanceof Butt) {
          return $foreign.setLineCapImpl("butt");
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 209, column 1 - line 210, column 1: " + [ v.constructor.name ]);
  };
  var setGlobalCompositeOperation = function (ctx) {
      return function (composite) {
          return $foreign.setGlobalCompositeOperationImpl(ctx)(Prelude.show(showComposite)(composite));
      };
  };
  var setCanvasDimensions = function (d) {
      return function (ce) {
          return Prelude[">>="](Control_Monad_Eff.bindEff)($foreign.setCanvasHeight(d.height)(ce))($foreign.setCanvasWidth(d.width));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var getCanvasDimensions = function (ce) {
      return function __do() {
          var v = $foreign.getCanvasWidth(ce)();
          var v1 = $foreign.getCanvasHeight(ce)();
          return Prelude["return"](Control_Monad_Eff.applicativeEff)({
              width: v, 
              height: v1
          })();
      };
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.fill(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          };
      };
  };
  exports["AlignLeft"] = AlignLeft;
  exports["AlignRight"] = AlignRight;
  exports["AlignCenter"] = AlignCenter;
  exports["AlignStart"] = AlignStart;
  exports["AlignEnd"] = AlignEnd;
  exports["Round"] = Round;
  exports["Square"] = Square;
  exports["Butt"] = Butt;
  exports["SourceOver"] = SourceOver;
  exports["SourceIn"] = SourceIn;
  exports["SourceOut"] = SourceOut;
  exports["SourceAtop"] = SourceAtop;
  exports["DestinationOver"] = DestinationOver;
  exports["DestinationIn"] = DestinationIn;
  exports["DestinationOut"] = DestinationOut;
  exports["DestinationAtop"] = DestinationAtop;
  exports["Lighter"] = Lighter;
  exports["Copy"] = Copy;
  exports["Xor"] = Xor;
  exports["withContext"] = withContext;
  exports["setTextAlign"] = setTextAlign;
  exports["textAlign"] = textAlign;
  exports["fillPath"] = fillPath;
  exports["strokePath"] = strokePath;
  exports["setGlobalCompositeOperation"] = setGlobalCompositeOperation;
  exports["setLineCap"] = setLineCap;
  exports["setCanvasDimensions"] = setCanvasDimensions;
  exports["getCanvasDimensions"] = getCanvasDimensions;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["showComposite"] = showComposite;
  exports["showTextAlign"] = showTextAlign;
  exports["bezierCurveTo"] = $foreign.bezierCurveTo;
  exports["quadraticCurveTo"] = $foreign.quadraticCurveTo;
  exports["setGradientFillStyle"] = $foreign.setGradientFillStyle;
  exports["addColorStop"] = $foreign.addColorStop;
  exports["createRadialGradient"] = $foreign.createRadialGradient;
  exports["createLinearGradient"] = $foreign.createLinearGradient;
  exports["drawImageFull"] = $foreign.drawImageFull;
  exports["drawImageScale"] = $foreign.drawImageScale;
  exports["drawImage"] = $foreign.drawImage;
  exports["canvasElementToImageSource"] = $foreign.canvasElementToImageSource;
  exports["createImageDataCopy"] = $foreign.createImageDataCopy;
  exports["createImageData"] = $foreign.createImageData;
  exports["putImageDataFull"] = $foreign.putImageDataFull;
  exports["putImageData"] = $foreign.putImageData;
  exports["getImageDataPixelArray"] = $foreign.getImageDataPixelArray;
  exports["getImageDataHeight"] = $foreign.getImageDataHeight;
  exports["getImageDataWidth"] = $foreign.getImageDataWidth;
  exports["getImageData"] = $foreign.getImageData;
  exports["withImage"] = $foreign.withImage;
  exports["restore"] = $foreign.restore;
  exports["save"] = $foreign.save;
  exports["measureText"] = $foreign.measureText;
  exports["strokeText"] = $foreign.strokeText;
  exports["fillText"] = $foreign.fillText;
  exports["setFont"] = $foreign.setFont;
  exports["font"] = $foreign.font;
  exports["transform"] = $foreign.transform;
  exports["translate"] = $foreign.translate;
  exports["rotate"] = $foreign.rotate;
  exports["scale"] = $foreign.scale;
  exports["clearRect"] = $foreign.clearRect;
  exports["strokeRect"] = $foreign.strokeRect;
  exports["fillRect"] = $foreign.fillRect;
  exports["rect"] = $foreign.rect;
  exports["arc"] = $foreign.arc;
  exports["closePath"] = $foreign.closePath;
  exports["moveTo"] = $foreign.moveTo;
  exports["lineTo"] = $foreign.lineTo;
  exports["clip"] = $foreign.clip;
  exports["fill"] = $foreign.fill;
  exports["stroke"] = $foreign.stroke;
  exports["beginPath"] = $foreign.beginPath;
  exports["setGlobalAlpha"] = $foreign.setGlobalAlpha;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["canvasToDataURL"] = $foreign.canvasToDataURL;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Data_Int = PS["Data.Int"];     
  var Color = (function () {
      function Color(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Color.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Color(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Color;
  })();
  var rgba = Color.create;
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return new Color(r, g, b, 1.0);
          };
      };
  };
  var silver = rgb(192.0)(192.0)(192.0);
  var teal = rgb(0.0)(128.0)(128.0);
  var white = rgb(255.0)(255.0)(255.0);
  var yellow = rgb(255.0)(255.0)(0.0);
  var red = rgb(255.0)(0.0)(0.0);
  var purple = rgb(128.0)(0.0)(128.0);
  var olive = rgb(128.0)(128.0)(0.0);
  var navy = rgb(0.0)(0.0)(128.0);
  var maroon = rgb(128.0)(0.0)(0.0);
  var lime = rgb(0.0)(255.0)(0.0);
  var lighten = function (l) {
      return function (v) {
          var interp = function (c) {
              return 255.0 * l + c * (1.0 - l);
          };
          return new Color(interp(v.value0), interp(v.value1), interp(v.value2), v.value3);
      };
  };
  var hsl = function (h) {
      return function (s) {
          return function (l) {
              var h$prime = h / 60.0;
              var chr = (1.0 - $$Math.abs(2.0 * l - 1.0)) * s;
              var m = l - chr / 2.0;
              var x = chr * (1.0 - $$Math.abs($$Math["%"](h$prime)(2.0) - 1.0));
              var rgb1 = (function () {
                  if (h$prime < 1.0) {
                      return {
                          r: chr, 
                          g: x, 
                          b: 0.0
                      };
                  };
                  if (1.0 <= h$prime && h$prime < 2.0) {
                      return {
                          r: x, 
                          g: chr, 
                          b: 0.0
                      };
                  };
                  if (2.0 <= h$prime && h$prime < 3.0) {
                      return {
                          r: 0.0, 
                          g: chr, 
                          b: x
                      };
                  };
                  if (3.0 <= h$prime && h$prime < 4.0) {
                      return {
                          r: 0.0, 
                          g: x, 
                          b: chr
                      };
                  };
                  if (4.0 <= h$prime && h$prime < 5.0) {
                      return {
                          r: x, 
                          g: 0.0, 
                          b: chr
                      };
                  };
                  if (Prelude.otherwise) {
                      return {
                          r: chr, 
                          g: 0.0, 
                          b: x
                      };
                  };
                  throw new Error("Failed pattern match at Graphics.Drawing.Color line 56, column 1 - line 57, column 1: " + [  ]);
              })();
              return rgb(255.0 * (rgb1.r + m))(255.0 * (rgb1.g + m))(255.0 * (rgb1.b + m));
          };
      };
  };
  var green = rgb(0.0)(128.0)(0.0);
  var gray = rgb(128.0)(128.0)(128.0);
  var fuchsia = rgb(255.0)(0.0)(255.0);
  var eqColor = new Prelude.Eq(function (v) {
      return function (v1) {
          return v.value0 === v1.value0 && (v.value1 === v1.value1 && (v.value2 === v1.value2 && v.value3 === v1.value3));
      };
  });
  var darken = function (d) {
      return function (v) {
          var interp = function (c) {
              return c * (1.0 - d);
          };
          return new Color(interp(v.value0), interp(v.value1), interp(v.value2), v.value3);
      };
  };
  var colorString = function (v) {
      return "rgba(" + (Prelude.show(Prelude.showInt)(Data_Int.floor(v.value0)) + ("," + (Prelude.show(Prelude.showInt)(Data_Int.floor(v.value1)) + ("," + (Prelude.show(Prelude.showInt)(Data_Int.floor(v.value2)) + ("," + (Prelude.show(Prelude.showNumber)(v.value3) + ")")))))));
  };
  var blue = rgb(0.0)(0.0)(255.0);
  var black = rgb(0.0)(0.0)(0.0);
  var aqua = rgb(0.0)(255.0)(255.0);
  exports["purple"] = purple;
  exports["fuchsia"] = fuchsia;
  exports["navy"] = navy;
  exports["blue"] = blue;
  exports["teal"] = teal;
  exports["aqua"] = aqua;
  exports["green"] = green;
  exports["lime"] = lime;
  exports["olive"] = olive;
  exports["yellow"] = yellow;
  exports["maroon"] = maroon;
  exports["red"] = red;
  exports["black"] = black;
  exports["gray"] = gray;
  exports["silver"] = silver;
  exports["white"] = white;
  exports["darken"] = darken;
  exports["lighten"] = lighten;
  exports["hsl"] = hsl;
  exports["rgba"] = rgba;
  exports["rgb"] = rgb;
  exports["colorString"] = colorString;
  exports["eqColor"] = eqColor;;
 
})(PS["Graphics.Drawing.Color"] = PS["Graphics.Drawing.Color"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];     
  var FontOptions = function (x) {
      return x;
  };
  var FontFamily = function (x) {
      return x;
  };
  var Font = (function () {
      function Font(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Font.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Font(value0, value1, value2);
              };
          };
      };
      return Font;
  })();
  var smallCaps = {
      style: Data_Maybe.Nothing.value, 
      variant: new Data_Maybe.Just("small-caps"), 
      weight: Data_Maybe.Nothing.value
  };
  var serif = "serif";
  var semigroupFontOptions = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return {
              style: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.style)(v1.style), 
              variant: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.variant)(v1.variant), 
              weight: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.weight)(v1.weight)
          };
      };
  });
  var sansSerif = "sans-serif";
  var optionsString = function (v) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.style), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.variant), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.weight) ]);
  };
  var oblique = {
      style: new Data_Maybe.Just("oblique"), 
      variant: Data_Maybe.Nothing.value, 
      weight: Data_Maybe.Nothing.value
  };
  var monospace = "monospace";
  var monoidFontOptions = new Data_Monoid.Monoid(function () {
      return semigroupFontOptions;
  }, {
      style: Data_Maybe.Nothing.value, 
      variant: Data_Maybe.Nothing.value, 
      weight: Data_Maybe.Nothing.value
  });
  var light = {
      style: Data_Maybe.Nothing.value, 
      variant: Data_Maybe.Nothing.value, 
      weight: new Data_Maybe.Just("lighter")
  };
  var italic = {
      style: new Data_Maybe.Just("italic"), 
      variant: Data_Maybe.Nothing.value, 
      weight: Data_Maybe.Nothing.value
  };
  var fontString = function (v) {
      return optionsString(v.value2) + (" " + (Prelude.show(Prelude.showInt)(v.value1) + ("px " + v.value0)));
  };
  var font = Font.create;
  var fantasy = "fantasy";
  var eqFontOptions = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqString))(v.style)(v1.style) && (Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqString))(v.variant)(v1.variant) && Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqString))(v.weight)(v1.weight));
      };
  });
  var eqFontFamily = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Prelude.eqString)(v)(v1);
      };
  });
  var eqFont = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](eqFontFamily)(v.value0)(v1.value0) && (v.value1 === v1.value1 && Prelude["=="](eqFontOptions)(v.value2)(v1.value2));
      };
  });
  var customFont = FontFamily;
  var cursive = "cursive";
  var bolder = {
      style: Data_Maybe.Nothing.value, 
      variant: Data_Maybe.Nothing.value, 
      weight: new Data_Maybe.Just("bolder")
  };
  var bold = {
      style: Data_Maybe.Nothing.value, 
      variant: Data_Maybe.Nothing.value, 
      weight: new Data_Maybe.Just("bold")
  };
  exports["smallCaps"] = smallCaps;
  exports["oblique"] = oblique;
  exports["italic"] = italic;
  exports["light"] = light;
  exports["bolder"] = bolder;
  exports["bold"] = bold;
  exports["customFont"] = customFont;
  exports["fantasy"] = fantasy;
  exports["cursive"] = cursive;
  exports["monospace"] = monospace;
  exports["sansSerif"] = sansSerif;
  exports["serif"] = serif;
  exports["fontString"] = fontString;
  exports["font"] = font;
  exports["eqFont"] = eqFont;
  exports["eqFontFamily"] = eqFontFamily;
  exports["eqFontOptions"] = eqFontOptions;
  exports["semigroupFontOptions"] = semigroupFontOptions;
  exports["monoidFontOptions"] = monoidFontOptions;;
 
})(PS["Graphics.Drawing.Font"] = PS["Graphics.Drawing.Font"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Drawing_Color = PS["Graphics.Drawing.Color"];
  var Graphics_Drawing_Font = PS["Graphics.Drawing.Font"];
  var $$Math = PS["Math"];     
  var Shadow = function (x) {
      return x;
  };
  var Path = (function () {
      function Path(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Path.create = function (value0) {
          return function (value1) {
              return new Path(value0, value1);
          };
      };
      return Path;
  })();
  var Rectangle = (function () {
      function Rectangle(value0) {
          this.value0 = value0;
      };
      Rectangle.create = function (value0) {
          return new Rectangle(value0);
      };
      return Rectangle;
  })();
  var Circle = (function () {
      function Circle(value0) {
          this.value0 = value0;
      };
      Circle.create = function (value0) {
          return new Circle(value0);
      };
      return Circle;
  })();
  var Composite = (function () {
      function Composite(value0) {
          this.value0 = value0;
      };
      Composite.create = function (value0) {
          return new Composite(value0);
      };
      return Composite;
  })();
  var OutlineStyle = function (x) {
      return x;
  };
  var FillStyle = function (x) {
      return x;
  };
  var Fill = (function () {
      function Fill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fill.create = function (value0) {
          return function (value1) {
              return new Fill(value0, value1);
          };
      };
      return Fill;
  })();
  var Outline = (function () {
      function Outline(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Outline.create = function (value0) {
          return function (value1) {
              return new Outline(value0, value1);
          };
      };
      return Outline;
  })();
  var Text = (function () {
      function Text(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Text.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Text(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Text;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var Scale = (function () {
      function Scale(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return new Scale(value0, value1);
          };
      };
      return Scale;
  })();
  var Translate = (function () {
      function Translate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return new Translate(value0, value1);
          };
      };
      return Translate;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Clipped = (function () {
      function Clipped(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Clipped.create = function (value0) {
          return function (value1) {
              return new Clipped(value0, value1);
          };
      };
      return Clipped;
  })();
  var WithShadow = (function () {
      function WithShadow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WithShadow.create = function (value0) {
          return function (value1) {
              return new WithShadow(value0, value1);
          };
      };
      return WithShadow;
  })();
  var translate = function (tx) {
      return function (ty) {
          return Translate.create({
              translateX: tx, 
              translateY: ty
          });
      };
  };
  var text = Text.create;
  var shadowOffset = function (x) {
      return function (y) {
          return {
              color: Data_Maybe.Nothing.value, 
              blur: Data_Maybe.Nothing.value, 
              offset: new Data_Maybe.Just({
                  x: x, 
                  y: y
              })
          };
      };
  };
  var shadowColor = function (c) {
      return {
          color: new Data_Maybe.Just(c), 
          blur: Data_Maybe.Nothing.value, 
          offset: Data_Maybe.Nothing.value
      };
  };
  var shadowBlur = function (b) {
      return {
          color: Data_Maybe.Nothing.value, 
          blur: new Data_Maybe.Just(b), 
          offset: Data_Maybe.Nothing.value
      };
  };
  var shadow = WithShadow.create;
  var semigroupShape = new Prelude.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Composite) {
              return new Composite(Prelude["++"](Data_List.semigroupList)(v.value0)(Data_List.singleton(v1)));
          };
          if (v1 instanceof Composite) {
              return new Composite(Data_List[":"](v)(v1.value0));
          };
          return new Composite(new Data_List.Cons(v, new Data_List.Cons(v1, Data_List.Nil.value)));
      };
  });
  var semigroupShadow = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return {
              color: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.color)(v1.color), 
              blur: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.blur)(v1.blur), 
              offset: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.offset)(v1.offset)
          };
      };
  });
  var semigroupOutlineStyle = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return {
              color: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.color)(v1.color), 
              lineWidth: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.lineWidth)(v1.lineWidth)
          };
      };
  });
  var semigroupFillStyle = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return {
              color: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.color)(v1.color)
          };
      };
  });
  var semigroupDrawing = new Prelude.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Many) {
              return new Many(Prelude["++"](Data_List.semigroupList)(v.value0)(Data_List.singleton(v1)));
          };
          if (v1 instanceof Many) {
              return new Many(Data_List[":"](v)(v1.value0));
          };
          return new Many(new Data_List.Cons(v, new Data_List.Cons(v1, Data_List.Nil.value)));
      };
  });
  var scale = function (sx) {
      return function (sy) {
          return Scale.create({
              scaleX: sx, 
              scaleY: sy
          });
      };
  };
  var rotate = Rotate.create;
  var render = function (ctx) {
      var renderShape = function (v) {
          if (v instanceof Path && v.value1 instanceof Data_List.Nil) {
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
          };
          if (v instanceof Path && v.value1 instanceof Data_List.Cons) {
              return function __do() {
                  Graphics_Canvas.moveTo(ctx)(v.value1.value0.x)(v.value1.value0.y)();
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value1.value1)(function (p1) {
                      return Graphics_Canvas.lineTo(ctx)(p1.x)(p1.y);
                  })();
                  return Control_Monad.when(Control_Monad_Eff.monadEff)(v.value0)(Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.closePath(ctx)))();
              };
          };
          if (v instanceof Rectangle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.rect(ctx)(v.value0));
          };
          if (v instanceof Circle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.arc(ctx)({
                  x: v.value0.x, 
                  y: v.value0.y, 
                  r: v.value0.r, 
                  start: 0.0, 
                  end: $$Math.pi * 2.0
              }));
          };
          if (v instanceof Composite) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value0)(renderShape);
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 261, column 1 - line 262, column 1: " + [ v.constructor.name ]);
      };
      var applyShadow = function (v) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setShadowColor(Graphics_Drawing_Color.colorString(color))(ctx);
              })();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.blur)(function (blur) {
                  return Graphics_Canvas.setShadowBlur(blur)(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.offset)(function (offset) {
                  return function __do() {
                      Graphics_Canvas.setShadowOffsetX(offset.x)(ctx)();
                      return Graphics_Canvas.setShadowOffsetY(offset.y)(ctx)();
                  };
              })();
          };
      };
      var applyOutlineStyle = function (v) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setStrokeStyle(Graphics_Drawing_Color.colorString(color))(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.lineWidth)(function (width) {
                  return Graphics_Canvas.setLineWidth(width)(ctx);
              })();
          };
      };
      var applyFillStyle = function (v) {
          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
              return Graphics_Canvas.setFillStyle(Graphics_Drawing_Color.colorString(color))(ctx);
          });
      };
      var go = function (v) {
          if (v instanceof Fill) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyFillStyle(v.value1)();
                  return Graphics_Canvas.fillPath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Outline) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyOutlineStyle(v.value1)();
                  return Graphics_Canvas.strokePath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Many) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value0)(go);
          };
          if (v instanceof Scale) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.scale(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Translate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.translate(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Rotate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.rotate(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Clipped) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  renderShape(v.value0)();
                  Graphics_Canvas.clip(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof WithShadow) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyShadow(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Text) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.setFont(Graphics_Drawing_Font.fontString(v.value0))(ctx)();
                  applyFillStyle(v.value3)();
                  return Graphics_Canvas.fillText(ctx)(v.value4)(v.value1)(v.value2)();
              }));
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 261, column 1 - line 262, column 1: " + [ v.constructor.name ]);
      };
      return go;
  };
  var rectangle = function (x) {
      return function (y) {
          return function (w) {
              return function (h) {
                  return new Rectangle({
                      x: x, 
                      y: y, 
                      w: w, 
                      h: h
                  });
              };
          };
      };
  };
  var path = function (dictFoldable) {
      return function ($152) {
          return Path.create(false)(Data_List.toList(dictFoldable)($152));
      };
  };
  var outlined = Prelude.flip(Outline.create);
  var outlineColor = function (c) {
      return {
          color: new Data_Maybe.Just(c), 
          lineWidth: Data_Maybe.Nothing.value
      };
  };
  var monoidShape = new Data_Monoid.Monoid(function () {
      return semigroupShape;
  }, new Composite(Data_Monoid.mempty(Data_List.monoidList)));
  var monoidShadow = new Data_Monoid.Monoid(function () {
      return semigroupShadow;
  }, {
      color: Data_Maybe.Nothing.value, 
      blur: Data_Maybe.Nothing.value, 
      offset: Data_Maybe.Nothing.value
  });
  var monoidOutlineStyle = new Data_Monoid.Monoid(function () {
      return semigroupOutlineStyle;
  }, {
      color: Data_Maybe.Nothing.value, 
      lineWidth: Data_Maybe.Nothing.value
  });
  var monoidFillStyle = new Data_Monoid.Monoid(function () {
      return semigroupFillStyle;
  }, {
      color: Data_Maybe.Nothing.value
  });
  var monoidDrawing = new Data_Monoid.Monoid(function () {
      return semigroupDrawing;
  }, new Many(Data_Monoid.mempty(Data_List.monoidList)));
  var lineWidth = function (c) {
      return {
          color: Data_Maybe.Nothing.value, 
          lineWidth: new Data_Maybe.Just(c)
      };
  };
  var filled = Prelude.flip(Fill.create);
  var fillColor = function (c) {
      return {
          color: new Data_Maybe.Just(c)
      };
  };
  var everywhere = function (f) {
      var go = function (v) {
          if (v instanceof Many) {
              return f(new Many(Prelude.map(Data_List.functorList)(go)(v.value0)));
          };
          if (v instanceof Scale) {
              return f(new Scale(v.value0, go(v.value1)));
          };
          if (v instanceof Translate) {
              return f(new Translate(v.value0, go(v.value1)));
          };
          if (v instanceof Rotate) {
              return f(new Rotate(v.value0, go(v.value1)));
          };
          if (v instanceof Clipped) {
              return f(new Clipped(v.value0, go(v.value1)));
          };
          if (v instanceof WithShadow) {
              return f(new WithShadow(v.value0, go(v.value1)));
          };
          return f(v);
      };
      return go;
  };
  var eqShape = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof Path && v1 instanceof Path) {
              return Prelude["=="](Prelude.eqBoolean)(v.value0)(v1.value0) && (Prelude["=="](Data_List.eqList(Prelude.eqNumber))(Prelude.map(Data_List.functorList)(function (v2) {
                  return v2.x;
              })(v.value1))(Prelude.map(Data_List.functorList)(function (v2) {
                  return v2.x;
              })(v1.value1)) && Prelude["=="](Data_List.eqList(Prelude.eqNumber))(Prelude.map(Data_List.functorList)(function (v2) {
                  return v2.y;
              })(v.value1))(Prelude.map(Data_List.functorList)(function (v2) {
                  return v2.y;
              })(v1.value1)));
          };
          if (v instanceof Rectangle && v1 instanceof Rectangle) {
              return v.value0.x === v1.value0.x && (v.value0.y === v1.value0.y && (v.value0.w === v1.value0.w && v.value0.h === v1.value0.h));
          };
          if (v instanceof Circle && v1 instanceof Circle) {
              return v.value0.x === v1.value0.x && (v.value0.y === v1.value0.y && v.value0.r === v1.value0.r);
          };
          if (v instanceof Composite && v1 instanceof Composite) {
              return Prelude["=="](Data_List.eqList(eqShape))(v.value0)(v1.value0);
          };
          return false;
      };
  });
  var eqShadow = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Data_Maybe.eqMaybe(Graphics_Drawing_Color.eqColor))(v.color)(v1.color) && (Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqNumber))(v.blur)(v1.blur) && Data_Maybe.maybe(Data_Maybe.isNothing(v1.offset))(function (o) {
              return Data_Maybe.maybe(false)(function (o$prime) {
                  return o.x === o$prime.x && o.y === o$prime.y;
              })(v1.offset);
          })(v.offset));
      };
  });
  var eqOutlineStyle = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Data_Maybe.eqMaybe(Graphics_Drawing_Color.eqColor))(v.color)(v1.color) && Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqNumber))(v.lineWidth)(v1.lineWidth);
      };
  });
  var eqFillStyle = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Data_Maybe.eqMaybe(Graphics_Drawing_Color.eqColor))(v.color)(v1.color);
      };
  });
  var eqDrawing = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof Fill && v1 instanceof Fill) {
              return Prelude["=="](eqShape)(v.value0)(v1.value0) && Prelude["=="](eqFillStyle)(v.value1)(v1.value1);
          };
          if (v instanceof Outline && v1 instanceof Outline) {
              return Prelude["=="](eqShape)(v.value0)(v1.value0) && Prelude["=="](eqOutlineStyle)(v.value1)(v1.value1);
          };
          if (v instanceof Text && v1 instanceof Text) {
              return Prelude["=="](Graphics_Drawing_Font.eqFont)(v.value0)(v1.value0) && (v.value1 === v1.value1 && (v.value2 === v1.value2 && (Prelude["=="](eqFillStyle)(v.value3)(v1.value3) && Prelude["=="](Prelude.eqString)(v.value4)(v1.value4))));
          };
          if (v instanceof Many && v1 instanceof Many) {
              return Prelude["=="](Data_List.eqList(eqDrawing))(v.value0)(v1.value0);
          };
          if (v instanceof Scale && v1 instanceof Scale) {
              return v.value0.scaleX === v1.value0.scaleX && (v.value0.scaleY === v1.value0.scaleY && Prelude["=="](eqDrawing)(v.value1)(v1.value1));
          };
          if (v instanceof Translate && v1 instanceof Translate) {
              return v.value0.translateX === v1.value0.translateX && (v.value0.translateY === v1.value0.translateY && Prelude["=="](eqDrawing)(v.value1)(v1.value1));
          };
          if (v instanceof Rotate && v1 instanceof Rotate) {
              return v.value0 === v1.value0 && Prelude["=="](eqDrawing)(v.value1)(v1.value1);
          };
          if (v instanceof Clipped && v1 instanceof Clipped) {
              return Prelude["=="](eqShape)(v.value0)(v1.value0) && Prelude["=="](eqDrawing)(v.value1)(v1.value1);
          };
          if (v instanceof WithShadow && v1 instanceof WithShadow) {
              return Prelude["=="](eqShadow)(v.value0)(v1.value0) && Prelude["=="](eqDrawing)(v.value1)(v1.value1);
          };
          return false;
      };
  });
  var closed = function (dictFoldable) {
      return function ($153) {
          return Path.create(true)(Data_List.toList(dictFoldable)($153));
      };
  };
  var clipped = Clipped.create;
  var circle = function (x) {
      return function (y) {
          return function (r) {
              return new Circle({
                  x: x, 
                  y: y, 
                  r: r
              });
          };
      };
  };
  exports["render"] = render;
  exports["everywhere"] = everywhere;
  exports["text"] = text;
  exports["rotate"] = rotate;
  exports["translate"] = translate;
  exports["scale"] = scale;
  exports["clipped"] = clipped;
  exports["outlined"] = outlined;
  exports["filled"] = filled;
  exports["shadow"] = shadow;
  exports["shadowColor"] = shadowColor;
  exports["shadowBlur"] = shadowBlur;
  exports["shadowOffset"] = shadowOffset;
  exports["lineWidth"] = lineWidth;
  exports["outlineColor"] = outlineColor;
  exports["fillColor"] = fillColor;
  exports["circle"] = circle;
  exports["rectangle"] = rectangle;
  exports["closed"] = closed;
  exports["path"] = path;
  exports["semigroupShape"] = semigroupShape;
  exports["monoidShape"] = monoidShape;
  exports["eqShape"] = eqShape;
  exports["semigroupFillStyle"] = semigroupFillStyle;
  exports["monoidFillStyle"] = monoidFillStyle;
  exports["eqFillStyle"] = eqFillStyle;
  exports["semigroupOutlineStyle"] = semigroupOutlineStyle;
  exports["monoidOutlineStyle"] = monoidOutlineStyle;
  exports["eqOutlineStyle"] = eqOutlineStyle;
  exports["eqShadow"] = eqShadow;
  exports["semigroupShadow"] = semigroupShadow;
  exports["monoidShadow"] = monoidShadow;
  exports["semigroupDrawing"] = semigroupDrawing;
  exports["monoidDrawing"] = monoidDrawing;
  exports["eqDrawing"] = eqDrawing;;
 
})(PS["Graphics.Drawing"] = PS["Graphics.Drawing"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var DOM = PS["DOM"];
  var Signal_Channel = PS["Signal.Channel"];
  var Flare = PS["Flare"];     
  var runFlareDrawing = function (controls) {
      return function (canvasID) {
          return function (ui) {
              return function __do() {
                  var v = Graphics_Canvas.getCanvasElementById(canvasID)();
                  if (v instanceof Data_Maybe.Just) {
                      var v1 = Graphics_Canvas.getContext2D(v.value0)();
                      var v2 = Graphics_Canvas.getCanvasWidth(v.value0)();
                      var v3 = Graphics_Canvas.getCanvasHeight(v.value0)();
                      return (function () {
                          var render$prime = function (drawing) {
                              return function __do() {
                                  Graphics_Canvas.clearRect(v1)({
                                      x: 0.0, 
                                      y: 0.0, 
                                      w: v2, 
                                      h: v3
                                  })();
                                  return Graphics_Drawing.render(v1)(drawing)();
                              };
                          };
                          return Flare.runFlareWith(controls)(render$prime)(ui);
                      })()();
                  };
                  throw new Error("Failed pattern match at Flare.Drawing line 25, column 1 - line 29, column 1: " + [ v.constructor.name ]);
              };
          };
      };
  };
  exports["runFlareDrawing"] = runFlareDrawing;;
 
})(PS["Flare.Drawing"] = PS["Flare.Drawing"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Apply = PS["Control.Apply"];     
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Element(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var $bang = function (dictAttributable) {
      return $$with(dictAttributable);
  };
  var $bang$qmark = function (dictAttributable) {
      return function (h) {
          return function (c) {
              return function (a) {
                  if (c) {
                      return $bang(dictAttributable)(h)(a);
                  };
                  if (!c) {
                      return h;
                  };
                  throw new Error("Failed pattern match at Text.Smolder.Markup line 92, column 1 - line 93, column 1: " + [ c.constructor.name ]);
              };
          };
      };
  };
  var text = function (s) {
      return new Content(s, new Return(Prelude.unit));
  };
  var semigroupAttribute = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return new Attribute(Prelude.append(Prelude.semigroupArray)(v.value0)(v1.value0));
      };
  });
  var parent = function (el) {
      return function (kids) {
          return new Element(el, new Data_Maybe.Just(kids), [  ], new Return(Prelude.unit));
      };
  };
  var monoidAttribute = new Data_Monoid.Monoid(function () {
      return semigroupAttribute;
  }, new Attribute(Data_Monoid.mempty(Data_Monoid.monoidArray)));
  var leaf = function (el) {
      return new Element(el, Data_Maybe.Nothing.value, [  ], new Return(Prelude.unit));
  };
  var functorMarkupM = new Prelude.Functor(function (f) {
      return function (v) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, Prelude.map(functorMarkupM)(f)(v.value3));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Prelude.map(functorMarkupM)(f)(v.value1));
          };
          if (v instanceof Return) {
              return new Return(f(v.value0));
          };
          throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var attribute = function (key) {
      return function (value) {
          return new Attribute([ new Attr(key, value) ]);
      };
  };
  var attributableMarkupM = new Attributable(function (v) {
      return function (v1) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, Prelude["<>"](Prelude.semigroupArray)(v.value2)(v1.value0), v.value3);
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 79, column 1 - line 82, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var attributableMarkupMF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkupM)(k(m))(xs);
          };
      };
  });
  var monadMarkupM = new Prelude.Monad(function () {
      return applicativeMarkupM;
  }, function () {
      return bindMarkupM;
  });
  var bindMarkupM = new Prelude.Bind(function () {
      return applyMarkupM;
  }, function (v) {
      return function (f) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, Prelude.bind(bindMarkupM)(v.value3)(f));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Prelude.bind(bindMarkupM)(v.value1)(f));
          };
          if (v instanceof Return) {
              return f(v.value0);
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, f.constructor.name ]);
      };
  });
  var applyMarkupM = new Prelude.Apply(function () {
      return functorMarkupM;
  }, Prelude.ap(monadMarkupM));
  var applicativeMarkupM = new Prelude.Applicative(function () {
      return applyMarkupM;
  }, Return.create);
  var semigroupMarkupM = new Prelude.Semigroup(function (x) {
      return function (y) {
          return Control_Apply["*>"](applyMarkupM)(x)(y);
      };
  });
  var monoidMarkup = new Data_Monoid.Monoid(function () {
      return semigroupMarkupM;
  }, new Return(Prelude.unit));
  exports["Attr"] = Attr;
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Return"] = Return;
  exports["Attributable"] = Attributable;
  exports["!?"] = $bang$qmark;
  exports["!"] = $bang;
  exports["attribute"] = attribute;
  exports["with"] = $$with;
  exports["text"] = text;
  exports["leaf"] = leaf;
  exports["parent"] = parent;
  exports["semigroupMarkupM"] = semigroupMarkupM;
  exports["monoidMarkup"] = monoidMarkup;
  exports["functorMarkupM"] = functorMarkupM;
  exports["applyMarkupM"] = applyMarkupM;
  exports["applicativeMarkupM"] = applicativeMarkupM;
  exports["bindMarkupM"] = bindMarkupM;
  exports["monadMarkupM"] = monadMarkupM;
  exports["semigroupAttribute"] = semigroupAttribute;
  exports["monoidAttribute"] = monoidAttribute;
  exports["attributableMarkupM"] = attributableMarkupM;
  exports["attributableMarkupMF"] = attributableMarkupMF;;
 
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_Foldable = PS["Data.Foldable"];     
  var Element = (function () {
      function Element(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Element(value0, value1, value2);
              };
          };
      };
      return Element;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var renderAttrs = (function () {
      var toTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0, v.value1);
      };
      return function ($18) {
          return Data_Map.fromList(Prelude.ordString)(Prelude.map(Data_List.functorList)(toTuple)(Data_List.toList(Data_Foldable.foldableArray)($18)));
      };
  })();
  var renderMarkup = function (v) {
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Just) {
          return Data_List[":"](new Element(v.value0, renderAttrs(v.value2), renderMarkup(v.value1.value0)))(renderMarkup(v.value3));
      };
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Nothing) {
          return Data_List[":"](new Element(v.value0, renderAttrs(v.value2), Data_List.Nil.value))(renderMarkup(v.value3));
      };
      if (v instanceof Text_Smolder_Markup.Content) {
          return Data_List[":"](new Text(v.value0))(renderMarkup(v.value1));
      };
      if (v instanceof Text_Smolder_Markup.Return) {
          return Data_List.Nil.value;
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  exports["Element"] = Element;
  exports["Text"] = Text;
  exports["renderMarkup"] = renderMarkup;;
 
})(PS["Text.Smolder.Renderer.Util"] = PS["Text.Smolder.Renderer.Util"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Map = PS["Data.Map"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_Util = PS["Text.Smolder.Renderer.Util"];
  var Data_Monoid = PS["Data.Monoid"];     
  var renderNode = function (v) {
      if (v instanceof Text_Smolder_Renderer_Util.Element) {
          var showTail = function (v1) {
              if (v1 instanceof Data_List.Nil) {
                  return "/>";
              };
              return ">" + (Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(renderNode)(v1)) + ("</" + (v.value0 + ">")));
          };
          var showAttrs = function (a1) {
              var pair = function (k) {
                  return " " + (k + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v1) {
                      return "=\"" + (v1 + "\"");
                  })(Data_Map.lookup(Prelude.ordString)(k)(a1)));
              };
              return Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(pair)(Data_Map.keys(a1)));
          };
          return "<" + (v.value0 + (showAttrs(v.value1) + showTail(v.value2)));
      };
      if (v instanceof Text_Smolder_Renderer_Util.Text) {
          return v.value0;
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var render = function ($8) {
      return Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(renderNode)(Text_Smolder_Renderer_Util.renderMarkup($8)));
  };
  exports["renderNode"] = renderNode;
  exports["render"] = render;;
 
})(PS["Text.Smolder.Renderer.String"] = PS["Text.Smolder.Renderer.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Signal_Channel = PS["Signal.Channel"];
  var Flare = PS["Flare"];     
  var runFlareHTML = function (controls) {
      return function (target) {
          return function ($0) {
              return Flare.runFlare(controls)(target)(Prelude.map(Flare.functorUI)(Text_Smolder_Renderer_String.render)($0));
          };
      };
  };
  exports["runFlareHTML"] = runFlareHTML;;
 
})(PS["Flare.Smolder"] = PS["Flare.Smolder"] || {});
(function(exports) {
  /* global exports */
  /* global XMLHttpRequest */
  /* global module */
  "use strict";

  // module Network.HTTP.Affjax

  // jshint maxparams: 5
  exports._ajax = function (mkHeader, options, canceler, errback, callback) {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function () {
      var xhr = platformSpecific.newXHR();
      var fixedUrl = platformSpecific.fixupUrl(options.url);
      xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
      if (options.headers) {
        for (var i = 0, header; (header = options.headers[i]) != null; i++) {
          xhr.setRequestHeader(header.field, header.value);
        }
      }
      xhr.onerror = function () {
        errback(new Error("AJAX request failed: " + options.method + " " + options.url))();
      };
      xhr.onload = function () {
        callback({
          status: xhr.status,
          headers: xhr.getAllResponseHeaders().split("\n")
            .filter(function (header) {
              return header.length > 0;
            })
            .map(function (header) {
              var i = header.indexOf(":");
              return mkHeader(header.substring(0, i))(header.substring(i + 2));
            }),
          response: platformSpecific.getResponse(xhr)
        })();
      };
      xhr.responseType = options.responseType;
      xhr.send(options.content);
      return canceler(xhr);
    };
  };

  // jshint maxparams: 4
  exports._cancelAjax = function (xhr, cancelError, errback, callback) {
    return function () {
      try { xhr.abort(); } catch (e) { return callback(false)(); }
      return callback(true)();
    };
  };

 
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var MimeType = function (x) {
      return x;
  };
  var showMimeType = new Prelude.Show(function (v) {
      return "(MimeType " + (Prelude.show(Prelude.showString)(v) + ")");
  });
  var mimeTypeToString = function (v) {
      return v;
  };
  var eqMimeType = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Prelude.eqString)(v)(v1);
      };
  });
  exports["MimeType"] = MimeType;
  exports["mimeTypeToString"] = mimeTypeToString;
  exports["eqMimeType"] = eqMimeType;
  exports["showMimeType"] = showMimeType;;
 
})(PS["Network.HTTP.MimeType"] = PS["Network.HTTP.MimeType"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];     
  var textXML = "text/xml";
  var textPlain = "text/plain";
  var textHTML = "text/html";
  var textCSV = "text/csv";
  var multipartFormData = "multipart/form-data";
  var imagePNG = "image/png";
  var imageJPEG = "image/jpeg";
  var imageGIF = "image/gif";
  var applicationXML = "application/xml";
  var applicationOctetStream = "application/octet-stream";
  var applicationJavascript = "application/javascript";
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";
  exports["textXML"] = textXML;
  exports["textPlain"] = textPlain;
  exports["textHTML"] = textHTML;
  exports["textCSV"] = textCSV;
  exports["multipartFormData"] = multipartFormData;
  exports["imagePNG"] = imagePNG;
  exports["imageJPEG"] = imageJPEG;
  exports["imageGIF"] = imageGIF;
  exports["applicationXML"] = applicationXML;
  exports["applicationOctetStream"] = applicationOctetStream;
  exports["applicationJavascript"] = applicationJavascript;
  exports["applicationJSON"] = applicationJSON;
  exports["applicationFormURLEncoded"] = applicationFormURLEncoded;;
 
})(PS["Network.HTTP.MimeType.Common"] = PS["Network.HTTP.MimeType.Common"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];
  var Network_HTTP_MimeType_Common = PS["Network.HTTP.MimeType.Common"];     
  var Requestable = function (toRequest) {
      this.toRequest = toRequest;
  };
  var toRequest = function (dict) {
      return dict.toRequest;
  };
  var requestableJson = new Requestable(function (json) {
      return new Data_Tuple.Tuple(new Data_Maybe.Just(Network_HTTP_MimeType_Common.applicationJSON), Unsafe_Coerce.unsafeCoerce(Prelude.show(Data_Argonaut_Core.showJson)(json)));
  });
  var defaultToRequest = function ($0) {
      return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)(Unsafe_Coerce.unsafeCoerce($0));
  };
  var requestableBlob = new Requestable(defaultToRequest);
  var requestableDocument = new Requestable(defaultToRequest);
  var requestableFloat32Array = new Requestable(defaultToRequest);
  var requestableFloat64Array = new Requestable(defaultToRequest);
  var requestableFormData = new Requestable(defaultToRequest);
  var requestableInt16Array = new Requestable(defaultToRequest);
  var requestableInt32Array = new Requestable(defaultToRequest);
  var requestableInt8Array = new Requestable(defaultToRequest);
  var requestableRequestContent = new Requestable(defaultToRequest);
  var requestableString = new Requestable(defaultToRequest);
  var requestableUint16Array = new Requestable(defaultToRequest);
  var requestableUint32Array = new Requestable(defaultToRequest);
  var requestableUint8Array = new Requestable(defaultToRequest);
  var requestableUint8ClampedArray = new Requestable(defaultToRequest);
  var requestableUnit = new Requestable(defaultToRequest);
  exports["Requestable"] = Requestable;
  exports["toRequest"] = toRequest;
  exports["requestableRequestContent"] = requestableRequestContent;
  exports["requestableInt8Array"] = requestableInt8Array;
  exports["requestableInt16Array"] = requestableInt16Array;
  exports["requestableInt32Array"] = requestableInt32Array;
  exports["requestableUint8Array"] = requestableUint8Array;
  exports["requestableUint16Array"] = requestableUint16Array;
  exports["requestableUint32Array"] = requestableUint32Array;
  exports["requestableUint8ClampedArray"] = requestableUint8ClampedArray;
  exports["requestableFloat32Array"] = requestableFloat32Array;
  exports["requestableFloat64Array"] = requestableFloat64Array;
  exports["requestableBlob"] = requestableBlob;
  exports["requestableDocument"] = requestableDocument;
  exports["requestableString"] = requestableString;
  exports["requestableJson"] = requestableJson;
  exports["requestableFormData"] = requestableFormData;
  exports["requestableUnit"] = requestableUnit;;
 
})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];
  var Network_HTTP_MimeType_Common = PS["Network.HTTP.MimeType.Common"];     
  var ArrayBufferResponse = (function () {
      function ArrayBufferResponse() {

      };
      ArrayBufferResponse.value = new ArrayBufferResponse();
      return ArrayBufferResponse;
  })();
  var BlobResponse = (function () {
      function BlobResponse() {

      };
      BlobResponse.value = new BlobResponse();
      return BlobResponse;
  })();
  var DocumentResponse = (function () {
      function DocumentResponse() {

      };
      DocumentResponse.value = new DocumentResponse();
      return DocumentResponse;
  })();
  var JSONResponse = (function () {
      function JSONResponse() {

      };
      JSONResponse.value = new JSONResponse();
      return JSONResponse;
  })();
  var StringResponse = (function () {
      function StringResponse() {

      };
      StringResponse.value = new StringResponse();
      return StringResponse;
  })();
  var Respondable = function (fromResponse, responseType) {
      this.fromResponse = fromResponse;
      this.responseType = responseType;
  };
  var showResponseType = new Prelude.Show(function (v) {
      if (v instanceof ArrayBufferResponse) {
          return "ArrayBufferResponse";
      };
      if (v instanceof BlobResponse) {
          return "BlobResponse";
      };
      if (v instanceof DocumentResponse) {
          return "DocumentResponse";
      };
      if (v instanceof JSONResponse) {
          return "JSONResponse";
      };
      if (v instanceof StringResponse) {
          return "StringResponse";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 45, column 1 - line 52, column 1: " + [ v.constructor.name ]);
  });
  var responseTypeToString = function (v) {
      if (v instanceof ArrayBufferResponse) {
          return "arraybuffer";
      };
      if (v instanceof BlobResponse) {
          return "blob";
      };
      if (v instanceof DocumentResponse) {
          return "document";
      };
      if (v instanceof JSONResponse) {
          return "text";
      };
      if (v instanceof StringResponse) {
          return "text";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 52, column 1 - line 53, column 1: " + [ v.constructor.name ]);
  };
  var responseType = function (dict) {
      return dict.responseType;
  };
  var responsableUnit = new Respondable(Prelude["const"](new Data_Either.Right(Prelude.unit)), new Data_Tuple.Tuple(Data_Maybe.Nothing.value, StringResponse.value));
  var responsableString = new Respondable(Data_Foreign.readString, new Data_Tuple.Tuple(Data_Maybe.Nothing.value, StringResponse.value));
  var responsableJson = new Respondable(function ($8) {
      return Data_Either.Right.create(Unsafe_Coerce.unsafeCoerce($8));
  }, new Data_Tuple.Tuple(new Data_Maybe.Just(Network_HTTP_MimeType_Common.applicationJSON), JSONResponse.value));
  var responsableForeign = new Respondable(function ($9) {
      return Data_Either.Right.create(Unsafe_Coerce.unsafeCoerce($9));
  }, new Data_Tuple.Tuple(Data_Maybe.Nothing.value, JSONResponse.value));
  var responsableDocument = new Respondable(Data_Foreign.unsafeReadTagged("Document"), new Data_Tuple.Tuple(Data_Maybe.Nothing.value, DocumentResponse.value));
  var responsableBlob = new Respondable(Data_Foreign.unsafeReadTagged("Blob"), new Data_Tuple.Tuple(Data_Maybe.Nothing.value, BlobResponse.value));
  var responsableArrayBuffer = new Respondable(Data_Foreign.unsafeReadTagged("ArrayBuffer"), new Data_Tuple.Tuple(Data_Maybe.Nothing.value, ArrayBufferResponse.value));
  var fromResponse = function (dict) {
      return dict.fromResponse;
  };
  var eqResponseType = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof ArrayBufferResponse && v1 instanceof ArrayBufferResponse) {
              return true;
          };
          if (v instanceof BlobResponse && v1 instanceof BlobResponse) {
              return true;
          };
          if (v instanceof DocumentResponse && v1 instanceof DocumentResponse) {
              return true;
          };
          if (v instanceof JSONResponse && v1 instanceof JSONResponse) {
              return true;
          };
          if (v instanceof StringResponse && v1 instanceof StringResponse) {
              return true;
          };
          return false;
      };
  });
  exports["ArrayBufferResponse"] = ArrayBufferResponse;
  exports["BlobResponse"] = BlobResponse;
  exports["DocumentResponse"] = DocumentResponse;
  exports["JSONResponse"] = JSONResponse;
  exports["StringResponse"] = StringResponse;
  exports["Respondable"] = Respondable;
  exports["fromResponse"] = fromResponse;
  exports["responseType"] = responseType;
  exports["responseTypeToString"] = responseTypeToString;
  exports["eqResponseType"] = eqResponseType;
  exports["showResponseType"] = showResponseType;
  exports["responsableBlob"] = responsableBlob;
  exports["responsableDocument"] = responsableDocument;
  exports["responsableForeign"] = responsableForeign;
  exports["responsableString"] = responsableString;
  exports["responsableUnit"] = responsableUnit;
  exports["responsableArrayBuffer"] = responsableArrayBuffer;
  exports["responsableJson"] = responsableJson;;
 
})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var CustomMethod = (function () {
      function CustomMethod(value0) {
          this.value0 = value0;
      };
      CustomMethod.create = function (value0) {
          return new CustomMethod(value0);
      };
      return CustomMethod;
  })();
  var showMethod = new Prelude.Show(function (v) {
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof CustomMethod) {
          return "(CustomMethod " + (Prelude.show(Prelude.showString)(v.value0) + ")");
      };
      throw new Error("Failed pattern match at Network.HTTP.Method line 29, column 1 - line 41, column 1: " + [ v.constructor.name ]);
  });
  var methodToString = function (v) {
      if (v instanceof CustomMethod) {
          return v.value0;
      };
      return Prelude.show(showMethod)(v);
  };
  var eqMethod = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof DELETE && v1 instanceof DELETE) {
              return true;
          };
          if (v instanceof GET && v1 instanceof GET) {
              return true;
          };
          if (v instanceof HEAD && v1 instanceof HEAD) {
              return true;
          };
          if (v instanceof OPTIONS && v1 instanceof OPTIONS) {
              return true;
          };
          if (v instanceof PATCH && v1 instanceof PATCH) {
              return true;
          };
          if (v instanceof POST && v1 instanceof POST) {
              return true;
          };
          if (v instanceof PUT && v1 instanceof PUT) {
              return true;
          };
          if (v instanceof MOVE && v1 instanceof MOVE) {
              return true;
          };
          if (v instanceof COPY && v1 instanceof COPY) {
              return true;
          };
          return false;
      };
  });
  exports["DELETE"] = DELETE;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["OPTIONS"] = OPTIONS;
  exports["PATCH"] = PATCH;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["MOVE"] = MOVE;
  exports["COPY"] = COPY;
  exports["CustomMethod"] = CustomMethod;
  exports["methodToString"] = methodToString;
  exports["eqMethod"] = eqMethod;
  exports["showMethod"] = showMethod;;
 
})(PS["Network.HTTP.Method"] = PS["Network.HTTP.Method"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];     
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var showRequestHeader = new Prelude.Show(function (v) {
      if (v instanceof Accept) {
          return "(Accept " + (Prelude.show(Network_HTTP_MimeType.showMimeType)(v.value0) + ")");
      };
      if (v instanceof ContentType) {
          return "(ContentType " + (Prelude.show(Network_HTTP_MimeType.showMimeType)(v.value0) + ")");
      };
      if (v instanceof RequestHeader) {
          return "(RequestHeader " + (Prelude.show(Prelude.showString)(v.value0) + (" " + (Prelude.show(Prelude.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 18, column 1 - line 23, column 1: " + [ v.constructor.name ]);
  });
  var requestHeaderValue = function (v) {
      if (v instanceof Accept) {
          return Network_HTTP_MimeType.mimeTypeToString(v.value0);
      };
      if (v instanceof ContentType) {
          return Network_HTTP_MimeType.mimeTypeToString(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 28, column 1 - line 29, column 1: " + [ v.constructor.name ]);
  };
  var requestHeaderName = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 23, column 1 - line 24, column 1: " + [ v.constructor.name ]);
  };
  var eqRequestHeader = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof Accept && v1 instanceof Accept) {
              return Prelude["=="](Network_HTTP_MimeType.eqMimeType)(v.value0)(v1.value0);
          };
          if (v instanceof ContentType && v1 instanceof ContentType) {
              return Prelude["=="](Network_HTTP_MimeType.eqMimeType)(v.value0)(v1.value0);
          };
          if (v instanceof RequestHeader && v1 instanceof RequestHeader) {
              return Prelude["=="](Prelude.eqString)(v.value0)(v1.value0) && Prelude["=="](Prelude.eqString)(v.value1)(v1.value1);
          };
          return false;
      };
  });
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["requestHeaderValue"] = requestHeaderValue;
  exports["requestHeaderName"] = requestHeaderName;
  exports["eqRequestHeader"] = eqRequestHeader;
  exports["showRequestHeader"] = showRequestHeader;;
 
})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var showResponseHeader = new Prelude.Show(function (v) {
      return "(ResponseHeader " + (Prelude.show(Prelude.showString)(v.value0) + (" " + (Prelude.show(Prelude.showString)(v.value1) + ")")));
  });
  var responseHeaderValue = function (v) {
      return v.value1;
  };
  var responseHeaderName = function (v) {
      return v.value0;
  };
  var responseHeader = function (field) {
      return function (value) {
          return new ResponseHeader(field, value);
      };
  };
  var eqResponseHeader = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Prelude.eqString)(v.value0)(v1.value0) && Prelude["=="](Prelude.eqString)(v.value1)(v1.value1);
      };
  });
  exports["responseHeaderValue"] = responseHeaderValue;
  exports["responseHeaderName"] = responseHeaderName;
  exports["responseHeader"] = responseHeader;
  exports["eqResponseHeader"] = eqResponseHeader;
  exports["showResponseHeader"] = showResponseHeader;;
 
})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var StatusCode = function (x) {
      return x;
  };
  var showStatusCode = new Prelude.Show(function (v) {
      return "(StatusCode " + (Prelude.show(Prelude.showInt)(v) + ")");
  });
  var eqStatusCode = new Prelude.Eq(function (v) {
      return function (v1) {
          return v === v1;
      };
  });
  exports["StatusCode"] = StatusCode;
  exports["eqStatusCode"] = eqStatusCode;
  exports["showStatusCode"] = showStatusCode;;
 
})(PS["Network.HTTP.StatusCode"] = PS["Network.HTTP.StatusCode"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Network.HTTP.Affjax"];
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];
  var Network_HTTP_Method = PS["Network.HTTP.Method"];
  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];     
  var retry = function (dictRequestable) {
      return function (policy) {
          return function (run) {
              return function (req) {
                  var retryState = function (v) {
                      if (v instanceof Data_Either.Left) {
                          return Data_Either.Left.create(new Data_Either.Left(v.value0));
                      };
                      if (v instanceof Data_Either.Right) {
                          if (v.value0.status === 200) {
                              return new Data_Either.Right(v.value0);
                          };
                          var $32 = policy.shouldRetryWithStatusCode(v.value0.status);
                          if ($32) {
                              return Data_Either.Left.create(new Data_Either.Right(v.value0));
                          };
                          if (!$32) {
                              return new Data_Either.Right(v.value0);
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 184, column 5 - line 185, column 5: " + [ $32.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Network.HTTP.Affjax line 184, column 5 - line 185, column 5: " + [ v.constructor.name ]);
                  };
                  var go = function (failureRef) {
                      return function (n) {
                          return Prelude.bind(Control_Monad_Aff.bindAff)(Prelude["<$>"](Control_Monad_Aff.functorAff)(retryState)(Control_Monad_Aff.attempt(run(req))))(function (v) {
                              if (v instanceof Data_Either.Left) {
                                  return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.writeRef(failureRef)(new Data_Maybe.Just(v.value0))))(function () {
                                      return Control_Monad_Aff["later'"](policy.delayCurve(n))(go(failureRef)(n + 1 | 0));
                                  });
                              };
                              if (v instanceof Data_Either.Right) {
                                  return Prelude.pure(Control_Monad_Aff.applicativeAff)(v.value0);
                              };
                              throw new Error("Failed pattern match at Network.HTTP.Affjax line 161, column 1 - line 162, column 1: " + [ v.constructor.name ]);
                          });
                      };
                  };
                  return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef(Data_Maybe.Nothing.value)))(function (v) {
                      var loop = go(v);
                      if (policy.timeout instanceof Data_Maybe.Nothing) {
                          return loop(1);
                      };
                      if (policy.timeout instanceof Data_Maybe.Just) {
                          return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v1) {
                              return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(loop(1))(function ($75) {
                                  return Control_Monad_Aff_AVar.putVar(v1)(Data_Maybe.Just.create($75));
                              })))(function (v2) {
                                  return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Control_Monad_Aff["later'"](policy.timeout.value0)(Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(v1)(Data_Maybe.Nothing.value))(function () {
                                      return Control_Monad_Aff.cancel(v2)(Control_Monad_Eff_Exception.error("Cancel"));
                                  }))))(function (v3) {
                                      return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v1))(function (v4) {
                                          if (v4 instanceof Data_Maybe.Nothing) {
                                              return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v)))(function (v5) {
                                                  if (v5 instanceof Data_Maybe.Nothing) {
                                                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff)(Control_Monad_Eff_Exception.error("Timeout"));
                                                  };
                                                  if (v5 instanceof Data_Maybe.Just) {
                                                      return Data_Either.either(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff))(Prelude.pure(Control_Monad_Aff.applicativeAff))(v5.value0);
                                                  };
                                                  throw new Error("Failed pattern match at Network.HTTP.Affjax line 161, column 1 - line 162, column 1: " + [ v5.constructor.name ]);
                                              });
                                          };
                                          if (v4 instanceof Data_Maybe.Just) {
                                              return Prelude.pure(Control_Monad_Aff.applicativeAff)(v4.value0);
                                          };
                                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 161, column 1 - line 162, column 1: " + [ v4.constructor.name ]);
                                      });
                                  });
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Network.HTTP.Affjax line 161, column 1 - line 162, column 1: " + [ policy.timeout.constructor.name ]);
                  });
              };
          };
      };
  };
  var defaultRetryPolicy = {
      timeout: Data_Maybe.Nothing.value, 
      delayCurve: function (n) {
          return Data_Int.round($$Math.max(30.0 * 1000.0)(100.0 * $$Math.pow(2.0)(Data_Int.toNumber(n - 1))));
      }, 
      shouldRetryWithStatusCode: function (v) {
          return false;
      }
  };
  var defaultRequest = {
      method: Network_HTTP_Method.GET.value, 
      url: "/", 
      headers: [  ], 
      content: Data_Maybe.Nothing.value, 
      username: Data_Maybe.Nothing.value, 
      password: Data_Maybe.Nothing.value
  };
  var cancelAjax = function (xhr) {
      return function (err) {
          return Control_Monad_Aff.makeAff(function (eb) {
              return function (cb) {
                  return $foreign._cancelAjax(xhr, err, eb, cb);
              };
          });
      };
  };
  var affjax$prime = function (dictRequestable) {
      return function (dictRespondable) {
          return function (req) {
              return function (eb) {
                  return function (cb) {
                      var responseSettings = Network_HTTP_Affjax_Response.responseType(dictRespondable);
                      var requestSettings = (function () {
                          var $51 = Prelude["<$>"](Data_Maybe.functorMaybe)(Network_HTTP_Affjax_Request.toRequest(dictRequestable))(req.content);
                          if ($51 instanceof Data_Maybe.Nothing) {
                              return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                          };
                          if ($51 instanceof Data_Maybe.Just) {
                              return new Data_Tuple.Tuple($51.value0.value0, new Data_Maybe.Just($51.value0.value1));
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 204, column 1 - line 209, column 1: " + [ $51.constructor.name ]);
                      })();
                      var fromResponse$prime = (function () {
                          var $55 = Data_Tuple.snd(responseSettings);
                          if ($55 instanceof Network_HTTP_Affjax_Response.JSONResponse) {
                              return Control_Bind["<=<"](Data_Either.bindEither)(Network_HTTP_Affjax_Response.fromResponse(dictRespondable))(Control_Bind["<=<"](Data_Either.bindEither)(Data_Foreign.parseJSON)(Data_Foreign.readString));
                          };
                          return Network_HTTP_Affjax_Response.fromResponse(dictRespondable);
                      })();
                      var cb$prime = function (res) {
                          var $58 = Prelude["<$>"](Data_Either.functorEither)(function (v) {
                              var $56 = {};
                              for (var $57 in res) {
                                  if (res.hasOwnProperty($57)) {
                                      $56[$57] = res[$57];
                                  };
                              };
                              $56.response = v;
                              return $56;
                          })(fromResponse$prime(res.response));
                          if ($58 instanceof Data_Either.Left) {
                              return eb(Control_Monad_Eff_Exception.error(Prelude.show(Data_Foreign.showForeignError)($58.value0)));
                          };
                          if ($58 instanceof Data_Either.Right) {
                              return cb($58.value0);
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 204, column 1 - line 209, column 1: " + [ $58.constructor.name ]);
                      };
                      var addHeader = function (h) {
                          return function (hs) {
                              if (h instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(Data_Function.on(Prelude.eq(Prelude.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(h.value0))(hs)) {
                                  return Data_Array.snoc(hs)(h.value0);
                              };
                              return hs;
                          };
                      };
                      var headers = addHeader(Prelude["<$>"](Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Data_Tuple.fst(requestSettings)))(addHeader(Prelude["<$>"](Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Data_Tuple.fst(responseSettings)))(req.headers));
                      var req$prime = {
                          method: Network_HTTP_Method.methodToString(req.method), 
                          url: req.url, 
                          headers: Prelude["<$>"](Prelude.functorArray)(function (h) {
                              return {
                                  field: Network_HTTP_RequestHeader.requestHeaderName(h), 
                                  value: Network_HTTP_RequestHeader.requestHeaderValue(h)
                              };
                          })(headers), 
                          content: Data_Nullable.toNullable(Data_Tuple.snd(requestSettings)), 
                          responseType: Network_HTTP_Affjax_Response.responseTypeToString(Data_Tuple.snd(responseSettings)), 
                          username: Data_Nullable.toNullable(req.username), 
                          password: Data_Nullable.toNullable(req.password)
                      };
                      return $foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime, cancelAjax, eb, cb$prime);
                  };
              };
          };
      };
  };
  var affjax = function (dictRequestable) {
      return function (dictRespondable) {
          return function ($76) {
              return Control_Monad_Aff["makeAff'"](affjax$prime(dictRequestable)(dictRespondable)($76));
          };
      };
  };
  var $$delete = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $63 = {};
              for (var $64 in defaultRequest) {
                  if (defaultRequest.hasOwnProperty($64)) {
                      $63[$64] = defaultRequest[$64];
                  };
              };
              $63.method = Network_HTTP_Method.DELETE.value;
              $63.url = u;
              return $63;
          })());
      };
  };
  var delete_ = $$delete(Network_HTTP_Affjax_Response.responsableUnit);
  var get = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $65 = {};
              for (var $66 in defaultRequest) {
                  if (defaultRequest.hasOwnProperty($66)) {
                      $65[$66] = defaultRequest[$66];
                  };
              };
              $65.url = u;
              return $65;
          })());
      };
  };
  var post = function (dictRequestable) {
      return function (dictRespondable) {
          return function (u) {
              return function (c) {
                  return affjax(dictRequestable)(dictRespondable)((function () {
                      var $67 = {};
                      for (var $68 in defaultRequest) {
                          if (defaultRequest.hasOwnProperty($68)) {
                              $67[$68] = defaultRequest[$68];
                          };
                      };
                      $67.method = Network_HTTP_Method.POST.value;
                      $67.url = u;
                      $67.content = new Data_Maybe.Just(c);
                      return $67;
                  })());
              };
          };
      };
  };
  var post_ = function (dictRequestable) {
      return post(dictRequestable)(Network_HTTP_Affjax_Response.responsableUnit);
  };
  var post$prime = function (dictRequestable) {
      return function (dictRespondable) {
          return function (u) {
              return function (c) {
                  return affjax(dictRequestable)(dictRespondable)((function () {
                      var $69 = {};
                      for (var $70 in defaultRequest) {
                          if (defaultRequest.hasOwnProperty($70)) {
                              $69[$70] = defaultRequest[$70];
                          };
                      };
                      $69.method = Network_HTTP_Method.POST.value;
                      $69.url = u;
                      $69.content = c;
                      return $69;
                  })());
              };
          };
      };
  };
  var post_$prime = function (dictRequestable) {
      return post$prime(dictRequestable)(Network_HTTP_Affjax_Response.responsableUnit);
  };
  var put = function (dictRequestable) {
      return function (dictRespondable) {
          return function (u) {
              return function (c) {
                  return affjax(dictRequestable)(dictRespondable)((function () {
                      var $71 = {};
                      for (var $72 in defaultRequest) {
                          if (defaultRequest.hasOwnProperty($72)) {
                              $71[$72] = defaultRequest[$72];
                          };
                      };
                      $71.method = Network_HTTP_Method.PUT.value;
                      $71.url = u;
                      $71.content = new Data_Maybe.Just(c);
                      return $71;
                  })());
              };
          };
      };
  };
  var put_ = function (dictRequestable) {
      return put(dictRequestable)(Network_HTTP_Affjax_Response.responsableUnit);
  };
  var put$prime = function (dictRequestable) {
      return function (dictRespondable) {
          return function (u) {
              return function (c) {
                  return affjax(dictRequestable)(dictRespondable)((function () {
                      var $73 = {};
                      for (var $74 in defaultRequest) {
                          if (defaultRequest.hasOwnProperty($74)) {
                              $73[$74] = defaultRequest[$74];
                          };
                      };
                      $73.method = Network_HTTP_Method.PUT.value;
                      $73.url = u;
                      $73.content = c;
                      return $73;
                  })());
              };
          };
      };
  };
  var put_$prime = function (dictRequestable) {
      return put$prime(dictRequestable)(Network_HTTP_Affjax_Response.responsableUnit);
  };
  exports["retry"] = retry;
  exports["defaultRetryPolicy"] = defaultRetryPolicy;
  exports["delete_"] = delete_;
  exports["delete"] = $$delete;
  exports["put_'"] = put_$prime;
  exports["put'"] = put$prime;
  exports["put_"] = put_;
  exports["put"] = put;
  exports["post_'"] = post_$prime;
  exports["post'"] = post$prime;
  exports["post_"] = post_;
  exports["post"] = post;
  exports["get"] = get;
  exports["affjax'"] = affjax$prime;
  exports["affjax"] = affjax;
  exports["defaultRequest"] = defaultRequest;;
 
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.mouseButtonP =
    function mouseButtonP(constant) {
      return function(button) {
        return function() {
          var out = constant(false);
          window.addEventListener("mousedown", function(e) {
            if (e.button === button) out.set(true);
          });
          window.addEventListener("mouseup", function(e) {
            if (e.button === button) out.set(false);
          });
          return out;
        };
      };
    };

  exports.touchP =
    function touchP(constant) {
      var out = constant([]);
      function report(e) {
        var touches = [], i, l = e.touches.length;
        for (i = 0; i < l; i++) touches.push(e.touches.item(i));
        out.set(touches);
      }
      window.addEventListener("touchstart", report);
      window.addEventListener("touchend", report);
      window.addEventListener("touchmove", report);
      window.addEventListener("touchcancel", report);
      return function() {
        return out;
      };
    };

  exports.mousePosP =
    function mousePosP(constant) {
      var out = constant({x:0,y:0});
      window.addEventListener('mousemove', function(e) {
        if (e.pageX !== undefined && e.pageY !== undefined) {
          out.set({x: e.pageX, y: e.pageY});
        } else if (e.clientX !== undefined && e.clientY !== undefined) {
          out.set({
            x: e.clientX + document.body.scrollLeft +
               document.documentElement.scrollLeft,
            y: e.clientY + document.body.scrollTop +
               document.documentElement.scrollTop
          });
        } else {
          throw new Error('Mouse event has no coordinates I recognise!');
        }
      });
      return function() {
        return out;
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };

  exports.windowDimensionsP = function windowDimensionsP(constant) {
    var out = constant({ w: window.innerWidth, h: innerHeight });
    window.addEventListener("resize", function() {
      out.set({ w: window.innerWidth, h: window.innerHeight });
    });
    return function() {
      return out;
    }
  }
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };

  exports.delayP = function delayP(constant) {
    return function(t) {
      return function(sig) {
        var out = constant(sig.get());
        var first = true;
        sig.subscribe(function(val) {
          if (first) {
            first = false;
          } else {
            setTimeout(function() {
              out.set(val);
            }, t);
          }
        });
        return out;
      }
    };
  };

  exports.sinceP = function sinceP(constant) {
    return function(t) {
      return function(sig) {
        var out = constant(false);
        var first = true;
        var timer = undefined;
        var tick = function() {
          out.set(false);
          timer = undefined;
        };
        sig.subscribe(function() {
          if (first) {
            first = false;
            return;
          }
          if (timer === undefined) {
            out.set(true);
            timer = setTimeout(tick, t);
          } else {
            clearTimeout(timer);
            timer = setTimeout(tick, t);
          }
        });
        return out;
      }
    };
  };
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var Signal = PS["Signal"];     
  var since = $foreign.sinceP(Signal.constant);
  var second = 1000.0;
  var millisecond = 1.0;
  var every = $foreign.everyP(Signal.constant);
  var delay = $foreign.delayP(Signal.constant);
  exports["second"] = second;
  exports["millisecond"] = millisecond;
  exports["since"] = since;
  exports["delay"] = delay;
  exports["every"] = every;
  exports["now"] = $foreign.now;;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];     
  var windowDimensions = $foreign.windowDimensionsP(Signal.constant);
  var touch = $foreign.touchP(Signal.constant);
  var tap = function __do() {
      var v = touch();
      return Prelude["return"](Control_Monad_Eff.applicativeEff)(Signal["~>"](Signal.functorSignal)(v)(function (t) {
          if (t.length === 0) {
              return false;
          };
          return true;
      }))();
  };
  var mousePos = $foreign.mousePosP(Signal.constant);
  var mouseButton = $foreign.mouseButtonP(Signal.constant);
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["windowDimensions"] = windowDimensions;
  exports["mousePos"] = mousePos;
  exports["tap"] = tap;
  exports["touch"] = touch;
  exports["mouseButton"] = mouseButton;
  exports["keyPressed"] = keyPressed;
  exports["animationFrame"] = animationFrame;;
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];     
  var wbr = Text_Smolder_Markup.leaf("wbr");
  var video = Text_Smolder_Markup.parent("video");
  var $$var = Text_Smolder_Markup.parent("var");
  var ul = Text_Smolder_Markup.parent("ul");
  var track = Text_Smolder_Markup.leaf("track");
  var tr = Text_Smolder_Markup.parent("tr");
  var title = Text_Smolder_Markup.parent("title");
  var time = Text_Smolder_Markup.parent("time");
  var thead = Text_Smolder_Markup.parent("thead");
  var th = Text_Smolder_Markup.parent("th");
  var tfoot = Text_Smolder_Markup.parent("tfoot");
  var textarea = Text_Smolder_Markup.parent("textarea");
  var td = Text_Smolder_Markup.parent("td");
  var tbody = Text_Smolder_Markup.parent("tbody");
  var table = Text_Smolder_Markup.parent("table");
  var sup = Text_Smolder_Markup.parent("sup");
  var summary = Text_Smolder_Markup.parent("summary");
  var sub = Text_Smolder_Markup.parent("sub");
  var style = Text_Smolder_Markup.parent("style");
  var strong = Text_Smolder_Markup.parent("strong");
  var span = Text_Smolder_Markup.parent("span");
  var source = Text_Smolder_Markup.leaf("source");
  var small = Text_Smolder_Markup.parent("small");
  var select = Text_Smolder_Markup.parent("select");
  var section = Text_Smolder_Markup.parent("section");
  var script = Text_Smolder_Markup.parent("script");
  var samp = Text_Smolder_Markup.parent("samp");
  var ruby = Text_Smolder_Markup.parent("ruby");
  var rt = Text_Smolder_Markup.parent("rt");
  var rp = Text_Smolder_Markup.parent("rp");
  var q = Text_Smolder_Markup.parent("q");
  var progress = Text_Smolder_Markup.parent("progress");
  var pre = Text_Smolder_Markup.parent("pre");
  var param = Text_Smolder_Markup.leaf("param");
  var p = Text_Smolder_Markup.parent("p");
  var output = Text_Smolder_Markup.parent("output");
  var option = Text_Smolder_Markup.parent("option");
  var optgroup = Text_Smolder_Markup.parent("optgroup");
  var ol = Text_Smolder_Markup.parent("ol");
  var object = Text_Smolder_Markup.parent("object");
  var noscript = Text_Smolder_Markup.parent("noscript");
  var nav = Text_Smolder_Markup.parent("nav");
  var meter = Text_Smolder_Markup.parent("meter");
  var meta = Text_Smolder_Markup.leaf("meta");
  var menuitem = Text_Smolder_Markup.leaf("menuitem");
  var menu = Text_Smolder_Markup.parent("menu");
  var mark = Text_Smolder_Markup.parent("mark");
  var map = Text_Smolder_Markup.parent("map");
  var link = Text_Smolder_Markup.leaf("link");
  var li = Text_Smolder_Markup.parent("li");
  var legend = Text_Smolder_Markup.parent("legend");
  var label = Text_Smolder_Markup.parent("label");
  var keygen = Text_Smolder_Markup.leaf("keygen");
  var kbd = Text_Smolder_Markup.parent("kbd");
  var ins = Text_Smolder_Markup.parent("ins");
  var input = Text_Smolder_Markup.leaf("input");
  var img = Text_Smolder_Markup.leaf("img");
  var iframe = Text_Smolder_Markup.parent("iframe");
  var i = Text_Smolder_Markup.parent("i");
  var html = Text_Smolder_Markup.parent("html");
  var hr = Text_Smolder_Markup.leaf("hr");
  var hgroup = Text_Smolder_Markup.parent("hgroup");
  var header = Text_Smolder_Markup.parent("header");
  var head = Text_Smolder_Markup.parent("head");
  var h6 = Text_Smolder_Markup.parent("h6");
  var h5 = Text_Smolder_Markup.parent("h5");
  var h4 = Text_Smolder_Markup.parent("h4");
  var h3 = Text_Smolder_Markup.parent("h3");
  var h2 = Text_Smolder_Markup.parent("h2");
  var h1 = Text_Smolder_Markup.parent("h1");
  var form = Text_Smolder_Markup.parent("form");
  var footer = Text_Smolder_Markup.parent("footer");
  var figure = Text_Smolder_Markup.parent("figure");
  var figcaption = Text_Smolder_Markup.parent("figcaption");
  var fieldset = Text_Smolder_Markup.parent("fieldset");
  var embed = Text_Smolder_Markup.leaf("embed");
  var em = Text_Smolder_Markup.parent("em");
  var dt = Text_Smolder_Markup.parent("dt");
  var dl = Text_Smolder_Markup.parent("dl");
  var div = Text_Smolder_Markup.parent("div");
  var dfn = Text_Smolder_Markup.parent("dfn");
  var details = Text_Smolder_Markup.parent("details");
  var del = Text_Smolder_Markup.parent("del");
  var dd = Text_Smolder_Markup.parent("dd");
  var datalist = Text_Smolder_Markup.parent("datalist");
  var command = Text_Smolder_Markup.parent("command");
  var colgroup = Text_Smolder_Markup.parent("colgroup");
  var col = Text_Smolder_Markup.leaf("col");
  var code = Text_Smolder_Markup.parent("code");
  var cite = Text_Smolder_Markup.parent("cite");
  var caption = Text_Smolder_Markup.parent("caption");
  var canvas = Text_Smolder_Markup.parent("canvas");
  var button = Text_Smolder_Markup.parent("button");
  var br = Text_Smolder_Markup.leaf("br");
  var body = Text_Smolder_Markup.parent("body");
  var blockquote = Text_Smolder_Markup.parent("blockquote");
  var bdo = Text_Smolder_Markup.parent("bdo");
  var base = Text_Smolder_Markup.leaf("base");
  var b = Text_Smolder_Markup.parent("b");
  var audio = Text_Smolder_Markup.parent("audio");
  var aside = Text_Smolder_Markup.parent("aside");
  var article = Text_Smolder_Markup.parent("article");
  var area = Text_Smolder_Markup.leaf("area");
  var address = Text_Smolder_Markup.parent("address");
  var abbr = Text_Smolder_Markup.parent("abbr");
  var a = Text_Smolder_Markup.parent("a");
  exports["wbr"] = wbr;
  exports["track"] = track;
  exports["source"] = source;
  exports["param"] = param;
  exports["meta"] = meta;
  exports["menuitem"] = menuitem;
  exports["link"] = link;
  exports["keygen"] = keygen;
  exports["input"] = input;
  exports["img"] = img;
  exports["hr"] = hr;
  exports["embed"] = embed;
  exports["col"] = col;
  exports["br"] = br;
  exports["base"] = base;
  exports["area"] = area;
  exports["video"] = video;
  exports["var"] = $$var;
  exports["ul"] = ul;
  exports["tr"] = tr;
  exports["title"] = title;
  exports["time"] = time;
  exports["thead"] = thead;
  exports["th"] = th;
  exports["tfoot"] = tfoot;
  exports["textarea"] = textarea;
  exports["td"] = td;
  exports["tbody"] = tbody;
  exports["table"] = table;
  exports["sup"] = sup;
  exports["summary"] = summary;
  exports["sub"] = sub;
  exports["style"] = style;
  exports["strong"] = strong;
  exports["span"] = span;
  exports["small"] = small;
  exports["select"] = select;
  exports["section"] = section;
  exports["script"] = script;
  exports["samp"] = samp;
  exports["ruby"] = ruby;
  exports["rt"] = rt;
  exports["rp"] = rp;
  exports["q"] = q;
  exports["progress"] = progress;
  exports["pre"] = pre;
  exports["p"] = p;
  exports["output"] = output;
  exports["option"] = option;
  exports["optgroup"] = optgroup;
  exports["ol"] = ol;
  exports["object"] = object;
  exports["noscript"] = noscript;
  exports["nav"] = nav;
  exports["meter"] = meter;
  exports["menu"] = menu;
  exports["mark"] = mark;
  exports["map"] = map;
  exports["li"] = li;
  exports["legend"] = legend;
  exports["label"] = label;
  exports["kbd"] = kbd;
  exports["ins"] = ins;
  exports["iframe"] = iframe;
  exports["i"] = i;
  exports["html"] = html;
  exports["hgroup"] = hgroup;
  exports["header"] = header;
  exports["head"] = head;
  exports["h6"] = h6;
  exports["h5"] = h5;
  exports["h4"] = h4;
  exports["h3"] = h3;
  exports["h2"] = h2;
  exports["h1"] = h1;
  exports["form"] = form;
  exports["footer"] = footer;
  exports["figure"] = figure;
  exports["figcaption"] = figcaption;
  exports["fieldset"] = fieldset;
  exports["em"] = em;
  exports["dt"] = dt;
  exports["dl"] = dl;
  exports["div"] = div;
  exports["dfn"] = dfn;
  exports["details"] = details;
  exports["del"] = del;
  exports["dd"] = dd;
  exports["datalist"] = datalist;
  exports["command"] = command;
  exports["colgroup"] = colgroup;
  exports["code"] = code;
  exports["cite"] = cite;
  exports["caption"] = caption;
  exports["canvas"] = canvas;
  exports["button"] = button;
  exports["body"] = body;
  exports["blockquote"] = blockquote;
  exports["bdo"] = bdo;
  exports["b"] = b;
  exports["audio"] = audio;
  exports["aside"] = aside;
  exports["article"] = article;
  exports["address"] = address;
  exports["abbr"] = abbr;
  exports["a"] = a;;
 
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];     
  var xmlns = Text_Smolder_Markup.attribute("xmlns");
  var wrap = Text_Smolder_Markup.attribute("wrap");
  var width = Text_Smolder_Markup.attribute("width");
  var value = Text_Smolder_Markup.attribute("value");
  var usemap = Text_Smolder_Markup.attribute("usemap");
  var type$prime = Text_Smolder_Markup.attribute("type");
  var title = Text_Smolder_Markup.attribute("title");
  var target = Text_Smolder_Markup.attribute("target");
  var tabindex = Text_Smolder_Markup.attribute("tabindex");
  var summary = Text_Smolder_Markup.attribute("summary");
  var subject = Text_Smolder_Markup.attribute("subject");
  var style = Text_Smolder_Markup.attribute("style");
  var step = Text_Smolder_Markup.attribute("step");
  var start = Text_Smolder_Markup.attribute("start");
  var srcdoc = Text_Smolder_Markup.attribute("srcdoc");
  var src = Text_Smolder_Markup.attribute("src");
  var spellcheck = Text_Smolder_Markup.attribute("spellcheck");
  var span = Text_Smolder_Markup.attribute("span");
  var sizes = Text_Smolder_Markup.attribute("sizes");
  var size = Text_Smolder_Markup.attribute("size");
  var shape = Text_Smolder_Markup.attribute("shape");
  var selected = Text_Smolder_Markup.attribute("selected");
  var seamless = Text_Smolder_Markup.attribute("seamless");
  var scoped = Text_Smolder_Markup.attribute("scoped");
  var scope = Text_Smolder_Markup.attribute("scope");
  var sandbox = Text_Smolder_Markup.attribute("sandbox");
  var rowspan = Text_Smolder_Markup.attribute("rowspan");
  var rows = Text_Smolder_Markup.attribute("rows");
  var reversed = Text_Smolder_Markup.attribute("reversed");
  var required = Text_Smolder_Markup.attribute("required");
  var rel = Text_Smolder_Markup.attribute("rel");
  var readonly = Text_Smolder_Markup.attribute("readonly");
  var radiogroup = Text_Smolder_Markup.attribute("radiogroup");
  var pubdate = Text_Smolder_Markup.attribute("pubdate");
  var preload = Text_Smolder_Markup.attribute("preload");
  var placeholder = Text_Smolder_Markup.attribute("placeholder");
  var ping = Text_Smolder_Markup.attribute("ping");
  var pattern = Text_Smolder_Markup.attribute("pattern");
  var optimum = Text_Smolder_Markup.attribute("optimum");
  var open = Text_Smolder_Markup.attribute("open");
  var onwaiting = Text_Smolder_Markup.attribute("onwaiting");
  var onvolumechange = Text_Smolder_Markup.attribute("onvolumechange");
  var onunload = Text_Smolder_Markup.attribute("onunload");
  var onundo = Text_Smolder_Markup.attribute("onundo");
  var ontimeupdate = Text_Smolder_Markup.attribute("ontimeupdate");
  var onsuspend = Text_Smolder_Markup.attribute("onsuspend");
  var onsubmit = Text_Smolder_Markup.attribute("onsubmit");
  var onstorage = Text_Smolder_Markup.attribute("onstorage");
  var onstalled = Text_Smolder_Markup.attribute("onstalled");
  var onselect = Text_Smolder_Markup.attribute("onselect");
  var onseeking = Text_Smolder_Markup.attribute("onseeking");
  var onseeked = Text_Smolder_Markup.attribute("onseeked");
  var onscroll = Text_Smolder_Markup.attribute("onscroll");
  var onresize = Text_Smolder_Markup.attribute("onresize");
  var onredo = Text_Smolder_Markup.attribute("onredo");
  var onreadystatechange = Text_Smolder_Markup.attribute("onreadystatechange");
  var onratechange = Text_Smolder_Markup.attribute("onratechange");
  var onpropstate = Text_Smolder_Markup.attribute("onpropstate");
  var onprogress = Text_Smolder_Markup.attribute("onprogress");
  var onplaying = Text_Smolder_Markup.attribute("onplaying");
  var onplay = Text_Smolder_Markup.attribute("onplay");
  var onpause = Text_Smolder_Markup.attribute("onpause");
  var onpageshow = Text_Smolder_Markup.attribute("onpageshow");
  var onpagehide = Text_Smolder_Markup.attribute("onpagehide");
  var ononline = Text_Smolder_Markup.attribute("ononline");
  var onmousewheel = Text_Smolder_Markup.attribute("onmousewheel");
  var onmouseup = Text_Smolder_Markup.attribute("onmouseup");
  var onmouseover = Text_Smolder_Markup.attribute("onmouseover");
  var onmouseout = Text_Smolder_Markup.attribute("onmouseout");
  var onmousemove = Text_Smolder_Markup.attribute("onmousemove");
  var onmousedown = Text_Smolder_Markup.attribute("onmousedown");
  var onmessage = Text_Smolder_Markup.attribute("onmessage");
  var onloadstart = Text_Smolder_Markup.attribute("onloadstart");
  var onloadedmetadata = Text_Smolder_Markup.attribute("onloadedmetadata");
  var onloadeddata = Text_Smolder_Markup.attribute("onloadeddata");
  var onload = Text_Smolder_Markup.attribute("onload");
  var onkeyup = Text_Smolder_Markup.attribute("onkeyup");
  var onkeydown = Text_Smolder_Markup.attribute("onkeydown");
  var oninvalid = Text_Smolder_Markup.attribute("oninvalid");
  var oninput = Text_Smolder_Markup.attribute("oninput");
  var onhaschange = Text_Smolder_Markup.attribute("onhaschange");
  var onforminput = Text_Smolder_Markup.attribute("onforminput");
  var onformchange = Text_Smolder_Markup.attribute("onformchange");
  var onfocus = Text_Smolder_Markup.attribute("onfocus");
  var onerror = Text_Smolder_Markup.attribute("onerror");
  var onended = Text_Smolder_Markup.attribute("onended");
  var onemptied = Text_Smolder_Markup.attribute("onemptied");
  var ondurationchange = Text_Smolder_Markup.attribute("ondurationchange");
  var ondrop = Text_Smolder_Markup.attribute("ondrop");
  var ondragstart = Text_Smolder_Markup.attribute("ondragstart");
  var ondragover = Text_Smolder_Markup.attribute("ondragover");
  var ondragleave = Text_Smolder_Markup.attribute("ondragleave");
  var ondragenter = Text_Smolder_Markup.attribute("ondragenter");
  var ondragend = Text_Smolder_Markup.attribute("ondragend");
  var ondrag = Text_Smolder_Markup.attribute("ondrag");
  var ondblclick = Text_Smolder_Markup.attribute("ondblclick");
  var oncontextmenu = Text_Smolder_Markup.attribute("oncontextmenu");
  var onclick = Text_Smolder_Markup.attribute("onclick");
  var onchange = Text_Smolder_Markup.attribute("onchange");
  var oncanplaythrough = Text_Smolder_Markup.attribute("oncanplaythrough");
  var oncanplay = Text_Smolder_Markup.attribute("oncanplay");
  var onblur = Text_Smolder_Markup.attribute("onblur");
  var onbeforeprint = Text_Smolder_Markup.attribute("onbeforeprint");
  var onbeforeonload = Text_Smolder_Markup.attribute("onbeforeonload");
  var novalidate = Text_Smolder_Markup.attribute("novalidate");
  var name = Text_Smolder_Markup.attribute("name");
  var multiple = Text_Smolder_Markup.attribute("multiple");
  var min = Text_Smolder_Markup.attribute("min");
  var method = Text_Smolder_Markup.attribute("method");
  var media = Text_Smolder_Markup.attribute("media");
  var maxlength = Text_Smolder_Markup.attribute("maxlength");
  var max = Text_Smolder_Markup.attribute("max");
  var manifest = Text_Smolder_Markup.attribute("manifest");
  var low = Text_Smolder_Markup.attribute("low");
  var loop = Text_Smolder_Markup.attribute("loop");
  var list = Text_Smolder_Markup.attribute("list");
  var lang = Text_Smolder_Markup.attribute("lang");
  var label = Text_Smolder_Markup.attribute("label");
  var keytype = Text_Smolder_Markup.attribute("keytype");
  var itemprop = Text_Smolder_Markup.attribute("itemprop");
  var item = Text_Smolder_Markup.attribute("item");
  var ismap = Text_Smolder_Markup.attribute("ismap");
  var id = Text_Smolder_Markup.attribute("id");
  var icon = Text_Smolder_Markup.attribute("icon");
  var httpEquiv = Text_Smolder_Markup.attribute("http-equiv");
  var hreflang = Text_Smolder_Markup.attribute("hreflang");
  var href = Text_Smolder_Markup.attribute("href");
  var high = Text_Smolder_Markup.attribute("high");
  var hidden = Text_Smolder_Markup.attribute("hidden");
  var height = Text_Smolder_Markup.attribute("height");
  var headers = Text_Smolder_Markup.attribute("headers");
  var formtarget = Text_Smolder_Markup.attribute("formtarget");
  var formnovalidate = Text_Smolder_Markup.attribute("formnovalidate");
  var formmethod = Text_Smolder_Markup.attribute("formmethod");
  var formenctype = Text_Smolder_Markup.attribute("formenctype");
  var formaction = Text_Smolder_Markup.attribute("formaction");
  var form = Text_Smolder_Markup.attribute("form");
  var $$for = Text_Smolder_Markup.attribute("for");
  var enctype = Text_Smolder_Markup.attribute("enctype");
  var draggable = Text_Smolder_Markup.attribute("draggable");
  var disabled = Text_Smolder_Markup.attribute("disabled");
  var dir = Text_Smolder_Markup.attribute("dir");
  var defer = Text_Smolder_Markup.attribute("defer");
  var datetime = Text_Smolder_Markup.attribute("datetime");
  var data$prime = Text_Smolder_Markup.attribute("data");
  var coords = Text_Smolder_Markup.attribute("coords");
  var controls = Text_Smolder_Markup.attribute("controls");
  var contextmenu = Text_Smolder_Markup.attribute("contextmenu");
  var contenteditable = Text_Smolder_Markup.attribute("contenteditable");
  var content = Text_Smolder_Markup.attribute("content");
  var colspan = Text_Smolder_Markup.attribute("colspan");
  var cols = Text_Smolder_Markup.attribute("cols");
  var className = Text_Smolder_Markup.attribute("class");
  var cite = Text_Smolder_Markup.attribute("cite");
  var checked = Text_Smolder_Markup.attribute("checked");
  var charset = Text_Smolder_Markup.attribute("charset");
  var challenge = Text_Smolder_Markup.attribute("challenge");
  var autoplay = Text_Smolder_Markup.attribute("autoplay");
  var autofocus = Text_Smolder_Markup.attribute("autofocus");
  var autocomplete = Text_Smolder_Markup.attribute("autocomplete");
  var async = Text_Smolder_Markup.attribute("async");
  var alt = Text_Smolder_Markup.attribute("alt");
  var action = Text_Smolder_Markup.attribute("action");
  var accesskey = Text_Smolder_Markup.attribute("accesskey");
  var acceptCharset = Text_Smolder_Markup.attribute("accept-charset");
  var accept = Text_Smolder_Markup.attribute("accept");
  exports["xmlns"] = xmlns;
  exports["wrap"] = wrap;
  exports["width"] = width;
  exports["value"] = value;
  exports["usemap"] = usemap;
  exports["type'"] = type$prime;
  exports["title"] = title;
  exports["target"] = target;
  exports["tabindex"] = tabindex;
  exports["summary"] = summary;
  exports["subject"] = subject;
  exports["style"] = style;
  exports["step"] = step;
  exports["start"] = start;
  exports["srcdoc"] = srcdoc;
  exports["src"] = src;
  exports["spellcheck"] = spellcheck;
  exports["span"] = span;
  exports["sizes"] = sizes;
  exports["size"] = size;
  exports["shape"] = shape;
  exports["selected"] = selected;
  exports["seamless"] = seamless;
  exports["scoped"] = scoped;
  exports["scope"] = scope;
  exports["sandbox"] = sandbox;
  exports["rowspan"] = rowspan;
  exports["rows"] = rows;
  exports["reversed"] = reversed;
  exports["required"] = required;
  exports["rel"] = rel;
  exports["readonly"] = readonly;
  exports["radiogroup"] = radiogroup;
  exports["pubdate"] = pubdate;
  exports["preload"] = preload;
  exports["placeholder"] = placeholder;
  exports["ping"] = ping;
  exports["pattern"] = pattern;
  exports["optimum"] = optimum;
  exports["open"] = open;
  exports["onwaiting"] = onwaiting;
  exports["onvolumechange"] = onvolumechange;
  exports["onunload"] = onunload;
  exports["onundo"] = onundo;
  exports["ontimeupdate"] = ontimeupdate;
  exports["onsuspend"] = onsuspend;
  exports["onsubmit"] = onsubmit;
  exports["onstorage"] = onstorage;
  exports["onstalled"] = onstalled;
  exports["onselect"] = onselect;
  exports["onseeking"] = onseeking;
  exports["onseeked"] = onseeked;
  exports["onscroll"] = onscroll;
  exports["onresize"] = onresize;
  exports["onredo"] = onredo;
  exports["onreadystatechange"] = onreadystatechange;
  exports["onratechange"] = onratechange;
  exports["onpropstate"] = onpropstate;
  exports["onprogress"] = onprogress;
  exports["onplaying"] = onplaying;
  exports["onplay"] = onplay;
  exports["onpause"] = onpause;
  exports["onpageshow"] = onpageshow;
  exports["onpagehide"] = onpagehide;
  exports["ononline"] = ononline;
  exports["onmousewheel"] = onmousewheel;
  exports["onmouseup"] = onmouseup;
  exports["onmouseover"] = onmouseover;
  exports["onmouseout"] = onmouseout;
  exports["onmousemove"] = onmousemove;
  exports["onmousedown"] = onmousedown;
  exports["onmessage"] = onmessage;
  exports["onloadstart"] = onloadstart;
  exports["onloadedmetadata"] = onloadedmetadata;
  exports["onloadeddata"] = onloadeddata;
  exports["onload"] = onload;
  exports["onkeyup"] = onkeyup;
  exports["onkeydown"] = onkeydown;
  exports["oninvalid"] = oninvalid;
  exports["oninput"] = oninput;
  exports["onhaschange"] = onhaschange;
  exports["onforminput"] = onforminput;
  exports["onformchange"] = onformchange;
  exports["onfocus"] = onfocus;
  exports["onerror"] = onerror;
  exports["onended"] = onended;
  exports["onemptied"] = onemptied;
  exports["ondurationchange"] = ondurationchange;
  exports["ondrop"] = ondrop;
  exports["ondragstart"] = ondragstart;
  exports["ondragover"] = ondragover;
  exports["ondragleave"] = ondragleave;
  exports["ondragenter"] = ondragenter;
  exports["ondragend"] = ondragend;
  exports["ondrag"] = ondrag;
  exports["ondblclick"] = ondblclick;
  exports["onclick"] = onclick;
  exports["oncontextmenu"] = oncontextmenu;
  exports["onchange"] = onchange;
  exports["oncanplaythrough"] = oncanplaythrough;
  exports["oncanplay"] = oncanplay;
  exports["onblur"] = onblur;
  exports["onbeforeprint"] = onbeforeprint;
  exports["onbeforeonload"] = onbeforeonload;
  exports["novalidate"] = novalidate;
  exports["name"] = name;
  exports["multiple"] = multiple;
  exports["min"] = min;
  exports["method"] = method;
  exports["media"] = media;
  exports["maxlength"] = maxlength;
  exports["max"] = max;
  exports["manifest"] = manifest;
  exports["low"] = low;
  exports["loop"] = loop;
  exports["list"] = list;
  exports["lang"] = lang;
  exports["label"] = label;
  exports["keytype"] = keytype;
  exports["itemprop"] = itemprop;
  exports["item"] = item;
  exports["ismap"] = ismap;
  exports["id"] = id;
  exports["icon"] = icon;
  exports["httpEquiv"] = httpEquiv;
  exports["hreflang"] = hreflang;
  exports["href"] = href;
  exports["high"] = high;
  exports["hidden"] = hidden;
  exports["height"] = height;
  exports["headers"] = headers;
  exports["formtarget"] = formtarget;
  exports["formnovalidate"] = formnovalidate;
  exports["formmethod"] = formmethod;
  exports["formenctype"] = formenctype;
  exports["formaction"] = formaction;
  exports["form"] = form;
  exports["for"] = $$for;
  exports["enctype"] = enctype;
  exports["draggable"] = draggable;
  exports["disabled"] = disabled;
  exports["dir"] = dir;
  exports["defer"] = defer;
  exports["datetime"] = datetime;
  exports["data'"] = data$prime;
  exports["coords"] = coords;
  exports["controls"] = controls;
  exports["contextmenu"] = contextmenu;
  exports["contenteditable"] = contenteditable;
  exports["content"] = content;
  exports["colspan"] = colspan;
  exports["cols"] = cols;
  exports["className"] = className;
  exports["cite"] = cite;
  exports["checked"] = checked;
  exports["charset"] = charset;
  exports["challenge"] = challenge;
  exports["autoplay"] = autoplay;
  exports["autofocus"] = autofocus;
  exports["autocomplete"] = autocomplete;
  exports["async"] = async;
  exports["alt"] = alt;
  exports["action"] = action;
  exports["accesskey"] = accesskey;
  exports["acceptCharset"] = acceptCharset;
  exports["accept"] = accept;;
 
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});

