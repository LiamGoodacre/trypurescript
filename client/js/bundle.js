// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Bind -----------------------------------------------------------------------

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };

  //- ModuloSemiring -------------------------------------------------------------

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };

  //- Ring -----------------------------------------------------------------------

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.refIneq = function (r1) {
    return function (r2) {
      return r1 !== r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };

  exports.showCharImpl = function (c) {
    return c === "'" ? "'\\''" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    return JSON.stringify(s);
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];       
  var Unit = function (x) {
      return x;
  };
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var Ring = function (__superclass_Prelude$dotSemiring_0, sub) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.sub = sub;
  };
  var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.div = div;
      this.mod = mod;
  };
  var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
      this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
      this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
  };
  var Num = function (__superclass_Prelude$dotDivisionRing_0) {
      this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BoundedOrd = function (__superclass_Prelude$dotBounded_0, __superclass_Prelude$dotOrd_1) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this["__superclass_Prelude.Ord_1"] = __superclass_Prelude$dotOrd_1;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var $dollar = function (f) {
      return function (x) {
          return f(x);
      };
  };
  var $hash = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var $minus = function (dictRing) {
      return sub(dictRing);
  };
  var showUnit = new Show(function (v) {
      return "unit";
  });
  var showString = new Show($foreign.showStringImpl);
  var showOrdering = new Show(function (v) {
      if (v instanceof LT) {
          return "LT";
      };
      if (v instanceof GT) {
          return "GT";
      };
      if (v instanceof EQ) {
          return "EQ";
      };
      throw new Error("Failed pattern match at Prelude line 863, column 1 - line 868, column 1: " + [ v.constructor.name ]);
  });
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Prelude line 841, column 1 - line 845, column 1: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var semiringUnit = new Semiring(function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, unit, unit);
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupOrdering = new Semigroup(function (v) {
      return function (y) {
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          if (v instanceof EQ) {
              return y;
          };
          throw new Error("Failed pattern match at Prelude line 413, column 1 - line 418, column 1: " + [ v.constructor.name, y.constructor.name ]);
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var ringUnit = new Ring(function () {
      return semiringUnit;
  }, function (v) {
      return function (v1) {
          return unit;
      };
  });
  var ringNumber = new Ring(function () {
      return semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return semiringInt;
  }, $foreign.intSub);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var not = function (dict) {
      return dict.not;
  };
  var negate = function (dictRing) {
      return function (a) {
          return $minus(dictRing)(zero(dictRing["__superclass_Prelude.Semiring_0"]()))(a);
      };
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var $times = function (dictSemiring) {
      return mul(dictSemiring);
  };
  var moduloSemiringUnit = new ModuloSemiring(function () {
      return semiringUnit;
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return function (v1) {
          return unit;
      };
  });
  var moduloSemiringNumber = new ModuloSemiring(function () {
      return semiringNumber;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });
  var moduloSemiringInt = new ModuloSemiring(function () {
      return semiringInt;
  }, $foreign.intDiv, $foreign.intMod);
  var mod = function (dict) {
      return dict.mod;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var $less$hash$greater = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return $less$dollar$greater(dictFunctor)(f)(fa);
          };
      };
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var ordUnit = new Ord(function () {
      return eqUnit;
  }, function (v) {
      return function (v1) {
          return EQ.value;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var ordString = new Ord(function () {
      return eqString;
  }, unsafeCompare);
  var eqOrdering = new Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  var ordOrdering = new Ord(function () {
      return eqOrdering;
  }, function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return EQ.value;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return EQ.value;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return EQ.value;
          };
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof EQ && v1 instanceof LT) {
              return GT.value;
          };
          if (v instanceof EQ && v1 instanceof GT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          throw new Error("Failed pattern match at Prelude line 668, column 1 - line 677, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var eqNumber = new Eq($foreign.refEq);
  var ordNumber = new Ord(function () {
      return eqNumber;
  }, unsafeCompare);
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eqChar = new Eq($foreign.refEq);
  var ordChar = new Ord(function () {
      return eqChar;
  }, unsafeCompare);
  var eqBoolean = new Eq($foreign.refEq);
  var ordBoolean = new Ord(function () {
      return eqBoolean;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (dictEq) {
      return eq(dictEq);
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl($eq$eq(dictEq)));
  };
  var divisionRingUnit = new DivisionRing(function () {
      return moduloSemiringUnit;
  }, function () {
      return ringUnit;
  });
  var numUnit = new Num(function () {
      return divisionRingUnit;
  });
  var divisionRingNumber = new DivisionRing(function () {
      return moduloSemiringNumber;
  }, function () {
      return ringNumber;
  });
  var numNumber = new Num(function () {
      return divisionRingNumber;
  });
  var div = function (dict) {
      return dict.div;
  };
  var $div = function (dictModuloSemiring) {
      return div(dictModuloSemiring);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $bar$bar = function (dictBooleanAlgebra) {
      return disj(dictBooleanAlgebra);
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var $amp$amp = function (dictBooleanAlgebra) {
      return conj(dictBooleanAlgebra);
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var functorFn = new Functor(compose(semigroupoidFn));
  var $less$less$less = function (dictSemigroupoid) {
      return compose(dictSemigroupoid);
  };
  var $greater$greater$greater = function (dictSemigroupoid) {
      return flip(compose(dictSemigroupoid));
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return eqArray(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              return $dollar(compare(ordInt)(0))($foreign.ordArrayImpl(function (x) {
                  return function (y) {
                      var $78 = compare(dictOrd)(x)(y);
                      if ($78 instanceof EQ) {
                          return 0;
                      };
                      if ($78 instanceof LT) {
                          return 1;
                      };
                      if ($78 instanceof GT) {
                          return negate(ringInt)(1);
                      };
                      throw new Error("Failed pattern match at Prelude line 660, column 1 - line 666, column 1: " + [ $78.constructor.name ]);
                  };
              })(xs)(ys));
          };
      });
  };
  var $less = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $79 = compare(dictOrd)(a1)(a2);
              if ($79 instanceof LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $less$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $80 = compare(dictOrd)(a1)(a2);
              if ($80 instanceof GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var $greater = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $81 = compare(dictOrd)(a1)(a2);
              if ($81 instanceof GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $greater$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $82 = compare(dictOrd)(a1)(a2);
              if ($82 instanceof LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedUnit = new Bounded(unit, unit);
  var boundedOrdering = new Bounded(LT.value, GT.value);
  var boundedOrdUnit = new BoundedOrd(function () {
      return boundedUnit;
  }, function () {
      return ordUnit;
  });
  var boundedOrdOrdering = new BoundedOrd(function () {
      return boundedOrdering;
  }, function () {
      return ordOrdering;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var boundedOrdInt = new BoundedOrd(function () {
      return boundedInt;
  }, function () {
      return ordInt;
  });
  var boundedChar = new Bounded($foreign.bottomChar, $foreign.topChar);
  var boundedOrdChar = new BoundedOrd(function () {
      return boundedChar;
  }, function () {
      return ordChar;
  });
  var boundedBoolean = new Bounded(false, true);
  var boundedOrdBoolean = new BoundedOrd(function () {
      return boundedBoolean;
  }, function () {
      return ordBoolean;
  });
  var bottom = function (dict) {
      return dict.bottom;
  };
  var boundedFn = function (dictBounded) {
      return new Bounded(function (v) {
          return bottom(dictBounded);
      }, function (v) {
          return top(dictBounded);
      });
  };
  var booleanAlgebraUnit = new BooleanAlgebra(function () {
      return boundedUnit;
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return unit;
  });
  var booleanAlgebraFn = function (dictBooleanAlgebra) {
      return new BooleanAlgebra(function () {
          return boundedFn(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (fx) {
          return function (fy) {
              return function (a) {
                  return conj(dictBooleanAlgebra)(fx(a))(fy(a));
              };
          };
      }, function (fx) {
          return function (fy) {
              return function (a) {
                  return disj(dictBooleanAlgebra)(fx(a))(fy(a));
              };
          };
      }, function (fx) {
          return function (a) {
              return not(dictBooleanAlgebra)(fx(a));
          };
      });
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var $div$eq = function (dictEq) {
      return function (x) {
          return function (y) {
              return not(booleanAlgebraBoolean)($eq$eq(dictEq)(x)(y));
          };
      };
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v) {
                  return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(f(v));
              });
          };
      };
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  };
  var asTypeOf = function (x) {
      return function (v) {
          return x;
      };
  };
  var applyFn = new Apply(function () {
      return functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var bindFn = new Bind(function () {
      return applyFn;
  }, function (m) {
      return function (f) {
          return function (x) {
              return f(m(x))(x);
          };
      };
  });
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeFn = new Applicative(function () {
      return applyFn;
  }, $$const);
  var monadFn = new Monad(function () {
      return applicativeFn;
  }, function () {
      return bindFn;
  });
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return $less$greater(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  var monadArray = new Monad(function () {
      return applicativeArray;
  }, function () {
      return bindArray;
  });
  var bindArray = new Bind(function () {
      return applyArray;
  }, $foreign.arrayBind);
  var applyArray = new Apply(function () {
      return functorArray;
  }, ap(monadArray));
  var applicativeArray = new Applicative(function () {
      return applyArray;
  }, function (x) {
      return [ x ];
  });
  var add = function (dict) {
      return dict.add;
  };
  var $plus = function (dictSemiring) {
      return add(dictSemiring);
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["BoundedOrd"] = BoundedOrd;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["DivisionRing"] = DivisionRing;
  exports["Num"] = Num;
  exports["Ring"] = Ring;
  exports["ModuloSemiring"] = ModuloSemiring;
  exports["Semiring"] = Semiring;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["||"] = $bar$bar;
  exports["&&"] = $amp$amp;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports[">="] = $greater$eq;
  exports["<="] = $less$eq;
  exports[">"] = $greater;
  exports["<"] = $less;
  exports["compare"] = compare;
  exports["/="] = $div$eq;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["-"] = $minus;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["/"] = $div;
  exports["mod"] = mod;
  exports["div"] = div;
  exports["*"] = $times;
  exports["+"] = $plus;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["liftM1"] = liftM1;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<#>"] = $less$hash$greater;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["<<<"] = $less$less$less;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["asTypeOf"] = asTypeOf;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["#"] = $hash;
  exports["$"] = $dollar;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
  exports["applicativeFn"] = applicativeFn;
  exports["applicativeArray"] = applicativeArray;
  exports["bindFn"] = bindFn;
  exports["bindArray"] = bindArray;
  exports["monadFn"] = monadFn;
  exports["monadArray"] = monadArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupOrdering"] = semigroupOrdering;
  exports["semigroupArray"] = semigroupArray;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringUnit"] = semiringUnit;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
  exports["ringUnit"] = ringUnit;
  exports["moduloSemiringInt"] = moduloSemiringInt;
  exports["moduloSemiringNumber"] = moduloSemiringNumber;
  exports["moduloSemiringUnit"] = moduloSemiringUnit;
  exports["divisionRingNumber"] = divisionRingNumber;
  exports["divisionRingUnit"] = divisionRingUnit;
  exports["numNumber"] = numNumber;
  exports["numUnit"] = numUnit;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqArray"] = eqArray;
  exports["eqOrdering"] = eqOrdering;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordUnit"] = ordUnit;
  exports["ordArray"] = ordArray;
  exports["ordOrdering"] = ordOrdering;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedUnit"] = boundedUnit;
  exports["boundedOrdering"] = boundedOrdering;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
  exports["boundedFn"] = boundedFn;
  exports["boundedOrdBoolean"] = boundedOrdBoolean;
  exports["boundedOrdUnit"] = boundedOrdUnit;
  exports["boundedOrdOrdering"] = boundedOrdOrdering;
  exports["boundedOrdInt"] = boundedOrdInt;
  exports["boundedOrdChar"] = boundedOrdChar;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["booleanAlgebraUnit"] = booleanAlgebraUnit;
  exports["booleanAlgebraFn"] = booleanAlgebraFn;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showUnit"] = showUnit;
  exports["showArray"] = showArray;
  exports["showOrdering"] = showOrdering;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Prelude.functorArray;
  }, Prelude.append(Prelude.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  var $less$bar$greater = function (dictAlt) {
      return alt(dictAlt);
  };
  exports["Alt"] = Alt;
  exports["<|>"] = $less$bar$greater;
  exports["alt"] = alt;
  exports["altArray"] = altArray;;
 
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];     
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;;
 
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];     
  var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
  };
  var alternativeArray = new Alternative(function () {
      return Control_Plus.plusArray;
  }, function () {
      return Prelude.applicativeArray;
  });
  exports["Alternative"] = Alternative;
  exports["alternativeArray"] = alternativeArray;;
 
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $less$times = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
          };
      };
  };
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  var lift5 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                          };
                      };
                  };
              };
          };
      };
  };
  var lift4 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                      };
                  };
              };
          };
      };
  };
  var lift3 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                  };
              };
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift5"] = lift5;
  exports["lift4"] = lift4;
  exports["lift3"] = lift3;
  exports["lift2"] = lift2;
  exports["*>"] = $times$greater;
  exports["<*"] = $less$times;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Prelude.id(Prelude.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Prelude.id(Prelude.categoryFn));
  };
  exports["Bifunctor"] = Bifunctor;
  exports["rmap"] = rmap;
  exports["lmap"] = lmap;
  exports["bimap"] = bimap;;
 
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Biapply = function (__superclass_Data$dotBifunctor$dotBifunctor_0, biapply) {
      this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
      this.biapply = biapply;
  };
  var $less$less$dollar$greater$greater = Prelude.id(Prelude.categoryFn);
  var biapply = function (dict) {
      return dict.biapply;
  };
  var $less$less$times$greater$greater = function (dictBiapply) {
      return biapply(dictBiapply);
  };
  var bilift2 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b);
                  };
              };
          };
      };
  };
  var bilift3 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return function (c) {
                          return $less$less$times$greater$greater(dictBiapply)($less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b))(c);
                      };
                  };
              };
          };
      };
  };
  var $times$greater$greater = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(Prelude["const"](Prelude.id(Prelude.categoryFn))))(a))(b);
          };
      };
  };
  var $less$less$times = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"])(Prelude["const"]))(a))(b);
          };
      };
  };
  exports["Biapply"] = Biapply;
  exports["bilift3"] = bilift3;
  exports["bilift2"] = bilift2;
  exports["<<*"] = $less$less$times;
  exports["*>>"] = $times$greater$greater;
  exports["<<*>>"] = $less$less$times$greater$greater;
  exports["biapply"] = biapply;
  exports["<<$>>"] = $less$less$dollar$greater$greater;;
 
})(PS["Control.Biapply"] = PS["Control.Biapply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapply = PS["Control.Biapply"];     
  var Biapplicative = function (__superclass_Control$dotBiapply$dotBiapply_0, bipure) {
      this["__superclass_Control.Biapply.Biapply_0"] = __superclass_Control$dotBiapply$dotBiapply_0;
      this.bipure = bipure;
  };
  var bipure = function (dict) {
      return dict.bipure;
  };
  exports["Biapplicative"] = Biapplicative;
  exports["bipure"] = bipure;;
 
})(PS["Control.Biapplicative"] = PS["Control.Biapplicative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $greater$eq$greater = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return Prelude[">>="](dictBind)(f(a))(g);
              };
          };
      };
  };
  var $eq$less$less = function (dictBind) {
      return function (f) {
          return function (m) {
              return Prelude[">>="](dictBind)(m)(f);
          };
      };
  };
  var $less$eq$less = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return $eq$less$less(dictBind)(f)(g(a));
              };
          };
      };
  };
  var join = function (dictBind) {
      return function (m) {
          return Prelude[">>="](dictBind)(m)(Prelude.id(Prelude.categoryFn));
      };
  };
  var ifM = function (dictBind) {
      return function (cond) {
          return function (t) {
              return function (f) {
                  return Prelude[">>="](dictBind)(cond)(function (cond$prime) {
                      if (cond$prime) {
                          return t;
                      };
                      if (!cond$prime) {
                          return f;
                      };
                      throw new Error("Failed pattern match at Control.Bind line 44, column 1 - line 45, column 1: " + [ cond$prime.constructor.name ]);
                  });
              };
          };
      };
  };
  exports["ifM"] = ifM;
  exports["join"] = join;
  exports["<=<"] = $less$eq$less;
  exports[">=>"] = $greater$eq$greater;
  exports["=<<"] = $eq$less$less;;
 
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Extend = function (__superclass_Prelude$dotFunctor_0, extend) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.extend = extend;
  };
  var extendFn = function (dictSemigroup) {
      return new Extend(function () {
          return Prelude.functorFn;
      }, function (f) {
          return function (g) {
              return function (w) {
                  return f(function (w$prime) {
                      return g(Prelude["<>"](dictSemigroup)(w)(w$prime));
                  });
              };
          };
      });
  };
  var extend = function (dict) {
      return dict.extend;
  };
  var $less$less$eq = function (dictExtend) {
      return extend(dictExtend);
  };
  var $eq$less$eq = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return f($less$less$eq(dictExtend)(g)(w));
              };
          };
      };
  };
  var $eq$greater$eq = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return g($less$less$eq(dictExtend)(f)(w));
              };
          };
      };
  };
  var $eq$greater$greater = function (dictExtend) {
      return function (w) {
          return function (f) {
              return $less$less$eq(dictExtend)(f)(w);
          };
      };
  };
  var duplicate = function (dictExtend) {
      return extend(dictExtend)(Prelude.id(Prelude.categoryFn));
  };
  exports["Extend"] = Extend;
  exports["duplicate"] = duplicate;
  exports["=<="] = $eq$less$eq;
  exports["=>="] = $eq$greater$eq;
  exports["=>>"] = $eq$greater$greater;
  exports["<<="] = $less$less$eq;
  exports["extend"] = extend;
  exports["extendFn"] = extendFn;;
 
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Extend = PS["Control.Extend"];     
  var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
      this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
      this.extract = extract;
  };
  var extract = function (dict) {
      return dict.extract;
  };
  exports["Comonad"] = Comonad;
  exports["extract"] = extract;;
 
})(PS["Control.Comonad"] = PS["Control.Comonad"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
  exports["defer"] = defer;;
 
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var when = function (dictMonad) {
      return function (v) {
          return function (m) {
              if (v) {
                  return m;
              };
              if (!v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
              };
              throw new Error("Failed pattern match at Control.Monad line 8, column 1 - line 9, column 1: " + [ v.constructor.name, m.constructor.name ]);
          };
      };
  };
  var unless = function (dictMonad) {
      return function (v) {
          return function (m) {
              if (!v) {
                  return m;
              };
              if (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
              };
              throw new Error("Failed pattern match at Control.Monad line 13, column 1 - line 14, column 1: " + [ v.constructor.name, m.constructor.name ]);
          };
      };
  };
  exports["unless"] = unless;
  exports["when"] = when;;
 
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.untilE = function (f) {
    return function () {
      while (!f());
      return {};
    };
  };

  exports.whileE = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
        return {};
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["foreachE"] = $foreign.foreachE;
  exports["forE"] = $foreign.forE;
  exports["whileE"] = $foreign.whileE;
  exports["untilE"] = $foreign.untilE;
  exports["runPure"] = $foreign.runPure;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var MonadEff = function (__superclass_Prelude$dotMonad_0, liftEff) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Prelude.id(Prelude.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
  exports["monadEffEff"] = monadEffEff;;
 
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var print = function (dictShow) {
      return function ($1) {
          return $foreign.log(Prelude.show(dictShow)($1));
      };
  };
  exports["print"] = print;
  exports["error"] = $foreign.error;
  exports["log"] = $foreign.log;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console.Unsafe

  exports.logAny = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.errorAny = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console.Unsafe"] = PS["Control.Monad.Eff.Console.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  exports["errorAny"] = $foreign.errorAny;
  exports["logAny"] = $foreign.logAny;;
 
})(PS["Control.Monad.Eff.Console.Unsafe"] = PS["Control.Monad.Eff.Console.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Exception

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.stackImpl = function (just) {
    return function (nothing) {
      return function (e) {
        return e.stack ? just(e.stack) : nothing;
      };
    };
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];     
  var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
      this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
  };
  var monadPlusArray = new MonadPlus(function () {
      return Control_Alternative.alternativeArray;
  }, function () {
      return Prelude.monadArray;
  });
  var guard = function (dictMonadPlus) {
      return function (v) {
          if (v) {
              return Prelude["return"]((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
          };
          throw new Error("Failed pattern match at Control.MonadPlus line 35, column 1 - line 36, column 1: " + [ v.constructor.name ]);
      };
  };
  exports["MonadPlus"] = MonadPlus;
  exports["guard"] = guard;
  exports["monadPlusArray"] = monadPlusArray;;
 
})(PS["Control.MonadPlus"] = PS["Control.MonadPlus"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Invariant = function (imap) {
      this.imap = imap;
  };
  var imapF = function (dictFunctor) {
      return function ($1) {
          return Prelude["const"](Prelude.map(dictFunctor)($1));
      };
  };
  var invariantArray = new Invariant(imapF(Prelude.functorArray));
  var invariantFn = new Invariant(imapF(Prelude.functorFn));
  var imap = function (dict) {
      return dict.imap;
  };
  exports["Invariant"] = Invariant;
  exports["imapF"] = imapF;
  exports["imap"] = imap;
  exports["invariantFn"] = invariantFn;
  exports["invariantArray"] = invariantArray;;
 
})(PS["Data.Functor.Invariant"] = PS["Data.Functor.Invariant"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Prelude.semigroupUnit;
  }, Prelude.unit);
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");
  var monoidArray = new Monoid(function () {
      return Prelude.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Prelude.semigroupFn(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Prelude["const"](mempty(dictMonoid)));
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Prelude.Show(function (v) {
          if (v instanceof Just) {
              return "Just (" + (Prelude.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 289, column 1 - line 291, column 19: " + [ v.constructor.name ]);
      });
  };
  var semigroupMaybe = function (dictSemigroup) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe line 231, column 1 - line 236, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe$prime = function (g) {
      return function (f) {
          return function (v) {
              if (v instanceof Nothing) {
                  return g(Prelude.unit);
              };
              if (v instanceof Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 39, column 1 - line 40, column 1: " + [ g.constructor.name, f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var maybe = function (b) {
      return function (f) {
          return function (v) {
              if (v instanceof Nothing) {
                  return b;
              };
              if (v instanceof Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ b.constructor.name, f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Prelude["const"](false));
  var isJust = maybe(false)(Prelude["const"](true));
  var functorMaybe = new Prelude.Functor(function (fn) {
      return function (v) {
          if (v instanceof Just) {
              return new Just(fn(v.value0));
          };
          return Nothing.value;
      };
  });
  var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
  var fromMaybe$prime = function (a) {
      return maybe$prime(a)(Prelude.id(Prelude.categoryFn));
  };
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  var extendMaybe = new Control_Extend.Extend(function () {
      return functorMaybe;
  }, function (f) {
      return function (v) {
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          return new Just(f(v));
      };
  });
  var eqMaybe = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              if (v instanceof Nothing && v1 instanceof Nothing) {
                  return true;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return Prelude["=="](dictEq)(v.value0)(v1.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqMaybe(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              if (v instanceof Just && v1 instanceof Just) {
                  return Prelude.compare(dictOrd)(v.value0)(v1.value0);
              };
              if (v instanceof Nothing && v1 instanceof Nothing) {
                  return Prelude.EQ.value;
              };
              if (v instanceof Nothing) {
                  return Prelude.LT.value;
              };
              if (v1 instanceof Nothing) {
                  return Prelude.GT.value;
              };
              throw new Error("Failed pattern match at Data.Maybe line 269, column 1 - line 275, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var boundedMaybe = function (dictBounded) {
      return new Prelude.Bounded(Nothing.value, new Just(Prelude.top(dictBounded)));
  };
  var boundedOrdMaybe = function (dictBoundedOrd) {
      return new Prelude.BoundedOrd(function () {
          return boundedMaybe(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
      }, function () {
          return ordMaybe(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
      });
  };
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (x) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(x);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 121, column 1 - line 145, column 1: " + [ v.constructor.name, x.constructor.name ]);
      };
  });
  var bindMaybe = new Prelude.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (k) {
          if (v instanceof Just) {
              return k(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 180, column 1 - line 199, column 1: " + [ v.constructor.name, k.constructor.name ]);
      };
  });
  var booleanAlgebraMaybe = function (dictBooleanAlgebra) {
      return new Prelude.BooleanAlgebra(function () {
          return boundedMaybe(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.conj(dictBooleanAlgebra))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.disj(dictBooleanAlgebra))(x))(y);
          };
      }, Prelude.map(functorMaybe)(Prelude.not(dictBooleanAlgebra)));
  };
  var semiringMaybe = function (dictSemiring) {
      return new Prelude.Semiring(function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.add(dictSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.mul(dictSemiring))(x))(y);
          };
      }, new Just(Prelude.one(dictSemiring)), new Just(Prelude.zero(dictSemiring)));
  };
  var moduloSemiringMaybe = function (dictModuloSemiring) {
      return new Prelude.ModuloSemiring(function () {
          return semiringMaybe(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.div(dictModuloSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.mod(dictModuloSemiring))(x))(y);
          };
      });
  };
  var ringMaybe = function (dictRing) {
      return new Prelude.Ring(function () {
          return semiringMaybe(dictRing["__superclass_Prelude.Semiring_0"]());
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.sub(dictRing))(x))(y);
          };
      });
  };
  var divisionRingMaybe = function (dictDivisionRing) {
      return new Prelude.DivisionRing(function () {
          return moduloSemiringMaybe(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
      }, function () {
          return ringMaybe(dictDivisionRing["__superclass_Prelude.Ring_0"]());
      });
  };
  var numMaybe = function (dictNum) {
      return new Prelude.Num(function () {
          return divisionRingMaybe(dictNum["__superclass_Prelude.DivisionRing_0"]());
      });
  };
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Prelude.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (r) {
          if (v instanceof Nothing) {
              return r;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return plusMaybe;
  }, function () {
      return applicativeMaybe;
  });
  var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isNothing"] = isNothing;
  exports["isJust"] = isJust;
  exports["fromMaybe'"] = fromMaybe$prime;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe'"] = maybe$prime;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadPlusMaybe"] = monadPlusMaybe;
  exports["extendMaybe"] = extendMaybe;
  exports["invariantMaybe"] = invariantMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["semiringMaybe"] = semiringMaybe;
  exports["moduloSemiringMaybe"] = moduloSemiringMaybe;
  exports["ringMaybe"] = ringMaybe;
  exports["divisionRingMaybe"] = divisionRingMaybe;
  exports["numMaybe"] = numMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
  exports["boundedMaybe"] = boundedMaybe;
  exports["boundedOrdMaybe"] = boundedOrdMaybe;
  exports["booleanAlgebraMaybe"] = booleanAlgebraMaybe;
  exports["showMaybe"] = showMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var $$throw = function ($0) {
      return $foreign.throwException($foreign.error($0));
  };
  var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var showError = new Prelude.Show($foreign.showErrorImpl);
  exports["throw"] = $$throw;
  exports["stack"] = stack;
  exports["showError"] = showError;
  exports["catchException"] = $foreign.catchException;
  exports["throwException"] = $foreign.throwException;
  exports["message"] = $foreign.message;
  exports["error"] = $foreign.error;;
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Unsafe

  exports.unsafeInterleaveEff = function (f) {
    return f;
  };
 
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeInterleaveEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeInterleaveEff"] = $foreign.unsafeInterleaveEff;;
 
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];     
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;;
 
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.ST

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        /* jshint boss: true */
        return ref.value = f(ref.value);
      };
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        /* jshint boss: true */
        return ref.value = a;
      };
    };
  };

  exports.runST = function (f) {
    return f;
  };
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var pureST = function (st) {
      return Control_Monad_Eff.runPure($foreign.runST(st));
  };
  exports["pureST"] = pureST;
  exports["runST"] = $foreign.runST;
  exports["writeSTRef"] = $foreign.writeSTRef;
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["newSTRef"] = $foreign.newSTRef;;
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  exports.replicate = function (n) {
    return function (v) {
      if (n < 1) return [];
      var r = new Array(n);
      for (var i = 0; i < n; i++) r[i] = v;
      return r;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      /* jshint maxparams: 2 */
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];     
  var First = function (x) {
      return x;
  };
  var showFirst = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "First (" + (Prelude.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupFirst = new Prelude.Semigroup(function (v) {
      return function (second) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return second;
      };
  });
  var runFirst = function (v) {
      return v;
  };
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  var functorFirst = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(v);
      };
  });
  var invariantFirst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorFirst));
  var extendFirst = new Control_Extend.Extend(function () {
      return functorFirst;
  }, function (f) {
      return function (v) {
          return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($33) {
              return f(First($33));
          })(v);
      };
  });
  var eqFirst = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](Data_Maybe.eqMaybe(dictEq))(v)(v1);
          };
      });
  };
  var ordFirst = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqFirst(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
          };
      });
  };
  var boundedFirst = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(Data_Maybe.boundedMaybe(dictBounded)), Prelude.top(Data_Maybe.boundedMaybe(dictBounded)));
  };
  var applyFirst = new Prelude.Apply(function () {
      return functorFirst;
  }, function (v) {
      return function (v1) {
          return Prelude["<*>"](Data_Maybe.applyMaybe)(v)(v1);
      };
  });
  var bindFirst = new Prelude.Bind(function () {
      return applyFirst;
  }, function (v) {
      return function (f) {
          return Prelude.bind(Data_Maybe.bindMaybe)(v)(function ($34) {
              return runFirst(f($34));
          });
      };
  });
  var applicativeFirst = new Prelude.Applicative(function () {
      return applyFirst;
  }, function ($35) {
      return First(Prelude.pure(Data_Maybe.applicativeMaybe)($35));
  });
  var monadFirst = new Prelude.Monad(function () {
      return applicativeFirst;
  }, function () {
      return bindFirst;
  });
  exports["First"] = First;
  exports["runFirst"] = runFirst;
  exports["eqFirst"] = eqFirst;
  exports["ordFirst"] = ordFirst;
  exports["boundedFirst"] = boundedFirst;
  exports["functorFirst"] = functorFirst;
  exports["applyFirst"] = applyFirst;
  exports["applicativeFirst"] = applicativeFirst;
  exports["bindFirst"] = bindFirst;
  exports["monadFirst"] = monadFirst;
  exports["extendFirst"] = extendFirst;
  exports["invariantFirst"] = invariantFirst;
  exports["showFirst"] = showFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;;
 
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Last = function (x) {
      return x;
  };
  var showLast = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Last (" + (Prelude.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupLast = new Prelude.Semigroup(function (last) {
      return function (v) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return last;
          };
          throw new Error("Failed pattern match at Data.Maybe.Last line 57, column 1 - line 61, column 1: " + [ last.constructor.name, v.constructor.name ]);
      };
  });
  var runLast = function (v) {
      return v;
  };
  var monoidLast = new Data_Monoid.Monoid(function () {
      return semigroupLast;
  }, Data_Maybe.Nothing.value);
  var functorLast = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(v);
      };
  });
  var invariantLast = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLast));
  var extendLast = new Control_Extend.Extend(function () {
      return functorLast;
  }, function (f) {
      return function (v) {
          return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($33) {
              return f(Last($33));
          })(v);
      };
  });
  var eqLast = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](Data_Maybe.eqMaybe(dictEq))(v)(v1);
          };
      });
  };
  var ordLast = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqLast(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
          };
      });
  };
  var boundedLast = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(Data_Maybe.boundedMaybe(dictBounded)), Prelude.top(Data_Maybe.boundedMaybe(dictBounded)));
  };
  var applyLast = new Prelude.Apply(function () {
      return functorLast;
  }, function (v) {
      return function (v1) {
          return Prelude["<*>"](Data_Maybe.applyMaybe)(v)(v1);
      };
  });
  var bindLast = new Prelude.Bind(function () {
      return applyLast;
  }, function (v) {
      return function (f) {
          return Prelude.bind(Data_Maybe.bindMaybe)(v)(function ($34) {
              return runLast(f($34));
          });
      };
  });
  var applicativeLast = new Prelude.Applicative(function () {
      return applyLast;
  }, function ($35) {
      return Last(Prelude.pure(Data_Maybe.applicativeMaybe)($35));
  });
  var monadLast = new Prelude.Monad(function () {
      return applicativeLast;
  }, function () {
      return bindLast;
  });
  exports["Last"] = Last;
  exports["runLast"] = runLast;
  exports["eqLast"] = eqLast;
  exports["ordLast"] = ordLast;
  exports["boundedLast"] = boundedLast;
  exports["functorLast"] = functorLast;
  exports["applyLast"] = applyLast;
  exports["applicativeLast"] = applicativeLast;
  exports["bindLast"] = bindLast;
  exports["monadLast"] = monadLast;
  exports["extendLast"] = extendLast;
  exports["invariantLast"] = invariantLast;
  exports["showLast"] = showLast;
  exports["semigroupLast"] = semigroupLast;
  exports["monoidLast"] = monoidLast;;
 
})(PS["Data.Maybe.Last"] = PS["Data.Maybe.Last"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Additive = function (x) {
      return x;
  };
  var showAdditive = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Additive (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semigroupAdditive = function (dictSemiring) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["+"](dictSemiring)(v)(v1);
          };
      });
  };
  var runAdditive = function (v) {
      return v;
  };
  var monoidAdditive = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAdditive(dictSemiring);
      }, Prelude.zero(dictSemiring));
  };
  var invariantAdditive = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorAdditive = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendAdditive = new Control_Extend.Extend(function () {
      return functorAdditive;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqAdditive = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordAdditive = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqAdditive(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadAdditive = new Control_Comonad.Comonad(function () {
      return extendAdditive;
  }, runAdditive);
  var applyAdditive = new Prelude.Apply(function () {
      return functorAdditive;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindAdditive = new Prelude.Bind(function () {
      return applyAdditive;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeAdditive = new Prelude.Applicative(function () {
      return applyAdditive;
  }, Additive);
  var monadAdditive = new Prelude.Monad(function () {
      return applicativeAdditive;
  }, function () {
      return bindAdditive;
  });
  exports["Additive"] = Additive;
  exports["runAdditive"] = runAdditive;
  exports["eqAdditive"] = eqAdditive;
  exports["ordAdditive"] = ordAdditive;
  exports["functorAdditive"] = functorAdditive;
  exports["applyAdditive"] = applyAdditive;
  exports["applicativeAdditive"] = applicativeAdditive;
  exports["bindAdditive"] = bindAdditive;
  exports["monadAdditive"] = monadAdditive;
  exports["extendAdditive"] = extendAdditive;
  exports["comonadAdditive"] = comonadAdditive;
  exports["invariantAdditive"] = invariantAdditive;
  exports["showAdditive"] = showAdditive;
  exports["semigroupAdditive"] = semigroupAdditive;
  exports["monoidAdditive"] = monoidAdditive;;
 
})(PS["Data.Monoid.Additive"] = PS["Data.Monoid.Additive"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Conj = function (x) {
      return x;
  };
  var showConj = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Conj (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semiringConj = function (dictBooleanAlgebra) {
      return new Prelude.Semiring(function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()), Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var semigroupConj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runConj = function (v) {
      return v;
  };
  var monoidConj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictBooleanAlgebra);
      }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var functorConj = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendConj = new Control_Extend.Extend(function () {
      return functorConj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqConj = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordConj = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqConj(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadConj = new Control_Comonad.Comonad(function () {
      return extendConj;
  }, runConj);
  var boundedConj = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
  };
  var applyConj = new Prelude.Apply(function () {
      return functorConj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindConj = new Prelude.Bind(function () {
      return applyConj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeConj = new Prelude.Applicative(function () {
      return applyConj;
  }, Conj);
  var monadConj = new Prelude.Monad(function () {
      return applicativeConj;
  }, function () {
      return bindConj;
  });
  exports["Conj"] = Conj;
  exports["runConj"] = runConj;
  exports["eqConj"] = eqConj;
  exports["ordConj"] = ordConj;
  exports["boundedConj"] = boundedConj;
  exports["functorConj"] = functorConj;
  exports["applyConj"] = applyConj;
  exports["applicativeConj"] = applicativeConj;
  exports["bindConj"] = bindConj;
  exports["monadConj"] = monadConj;
  exports["extendConj"] = extendConj;
  exports["comonadConj"] = comonadConj;
  exports["showConj"] = showConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
  exports["semiringConj"] = semiringConj;;
 
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Disj = function (x) {
      return x;
  };
  var showDisj = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Disj (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semiringDisj = function (dictBooleanAlgebra) {
      return new Prelude.Semiring(function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()), Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var semigroupDisj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runDisj = function (v) {
      return v;
  };
  var monoidDisj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictBooleanAlgebra);
      }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var functorDisj = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDisj = new Control_Extend.Extend(function () {
      return functorDisj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDisj = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordDisj = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqDisj(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadDisj = new Control_Comonad.Comonad(function () {
      return extendDisj;
  }, runDisj);
  var boundedDisj = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
  };
  var applyDisj = new Prelude.Apply(function () {
      return functorDisj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDisj = new Prelude.Bind(function () {
      return applyDisj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDisj = new Prelude.Applicative(function () {
      return applyDisj;
  }, Disj);
  var monadDisj = new Prelude.Monad(function () {
      return applicativeDisj;
  }, function () {
      return bindDisj;
  });
  exports["Disj"] = Disj;
  exports["runDisj"] = runDisj;
  exports["eqDisj"] = eqDisj;
  exports["ordDisj"] = ordDisj;
  exports["boundedDisj"] = boundedDisj;
  exports["functorDisj"] = functorDisj;
  exports["applyDisj"] = applyDisj;
  exports["applicativeDisj"] = applicativeDisj;
  exports["bindDisj"] = bindDisj;
  exports["monadDisj"] = monadDisj;
  exports["extendDisj"] = extendDisj;
  exports["comonadDisj"] = comonadDisj;
  exports["showDisj"] = showDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
  exports["semiringDisj"] = semiringDisj;;
 
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Dual = function (x) {
      return x;
  };
  var showDual = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Dual (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semigroupDual = function (dictSemigroup) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["<>"](dictSemigroup)(v1)(v);
          };
      });
  };
  var runDual = function (v) {
      return v;
  };
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var invariantDual = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorDual = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDual = new Control_Extend.Extend(function () {
      return functorDual;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDual = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordDual = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqDual(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadDual = new Control_Comonad.Comonad(function () {
      return extendDual;
  }, runDual);
  var applyDual = new Prelude.Apply(function () {
      return functorDual;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDual = new Prelude.Bind(function () {
      return applyDual;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDual = new Prelude.Applicative(function () {
      return applyDual;
  }, Dual);
  var monadDual = new Prelude.Monad(function () {
      return applicativeDual;
  }, function () {
      return bindDual;
  });
  exports["Dual"] = Dual;
  exports["runDual"] = runDual;
  exports["eqDual"] = eqDual;
  exports["ordDual"] = ordDual;
  exports["functorDual"] = functorDual;
  exports["applyDual"] = applyDual;
  exports["applicativeDual"] = applicativeDual;
  exports["bindDual"] = bindDual;
  exports["monadDual"] = monadDual;
  exports["extendDual"] = extendDual;
  exports["comonadDual"] = comonadDual;
  exports["invariantDual"] = invariantDual;
  exports["showDual"] = showDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;;
 
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return function ($10) {
              return v(v1($10));
          };
      };
  });
  var runEndo = function (v) {
      return v;
  };
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Prelude.id(Prelude.categoryFn));
  var invariantEndo = new Data_Functor_Invariant.Invariant(function (ab) {
      return function (ba) {
          return function (v) {
              return function ($11) {
                  return ab(v(ba($11)));
              };
          };
      };
  });
  exports["Endo"] = Endo;
  exports["runEndo"] = runEndo;
  exports["invariantEndo"] = invariantEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;;
 
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Multiplicative = function (x) {
      return x;
  };
  var showMultiplicative = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Multiplicative (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semigroupMultiplicative = function (dictSemiring) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["*"](dictSemiring)(v)(v1);
          };
      });
  };
  var runMultiplicative = function (v) {
      return v;
  };
  var monoidMultiplicative = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMultiplicative(dictSemiring);
      }, Prelude.one(dictSemiring));
  };
  var invariantMultiplicative = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorMultiplicative = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendMultiplicative = new Control_Extend.Extend(function () {
      return functorMultiplicative;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqMultiplicative = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordMultiplicative = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqMultiplicative(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadMultiplicative = new Control_Comonad.Comonad(function () {
      return extendMultiplicative;
  }, runMultiplicative);
  var applyMultiplicative = new Prelude.Apply(function () {
      return functorMultiplicative;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindMultiplicative = new Prelude.Bind(function () {
      return applyMultiplicative;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeMultiplicative = new Prelude.Applicative(function () {
      return applyMultiplicative;
  }, Multiplicative);
  var monadMultiplicative = new Prelude.Monad(function () {
      return applicativeMultiplicative;
  }, function () {
      return bindMultiplicative;
  });
  exports["Multiplicative"] = Multiplicative;
  exports["runMultiplicative"] = runMultiplicative;
  exports["eqMultiplicative"] = eqMultiplicative;
  exports["ordMultiplicative"] = ordMultiplicative;
  exports["functorMultiplicative"] = functorMultiplicative;
  exports["applyMultiplicative"] = applyMultiplicative;
  exports["applicativeMultiplicative"] = applicativeMultiplicative;
  exports["bindMultiplicative"] = bindMultiplicative;
  exports["monadMultiplicative"] = monadMultiplicative;
  exports["extendMultiplicative"] = extendMultiplicative;
  exports["comonadMultiplicative"] = comonadMultiplicative;
  exports["invariantMultiplicative"] = invariantMultiplicative;
  exports["showMultiplicative"] = showMultiplicative;
  exports["semigroupMultiplicative"] = semigroupMultiplicative;
  exports["monoidMultiplicative"] = monoidMultiplicative;;
 
})(PS["Data.Monoid.Multiplicative"] = PS["Data.Monoid.Multiplicative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($159) {
                  return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($159));
              })(Prelude.pure(dictApplicative)(Prelude.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Prelude.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Prelude.id(Prelude.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $85 = cmp(v.value0)(v1);
                          if ($85 instanceof Prelude.GT) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 246, column 3 - line 247, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Prelude.compare(dictOrd));
      };
  };
  var mconcat = function (dictFoldable) {
      return function (dictMonoid) {
          return foldl(dictFoldable)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(dictMonoid));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $89 = cmp(v.value0)(v1);
                          if ($89 instanceof Prelude.LT) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 261, column 3 - line 262, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Prelude.compare(dictOrd));
      };
  };
  var product = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Prelude["*"](dictSemiring))(Prelude.one(dictSemiring));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Prelude["+"](dictSemiring))(Prelude.zero(dictSemiring));
      };
  };
  var foldableMultiplicative = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(z)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, z.constructor.name, v.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, z.constructor.name, v.constructor.name ]);
          };
      };
  });
  var foldableDual = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableDisj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableConj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableAdditive = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldl(dictFoldable)(function (acc) {
                      return function (x) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldableFirst = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldableLast = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($160) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(c)($160)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Monoid_Endo.runEndo(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($161) {
                      return Data_Monoid_Endo.Endo(c($161));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          return foldl(dictFoldable)(function (r) {
              return function (x) {
                  var $158 = p(x);
                  if ($158) {
                      return new Data_Maybe.Just(x);
                  };
                  if (!$158) {
                      return r;
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 233, column 1 - line 234, column 1: " + [ $158.constructor.name ]);
              };
          })(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($162) {
                  return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($163) {
                      return Data_Monoid_Disj.Disj(p($163));
                  })($162));
              };
          };
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($164) {
              return any(dictFoldable)(Prelude.booleanAlgebraBoolean)(Prelude["=="](dictEq)($164));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($165) {
                  return !elem(dictFoldable)(dictEq)(x)($165);
              };
          };
      };
  };
  var or = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return any(dictFoldable)(dictBooleanAlgebra)(Prelude.id(Prelude.categoryFn));
      };
  };
  var all = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($166) {
                  return Data_Monoid_Conj.runConj(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($167) {
                      return Data_Monoid_Conj.Conj(p($167));
                  })($166));
              };
          };
      };
  };
  var and = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return all(dictFoldable)(dictBooleanAlgebra)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["minimumBy"] = minimumBy;
  exports["minimum"] = minimum;
  exports["maximumBy"] = maximumBy;
  exports["maximum"] = maximum;
  exports["find"] = find;
  exports["notElem"] = notElem;
  exports["elem"] = elem;
  exports["product"] = product;
  exports["sum"] = sum;
  exports["all"] = all;
  exports["any"] = any;
  exports["or"] = or;
  exports["and"] = and;
  exports["intercalate"] = intercalate;
  exports["mconcat"] = mconcat;
  exports["sequence_"] = sequence_;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldlDefault"] = foldlDefault;
  exports["foldrDefault"] = foldrDefault;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableFirst"] = foldableFirst;
  exports["foldableLast"] = foldableLast;
  exports["foldableAdditive"] = foldableAdditive;
  exports["foldableDual"] = foldableDual;
  exports["foldableDisj"] = foldableDisj;
  exports["foldableConj"] = foldableConj;
  exports["foldableMultiplicative"] = foldableMultiplicative;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont (fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList (x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray (list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var StateL = function (x) {
      return x;
  };
  var StateR = function (x) {
      return x;
  };
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableMultiplicative = new Traversable(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function () {
      return Data_Monoid_Multiplicative.functorMultiplicative;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
      };
  });
  var traversableMaybe = new Traversable(function () {
      return Data_Foldable.foldableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Prelude.pure(dictApplicative)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable line 76, column 1 - line 82, column 1: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Prelude.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(f(v.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable line 76, column 1 - line 82, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var traversableDual = new Traversable(function () {
      return Data_Foldable.foldableDual;
  }, function () {
      return Data_Monoid_Dual.functorDual;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(f(v));
          };
      };
  });
  var traversableDisj = new Traversable(function () {
      return Data_Foldable.foldableDisj;
  }, function () {
      return Data_Monoid_Disj.functorDisj;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Disj.Disj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Disj.Disj)(f(v));
          };
      };
  });
  var traversableConj = new Traversable(function () {
      return Data_Foldable.foldableConj;
  }, function () {
      return Data_Monoid_Conj.functorConj;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Conj.Conj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Conj.Conj)(f(v));
          };
      };
  });
  var traversableAdditive = new Traversable(function () {
      return Data_Foldable.foldableAdditive;
  }, function () {
      return Data_Monoid_Additive.functorAdditive;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(f(v));
          };
      };
  });
  var stateR = function (v) {
      return v;
  };
  var stateL = function (v) {
      return v;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Prelude.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Prelude.apply(dictApplicative["__superclass_Prelude.Apply_0"]()))(Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var traversableFirst = new Traversable(function () {
      return Data_Foldable.foldableFirst;
  }, function () {
      return Data_Maybe_First.functorFirst;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traversableLast = new Traversable(function () {
      return Data_Foldable.foldableLast;
  }, function () {
      return Data_Maybe_Last.functorLast;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traverseDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (ta) {
                  return sequence(dictTraversable)(dictApplicative)(Prelude.map(dictTraversable["__superclass_Prelude.Functor_0"]())(f)(ta));
              };
          };
      };
  };
  var functorStateR = new Prelude.Functor(function (f) {
      return function (k) {
          return function (s) {
              var $74 = stateR(k)(s);
              return {
                  accum: $74.accum, 
                  value: f($74.value)
              };
          };
      };
  });
  var functorStateL = new Prelude.Functor(function (f) {
      return function (k) {
          return function (s) {
              var $77 = stateL(k)(s);
              return {
                  accum: $77.accum, 
                  value: f($77.value)
              };
          };
      };
  });
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  var applyStateR = new Prelude.Apply(function () {
      return functorStateR;
  }, function (f) {
      return function (x) {
          return function (s) {
              var $80 = stateR(x)(s);
              var $81 = stateR(f)($80.accum);
              return {
                  accum: $81.accum, 
                  value: $81.value($80.value)
              };
          };
      };
  });
  var applyStateL = new Prelude.Apply(function () {
      return functorStateL;
  }, function (f) {
      return function (x) {
          return function (s) {
              var $86 = stateL(f)(s);
              var $87 = stateL(x)($86.accum);
              return {
                  accum: $87.accum, 
                  value: $86.value($87.value)
              };
          };
      };
  });
  var applicativeStateR = new Prelude.Applicative(function () {
      return applyStateR;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumR = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateR(traverse(dictTraversable)(applicativeStateR)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanr = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumR(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(a)(b);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var applicativeStateL = new Prelude.Applicative(function () {
      return applyStateL;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumL = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateL(traverse(dictTraversable)(applicativeStateL)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanl = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumL(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(b)(a);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["mapAccumR"] = mapAccumR;
  exports["mapAccumL"] = mapAccumL;
  exports["scanr"] = scanr;
  exports["scanl"] = scanl;
  exports["for"] = $$for;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverseDefault"] = traverseDefault;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableFirst"] = traversableFirst;
  exports["traversableLast"] = traversableLast;
  exports["traversableAdditive"] = traversableAdditive;
  exports["traversableDual"] = traversableDual;
  exports["traversableConj"] = traversableConj;
  exports["traversableDisj"] = traversableDisj;
  exports["traversableMultiplicative"] = traversableMultiplicative;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];     
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldr = function (dict) {
      return dict.bifoldr;
  };
  var bitraverse_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)(function ($18) {
                      return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($18));
                  })(function ($19) {
                      return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(g($19));
                  })(Prelude.pure(dictApplicative)(Prelude.unit));
              };
          };
      };
  };
  var bifor_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  var bisequence_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return bitraverse_(dictBifoldable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
      };
  };
  var bifoldl = function (dict) {
      return dict.bifoldl;
  };
  var bifoldMapDefaultR = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return function (p) {
                      return bifoldr(dictBifoldable)(function ($20) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f($20));
                      })(function ($21) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(g($21));
                      })(Data_Monoid.mempty(dictMonoid))(p);
                  };
              };
          };
      };
  };
  var bifoldMapDefaultL = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return function (p) {
                      return bifoldl(dictBifoldable)(function (m) {
                          return function (a) {
                              return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(m)(f(a));
                          };
                      })(function (m) {
                          return function (b) {
                              return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(m)(g(b));
                          };
                      })(Data_Monoid.mempty(dictMonoid))(p);
                  };
              };
          };
      };
  };
  var bifoldMap = function (dict) {
      return dict.bifoldMap;
  };
  var bifoldlDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($22) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(f)($22)));
                      })(function ($23) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(g)($23)));
                      })(p)))(z);
                  };
              };
          };
      };
  };
  var bifoldrDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Monoid_Endo.runEndo(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo)(function ($24) {
                          return Data_Monoid_Endo.Endo(f($24));
                      })(function ($25) {
                          return Data_Monoid_Endo.Endo(g($25));
                      })(p))(z);
                  };
              };
          };
      };
  };
  var bifold = function (dictBifoldable) {
      return function (dictMonoid) {
          return bifoldMap(dictBifoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
      };
  };
  var biany = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($26) {
                      return Data_Monoid_Disj.runDisj(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($27) {
                          return Data_Monoid_Disj.Disj(p($27));
                      })(function ($28) {
                          return Data_Monoid_Disj.Disj(q($28));
                      })($26));
                  };
              };
          };
      };
  };
  var biall = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($29) {
                      return Data_Monoid_Conj.runConj(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($30) {
                          return Data_Monoid_Conj.Conj(p($30));
                      })(function ($31) {
                          return Data_Monoid_Conj.Conj(q($31));
                      })($29));
                  };
              };
          };
      };
  };
  exports["Bifoldable"] = Bifoldable;
  exports["biall"] = biall;
  exports["biany"] = biany;
  exports["bisequence_"] = bisequence_;
  exports["bifor_"] = bifor_;
  exports["bitraverse_"] = bitraverse_;
  exports["bifold"] = bifold;
  exports["bifoldMapDefaultL"] = bifoldMapDefaultL;
  exports["bifoldMapDefaultR"] = bifoldMapDefaultR;
  exports["bifoldlDefault"] = bifoldlDefault;
  exports["bifoldrDefault"] = bifoldrDefault;
  exports["bifoldMap"] = bifoldMap;
  exports["bifoldl"] = bifoldl;
  exports["bifoldr"] = bifoldr;;
 
})(PS["Data.Bifoldable"] = PS["Data.Bifoldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Bitraversable = function (__superclass_Data$dotBifoldable$dotBifoldable_1, __superclass_Data$dotBifunctor$dotBifunctor_0, bisequence, bitraverse) {
      this["__superclass_Data.Bifoldable.Bifoldable_1"] = __superclass_Data$dotBifoldable$dotBifoldable_1;
      this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var bisequenceDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return bitraverse(dictBitraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn))(t);
          };
      };
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  var bitraverseDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return function (t) {
                      return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g)(t));
                  };
              };
          };
      };
  };
  var bifor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  exports["Bitraversable"] = Bitraversable;
  exports["bifor"] = bifor;
  exports["bisequenceDefault"] = bisequenceDefault;
  exports["bitraverseDefault"] = bitraverseDefault;
  exports["bisequence"] = bisequence;
  exports["bitraverse"] = bitraverse;;
 
})(PS["Data.Bitraversable"] = PS["Data.Bitraversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var swap = function (v) {
      return new Tuple(v.value1, v.value0);
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Prelude.Show(function (v) {
              return "Tuple (" + (Prelude.show(dictShow)(v.value0) + (") (" + (Prelude.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var semiringTuple = function (dictSemiring) {
      return function (dictSemiring1) {
          return new Prelude.Semiring(function (v) {
              return function (v1) {
                  return new Tuple(Prelude.add(dictSemiring)(v.value0)(v1.value0), Prelude.add(dictSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.mul(dictSemiring)(v.value0)(v1.value0), Prelude.mul(dictSemiring1)(v.value1)(v1.value1));
              };
          }, new Tuple(Prelude.one(dictSemiring), Prelude.one(dictSemiring1)), new Tuple(Prelude.zero(dictSemiring), Prelude.zero(dictSemiring1)));
      };
  };
  var semigroupoidTuple = new Prelude.Semigroupoid(function (v) {
      return function (v1) {
          return new Tuple(v1.value0, v.value1);
      };
  });
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Prelude.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), Prelude["<>"](dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var ringTuple = function (dictRing) {
      return function (dictRing1) {
          return new Prelude.Ring(function () {
              return semiringTuple(dictRing["__superclass_Prelude.Semiring_0"]())(dictRing1["__superclass_Prelude.Semiring_0"]());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.sub(dictRing)(v.value0)(v1.value0), Prelude.sub(dictRing1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictMonoid1["__superclass_Prelude.Semigroup_0"]());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };
  var moduloSemiringTuple = function (dictModuloSemiring) {
      return function (dictModuloSemiring1) {
          return new Prelude.ModuloSemiring(function () {
              return semiringTuple(dictModuloSemiring["__superclass_Prelude.Semiring_0"]())(dictModuloSemiring1["__superclass_Prelude.Semiring_0"]());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.div(dictModuloSemiring)(v.value0)(v1.value0), Prelude.div(dictModuloSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.mod(dictModuloSemiring)(v.value0)(v1.value0), Prelude.mod(dictModuloSemiring1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function (f) {
                  return Data_Maybe_First.runFirst(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $145 = Prelude["=="](dictEq)(a)(v.value0);
                      if ($145) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      if (!$145) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Data.Tuple line 173, column 1 - line 174, column 1: " + [ $145.constructor.name ]);
                  })(f));
              };
          };
      };
  };
  var functorTuple = new Prelude.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });
  var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
  var fst = function (v) {
      return v.value0;
  };
  var lazyTuple = function (dictLazy) {
      return function (dictLazy1) {
          return new Control_Lazy.Lazy(function (f) {
              return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                  return fst(f(Prelude.unit));
              }), Control_Lazy.defer(dictLazy1)(function (v) {
                  return snd(f(Prelude.unit));
              }));
          });
      };
  };
  var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v.value1)(z);
          };
      };
  });
  var traversableTuple = new Data_Traversable.Traversable(function () {
      return foldableTuple;
  }, function () {
      return functorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var extendTuple = new Control_Extend.Extend(function () {
      return functorTuple;
  }, function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v));
      };
  });
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Prelude.Eq(function (v) {
              return function (v1) {
                  return Prelude["=="](dictEq)(v.value0)(v1.value0) && Prelude["=="](dictEq1)(v.value1)(v1.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Prelude.Ord(function () {
              return eqTuple(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
          }, function (v) {
              return function (v1) {
                  var $190 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                  if ($190 instanceof Prelude.EQ) {
                      return Prelude.compare(dictOrd1)(v.value1)(v1.value1);
                  };
                  return $190;
              };
          });
      };
  };
  var divisionRingTuple = function (dictDivisionRing) {
      return function (dictDivisionRing1) {
          return new Prelude.DivisionRing(function () {
              return moduloSemiringTuple(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]())(dictDivisionRing1["__superclass_Prelude.ModuloSemiring_1"]());
          }, function () {
              return ringTuple(dictDivisionRing["__superclass_Prelude.Ring_0"]())(dictDivisionRing1["__superclass_Prelude.Ring_0"]());
          });
      };
  };
  var numTuple = function (dictNum) {
      return function (dictNum1) {
          return new Prelude.Num(function () {
              return divisionRingTuple(dictNum["__superclass_Prelude.DivisionRing_0"]())(dictNum1["__superclass_Prelude.DivisionRing_0"]());
          });
      };
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  var comonadTuple = new Control_Comonad.Comonad(function () {
      return extendTuple;
  }, snd);
  var boundedTuple = function (dictBounded) {
      return function (dictBounded1) {
          return new Prelude.Bounded(new Tuple(Prelude.bottom(dictBounded), Prelude.bottom(dictBounded1)), new Tuple(Prelude.top(dictBounded), Prelude.top(dictBounded1)));
      };
  };
  var boundedOrdTuple = function (dictBoundedOrd) {
      return function (dictBoundedOrd1) {
          return new Prelude.BoundedOrd(function () {
              return boundedTuple(dictBoundedOrd["__superclass_Prelude.Bounded_0"]())(dictBoundedOrd1["__superclass_Prelude.Bounded_0"]());
          }, function () {
              return ordTuple(dictBoundedOrd["__superclass_Prelude.Ord_1"]())(dictBoundedOrd1["__superclass_Prelude.Ord_1"]());
          });
      };
  };
  var booleanAlgebraTuple = function (dictBooleanAlgebra) {
      return function (dictBooleanAlgebra1) {
          return new Prelude.BooleanAlgebra(function () {
              return boundedTuple(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]())(dictBooleanAlgebra1["__superclass_Prelude.Bounded_0"]());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.conj(dictBooleanAlgebra)(v.value0)(v1.value0), Prelude.conj(dictBooleanAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.disj(dictBooleanAlgebra)(v.value0)(v1.value0), Prelude.disj(dictBooleanAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return new Tuple(Prelude.not(dictBooleanAlgebra)(v.value0), Prelude.not(dictBooleanAlgebra1)(v.value1));
          });
      };
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return g(f(z)(v.value0))(v.value1);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return f(v.value0)(g(v.value1)(z));
              };
          };
      };
  });
  var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableTuple;
  }, function () {
      return bifunctorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  var biapplyTuple = new Control_Biapply.Biapply(function () {
      return bifunctorTuple;
  }, function (v) {
      return function (v1) {
          return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
      };
  });
  var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
      return biapplyTuple;
  }, Tuple.create);
  var applyTuple = function (dictSemigroup) {
      return new Prelude.Apply(function () {
          return functorTuple;
      }, function (v) {
          return function (v1) {
              return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
          };
      });
  };
  var bindTuple = function (dictSemigroup) {
      return new Prelude.Bind(function () {
          return applyTuple(dictSemigroup);
      }, function (v) {
          return function (f) {
              var $254 = f(v.value1);
              return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)($254.value0), $254.value1);
          };
      });
  };
  var applicativeTuple = function (dictMonoid) {
      return new Prelude.Applicative(function () {
          return applyTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
  };
  var monadTuple = function (dictMonoid) {
      return new Prelude.Monad(function () {
          return applicativeTuple(dictMonoid);
      }, function () {
          return bindTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      });
  };
  exports["Tuple"] = Tuple;
  exports["lookup"] = lookup;
  exports["swap"] = swap;
  exports["uncurry"] = uncurry;
  exports["curry"] = curry;
  exports["snd"] = snd;
  exports["fst"] = fst;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
  exports["boundedTuple"] = boundedTuple;
  exports["boundedOrdTuple"] = boundedOrdTuple;
  exports["semigroupoidTuple"] = semigroupoidTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["monoidTuple"] = monoidTuple;
  exports["semiringTuple"] = semiringTuple;
  exports["moduloSemiringTuple"] = moduloSemiringTuple;
  exports["ringTuple"] = ringTuple;
  exports["divisionRingTuple"] = divisionRingTuple;
  exports["numTuple"] = numTuple;
  exports["booleanAlgebraTuple"] = booleanAlgebraTuple;
  exports["functorTuple"] = functorTuple;
  exports["invariantTuple"] = invariantTuple;
  exports["bifunctorTuple"] = bifunctorTuple;
  exports["applyTuple"] = applyTuple;
  exports["biapplyTuple"] = biapplyTuple;
  exports["applicativeTuple"] = applicativeTuple;
  exports["biapplicativeTuple"] = biapplicativeTuple;
  exports["bindTuple"] = bindTuple;
  exports["monadTuple"] = monadTuple;
  exports["extendTuple"] = extendTuple;
  exports["comonadTuple"] = comonadTuple;
  exports["lazyTuple"] = lazyTuple;
  exports["foldableTuple"] = foldableTuple;
  exports["bifoldableTuple"] = bifoldableTuple;
  exports["traversableTuple"] = traversableTuple;
  exports["bitraversableTuple"] = bitraversableTuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;
  exports["unsafeThrow"] = $foreign.unsafeThrow;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];     
  var $colon = $foreign.cons;
  var $dot$dot = $foreign.range;
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unzip = $foreign["uncons'"](function (v) {
      return new Data_Tuple.Tuple([  ], [  ]);
  })(function (v) {
      return function (ts) {
          var $34 = unzip(ts);
          return new Data_Tuple.Tuple($colon(v.value0)($34.value0), $colon(v.value1)($34.value1));
      };
  });
  var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var take = $foreign.slice(0);
  var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var span = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $40 = uncons(xs);
                  if ($40 instanceof Data_Maybe.Just && p($40.value0.head)) {
                      var __tco_acc = $colon($40.value0.head)(acc);
                      acc = __tco_acc;
                      xs = $40.value0.tail;
                      continue tco;
                  };
                  return {
                      init: $foreign.reverse(acc), 
                      rest: xs
                  };
              };
          };
      };
      return go([  ]);
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var $44 = comp(x)(y);
                  if ($44 instanceof Prelude.GT) {
                      return 1;
                  };
                  if ($44 instanceof Prelude.EQ) {
                      return 0;
                  };
                  if ($44 instanceof Prelude.LT) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.Array line 409, column 3 - line 414, column 1: " + [ $44.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Prelude.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())([  ]);
              };
              if (Prelude.otherwise) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictMonad["__superclass_Prelude.Applicative_0"]())($foreign.replicate(n)(m));
              };
              throw new Error("Failed pattern match at Data.Array line 136, column 1 - line 137, column 1: " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubBy = function (eq) {
      return function (xs) {
          var $47 = uncons(xs);
          if ($47 instanceof Data_Maybe.Just) {
              return $colon($47.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                  return !eq($47.value0.head)(y);
              })($47.value0.tail)));
          };
          if ($47 instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          throw new Error("Failed pattern match: " + [ $47.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Prelude.eq(dictEq));
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())($colon)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())([  ]));
          };
      };
  };
  var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Prelude.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1)(xs));
      };
      throw new Error("Failed pattern match at Data.Array line 226, column 1 - line 227, column 1: " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $bang$bang = index;
  var last = function (xs) {
      return $bang$bang(xs)($foreign.length(xs) - 1);
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
          };
      };
  };
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  var groupBy = function (op) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $52 = uncons(xs);
                  if ($52 instanceof Data_Maybe.Just) {
                      var sp = span(op($52.value0.head))($52.value0.tail);
                      var __tco_acc = $colon($colon($52.value0.head)(sp.init))(acc);
                      acc = __tco_acc;
                      xs = sp.rest;
                      continue tco;
                  };
                  if ($52 instanceof Data_Maybe.Nothing) {
                      return $foreign.reverse(acc);
                  };
                  throw new Error("Failed pattern match at Data.Array line 476, column 1 - line 477, column 1: " + [ $52.constructor.name ]);
              };
          };
      };
      return go([  ]);
  };
  var group = function (dictEq) {
      return function (xs) {
          return groupBy(Prelude.eq(dictEq))(xs);
      };
  };
  var group$prime = function (dictOrd) {
      return function ($66) {
          return group(dictOrd["__superclass_Prelude.Eq_0"]())(sort(dictOrd)($66));
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(a);
              })(function (b) {
                  return function (bs) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBy = function (cmp) {
      return function (x) {
          return function (ys) {
              var i = Data_Maybe.maybe(0)(function (v) {
                  return v + 1 | 0;
              })(findLastIndex(function (y) {
                  return Prelude["=="](Prelude.eqOrdering)(cmp(x)(y))(Prelude.GT.value);
              })(ys));
              return Data_Maybe_Unsafe.fromJust(insertAt(i)(x)(ys));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Prelude.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return $foreign.filter(function (x) {
                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Prelude.eq(dictEq));
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return $foreign["uncons'"](function (v) {
              return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())([  ]);
          })(function (x) {
              return function (xs) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(p(x))(function (v) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(filterM(dictMonad)(p)(xs))(function (v1) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                              if (v) {
                                  return $colon(x)(v1);
                              };
                              if (!v) {
                                  return v1;
                              };
                              throw new Error("Failed pattern match: " + [ v.constructor.name ]);
                          })());
                      });
                  });
              };
          });
      };
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (eq) {
      return function (x) {
          return function (v) {
              if (v.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v)(function (i) {
                  return Data_Maybe_Unsafe.fromJust(deleteAt(i)(v));
              })(findIndex(eq(x))(v));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Prelude["++"](Prelude.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Prelude["=="](dictEq));
  };
  var $$delete = function (dictEq) {
      return deleteBy(Prelude.eq(dictEq));
  };
  var $bslash$bslash = function (dictEq) {
      return function (xs) {
          return function (ys) {
              if ($$null(xs)) {
                  return [  ];
              };
              if (Prelude.otherwise) {
                  return $foreign["uncons'"](Prelude["const"](xs))(function (y) {
                      return function (ys2) {
                          return $bslash$bslash(dictEq)($$delete(dictEq)(y)(xs))(ys2);
                      };
                  })(ys);
              };
              throw new Error("Failed pattern match: " + [ xs.constructor.name, ys.constructor.name ]);
          };
      };
  };
  var concatMap = Prelude.flip(Prelude.bind(Prelude.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($67) {
          return Data_Maybe.maybe([  ])(singleton)(f($67));
      });
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  var alterAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  var $64 = f(x);
                  if ($64 instanceof Data_Maybe.Nothing) {
                      return deleteAt(i)(xs);
                  };
                  if ($64 instanceof Data_Maybe.Just) {
                      return updateAt(i)($64.value0)(xs);
                  };
                  throw new Error("Failed pattern match at Data.Array line 349, column 3 - line 358, column 1: " + [ $64.constructor.name ]);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
          };
      };
  };
  exports["foldM"] = foldM;
  exports["unzip"] = unzip;
  exports["zip"] = zip;
  exports["zipWithA"] = zipWithA;
  exports["intersectBy"] = intersectBy;
  exports["intersect"] = intersect;
  exports["\\\\"] = $bslash$bslash;
  exports["deleteBy"] = deleteBy;
  exports["delete"] = $$delete;
  exports["unionBy"] = unionBy;
  exports["union"] = union;
  exports["nubBy"] = nubBy;
  exports["nub"] = nub;
  exports["groupBy"] = groupBy;
  exports["group'"] = group$prime;
  exports["group"] = group;
  exports["span"] = span;
  exports["dropWhile"] = dropWhile;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["sortBy"] = sortBy;
  exports["sort"] = sort;
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["filterM"] = filterM;
  exports["concatMap"] = concatMap;
  exports["alterAt"] = alterAt;
  exports["modifyAt"] = modifyAt;
  exports["updateAt"] = updateAt;
  exports["deleteAt"] = deleteAt;
  exports["insertAt"] = insertAt;
  exports["findLastIndex"] = findLastIndex;
  exports["findIndex"] = findIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["elemIndex"] = elemIndex;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports["insertBy"] = insertBy;
  exports["insert"] = insert;
  exports[":"] = $colon;
  exports["null"] = $$null;
  exports["many"] = many;
  exports["some"] = some;
  exports["replicateM"] = replicateM;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["zipWith"] = $foreign.zipWith;
  exports["drop"] = $foreign.drop;
  exports["slice"] = $foreign.slice;
  exports["filter"] = $foreign.filter;
  exports["concat"] = $foreign.concat;
  exports["reverse"] = $foreign.reverse;
  exports["snoc"] = $foreign.snoc;
  exports["cons"] = $foreign.cons;
  exports["length"] = $foreign.length;
  exports["replicate"] = $foreign.replicate;
  exports["range"] = $foreign.range;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.ST

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.peekSTArrayImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.pokeSTArray = function (xs) {
    return function (i) {
      return function (a) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.spliceSTArray = function (xs) {
    return function (i) {
      return function (howMany) {
        return function (bs) {
          return function () {
            return xs.splice.apply(xs, [i, howMany].concat(bs));
          };
        };
      };
    };
  };

  exports.copyImpl = function (xs) {
    return function () {
      return xs.slice();
    };
  };

  exports.toAssocArray = function (xs) {
    return function () {
      var n = xs.length;
      var as = new Array(n);
      for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
      return as;
    };
  };
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];     
  var thaw = $foreign.copyImpl;
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  var peekSTArray = $foreign.peekSTArrayImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var freeze = $foreign.copyImpl;
  exports["thaw"] = thaw;
  exports["freeze"] = freeze;
  exports["pushSTArray"] = pushSTArray;
  exports["peekSTArray"] = peekSTArray;
  exports["toAssocArray"] = $foreign.toAssocArray;
  exports["spliceSTArray"] = $foreign.spliceSTArray;
  exports["pushAllSTArray"] = $foreign.pushAllSTArray;
  exports["pokeSTArray"] = $foreign.pokeSTArray;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["runSTArray"] = $foreign.runSTArray;;
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.Unsafe

  exports.unsafeIndex = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];     
  var tail = function (xs) {
      return Data_Array.slice(1)(Data_Array.length(xs))(xs);
  };
  var last = function (xs) {
      return $foreign.unsafeIndex(xs)(Data_Array.length(xs) - 1);
  };
  var init = function (xs) {
      return Data_Array.slice(0)(Data_Array.length(xs) - 1)(xs);
  };
  var head = function (xs) {
      return $foreign.unsafeIndex(xs)(0);
  };
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["head"] = head;
  exports["unsafeIndex"] = $foreign.unsafeIndex;;
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Clown = (function () {
      function Clown(value0) {
          this.value0 = value0;
      };
      Clown.create = function (value0) {
          return new Clown(value0);
      };
      return Clown;
  })();
  var runClown = function (v) {
      return v.value0;
  };
  var clownFunctor = new Prelude.Functor(function (v) {
      return function ($15) {
          return Clown.create(runClown($15));
      };
  });
  var clownBifunctor = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (v) {
              return function ($16) {
                  return Clown.create(Prelude.map(dictFunctor)(f)(runClown($16)));
              };
          };
      });
  };
  var clownBiapply = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return clownBifunctor(dictApply["__superclass_Prelude.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return new Clown(Prelude["<*>"](dictApply)(v.value0)(v1.value0));
          };
      });
  };
  var clownBiapplicative = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return clownBiapply(dictApplicative["__superclass_Prelude.Apply_0"]());
      }, function (a) {
          return function (v) {
              return new Clown(Prelude.pure(dictApplicative)(a));
          };
      });
  };
  exports["Clown"] = Clown;
  exports["runClown"] = runClown;
  exports["clownBifunctor"] = clownBifunctor;
  exports["clownFunctor"] = clownFunctor;
  exports["clownBiapply"] = clownBiapply;
  exports["clownBiapplicative"] = clownBiapplicative;;
 
})(PS["Data.Bifunctor.Clown"] = PS["Data.Bifunctor.Clown"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Flip = (function () {
      function Flip(value0) {
          this.value0 = value0;
      };
      Flip.create = function (value0) {
          return new Flip(value0);
      };
      return Flip;
  })();
  var runFlip = function (v) {
      return v.value0;
  };
  var flipFunctor = function (dictBifunctor) {
      return new Prelude.Functor(function (f) {
          return function ($13) {
              return Flip.create(Data_Bifunctor.lmap(dictBifunctor)(f)(runFlip($13)));
          };
      });
  };
  var flipBifunctor = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function ($14) {
                  return Flip.create(Data_Bifunctor.bimap(dictBifunctor)(g)(f)(runFlip($14)));
              };
          };
      });
  };
  var flipBiapply = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return flipBifunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return new Flip(Control_Biapply["<<*>>"](dictBiapply)(v.value0)(v1.value0));
          };
      });
  };
  var flipBiapplicative = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return flipBiapply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return function (b) {
              return new Flip(Control_Biapplicative.bipure(dictBiapplicative)(b)(a));
          };
      });
  };
  exports["Flip"] = Flip;
  exports["runFlip"] = runFlip;
  exports["flipBifunctor"] = flipBifunctor;
  exports["flipFunctor"] = flipFunctor;
  exports["flipBiapply"] = flipBiapply;
  exports["flipBiapplicative"] = flipBiapplicative;;
 
})(PS["Data.Bifunctor.Flip"] = PS["Data.Bifunctor.Flip"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Join = (function () {
      function Join(value0) {
          this.value0 = value0;
      };
      Join.create = function (value0) {
          return new Join(value0);
      };
      return Join;
  })();
  var runJoin = function (v) {
      return v.value0;
  };
  var joinFunctor = function (dictBifunctor) {
      return new Prelude.Functor(function (f) {
          return Prelude["<$>"](Prelude.functorFn)(Join.create)(function ($12) {
              return Data_Bifunctor.bimap(dictBifunctor)(f)(f)(runJoin($12));
          });
      });
  };
  var joinApply = function (dictBiapply) {
      return new Prelude.Apply(function () {
          return joinFunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return new Join(Control_Biapply["<<*>>"](dictBiapply)(v.value0)(v1.value0));
          };
      });
  };
  var joinApplicative = function (dictBiapplicative) {
      return new Prelude.Applicative(function () {
          return joinApply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return new Join(Control_Biapplicative.bipure(dictBiapplicative)(a)(a));
      });
  };
  exports["Join"] = Join;
  exports["runJoin"] = runJoin;
  exports["joinFunctor"] = joinFunctor;
  exports["joinApply"] = joinApply;
  exports["joinApplicative"] = joinApplicative;;
 
})(PS["Data.Bifunctor.Join"] = PS["Data.Bifunctor.Join"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Joker = (function () {
      function Joker(value0) {
          this.value0 = value0;
      };
      Joker.create = function (value0) {
          return new Joker(value0);
      };
      return Joker;
  })();
  var runJoker = function (v) {
      return v.value0;
  };
  var jokerFunctor = function (dictFunctor) {
      return new Prelude.Functor(function (g) {
          return function ($15) {
              return Joker.create(Prelude.map(dictFunctor)(g)(runJoker($15)));
          };
      });
  };
  var jokerBifunctor = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (v) {
          return function (g) {
              return function ($16) {
                  return Joker.create(Prelude.map(dictFunctor)(g)(runJoker($16)));
              };
          };
      });
  };
  var jokerBiapply = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return jokerBifunctor(dictApply["__superclass_Prelude.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return new Joker(Prelude["<*>"](dictApply)(v.value0)(v1.value0));
          };
      });
  };
  var jokerBiapplicative = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return jokerBiapply(dictApplicative["__superclass_Prelude.Apply_0"]());
      }, function (v) {
          return function (b) {
              return new Joker(Prelude.pure(dictApplicative)(b));
          };
      });
  };
  exports["Joker"] = Joker;
  exports["runJoker"] = runJoker;
  exports["jokerBifunctor"] = jokerBifunctor;
  exports["jokerFunctor"] = jokerFunctor;
  exports["jokerBiapply"] = jokerBiapply;
  exports["jokerBiapplicative"] = jokerBiapplicative;;
 
})(PS["Data.Bifunctor.Joker"] = PS["Data.Bifunctor.Joker"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Pair = (function () {
      function Pair(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Pair.create = function (value0) {
          return function (value1) {
              return new Pair(value0, value1);
          };
      };
      return Pair;
  })();
  var productBifunctor = function (dictBifunctor) {
      return function (dictBifunctor1) {
          return new Data_Bifunctor.Bifunctor(function (f) {
              return function (g) {
                  return function (v) {
                      return new Pair(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                  };
              };
          });
      };
  };
  var productBiapply = function (dictBiapply) {
      return function (dictBiapply1) {
          return new Control_Biapply.Biapply(function () {
              return productBifunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(dictBiapply1["__superclass_Data.Bifunctor.Bifunctor_0"]());
          }, function (v) {
              return function (v1) {
                  return new Pair(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var productBiapplicative = function (dictBiapplicative) {
      return function (dictBiapplicative1) {
          return new Control_Biapplicative.Biapplicative(function () {
              return productBiapply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]())(dictBiapplicative1["__superclass_Control.Biapply.Biapply_0"]());
          }, function (a) {
              return function (b) {
                  return new Pair(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
              };
          });
      };
  };
  exports["Pair"] = Pair;
  exports["productBifunctor"] = productBifunctor;
  exports["productBiapply"] = productBiapply;
  exports["productBiapplicative"] = productBiapplicative;;
 
})(PS["Data.Bifunctor.Product"] = PS["Data.Bifunctor.Product"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Wrap = (function () {
      function Wrap(value0) {
          this.value0 = value0;
      };
      Wrap.create = function (value0) {
          return new Wrap(value0);
      };
      return Wrap;
  })();
  var unwrap = function (v) {
      return v.value0;
  };
  var wrapBifunctor = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function ($13) {
                  return Wrap.create(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(unwrap($13)));
              };
          };
      });
  };
  var wrapBiapply = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return wrapBifunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return new Wrap(Control_Biapply["<<*>>"](dictBiapply)(v.value0)(v1.value0));
          };
      });
  };
  var wrapBiapplicative = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return wrapBiapply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return function (b) {
              return new Wrap(Control_Biapplicative.bipure(dictBiapplicative)(a)(b));
          };
      });
  };
  var wrapFunctor = function (dictBifunctor) {
      return new Prelude.Functor(function (f) {
          return function ($14) {
              return Wrap.create(Data_Bifunctor.rmap(dictBifunctor)(f)(unwrap($14)));
          };
      });
  };
  exports["Wrap"] = Wrap;
  exports["unwrap"] = unwrap;
  exports["wrapBifunctor"] = wrapBifunctor;
  exports["wrapFunctor"] = wrapFunctor;
  exports["wrapBiapply"] = wrapBiapply;
  exports["wrapBiapplicative"] = wrapBiapplicative;;
 
})(PS["Data.Bifunctor.Wrap"] = PS["Data.Bifunctor.Wrap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Function

  exports.mkFn0 = function (fn) {
    return function () {
      return fn({});
    };
  };

  exports.mkFn1 = function (fn) {
    return function (a) {
      return fn(a);
    };
  };

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };

  exports.mkFn3 = function (fn) {
    /* jshint maxparams: 3 */
    return function (a, b, c) {
      return fn(a)(b)(c);
    };
  };

  exports.mkFn4 = function (fn) {
    /* jshint maxparams: 4 */
    return function (a, b, c, d) {
      return fn(a)(b)(c)(d);
    };
  };

  exports.mkFn5 = function (fn) {
    /* jshint maxparams: 5 */
    return function (a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e);
    };
  };

  exports.mkFn6 = function (fn) {
    /* jshint maxparams: 6 */
    return function (a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f);
    };
  };

  exports.mkFn7 = function (fn) {
    /* jshint maxparams: 7 */
    return function (a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g);
    };
  };

  exports.mkFn8 = function (fn) {
    /* jshint maxparams: 8 */
    return function (a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h);
    };
  };

  exports.mkFn9 = function (fn) {
    /* jshint maxparams: 9 */
    return function (a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
    };
  };

  exports.mkFn10 = function (fn) {
    /* jshint maxparams: 10 */
    return function (a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
    };
  };

  exports.runFn0 = function (fn) {
    return fn();
  };

  exports.runFn1 = function (fn) {
    return function (a) {
      return fn(a);
    };
  };

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  exports.runFn5 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };

  exports.runFn6 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return fn(a, b, c, d, e, f);
              };
            };
          };
        };
      };
    };
  };

  exports.runFn7 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return fn(a, b, c, d, e, f, g);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn8 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return fn(a, b, c, d, e, f, g, h);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn9 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return fn(a, b, c, d, e, f, g, h, i);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn10 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return function (j) {
                        return fn(a, b, c, d, e, f, g, h, i, j);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];     
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  exports["on"] = on;
  exports["runFn10"] = $foreign.runFn10;
  exports["runFn9"] = $foreign.runFn9;
  exports["runFn8"] = $foreign.runFn8;
  exports["runFn7"] = $foreign.runFn7;
  exports["runFn6"] = $foreign.runFn6;
  exports["runFn5"] = $foreign.runFn5;
  exports["runFn4"] = $foreign.runFn4;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn1"] = $foreign.runFn1;
  exports["runFn0"] = $foreign.runFn0;
  exports["mkFn10"] = $foreign.mkFn10;
  exports["mkFn9"] = $foreign.mkFn9;
  exports["mkFn8"] = $foreign.mkFn8;
  exports["mkFn7"] = $foreign.mkFn7;
  exports["mkFn6"] = $foreign.mkFn6;
  exports["mkFn5"] = $foreign.mkFn5;
  exports["mkFn4"] = $foreign.mkFn4;
  exports["mkFn3"] = $foreign.mkFn3;
  exports["mkFn2"] = $foreign.mkFn2;
  exports["mkFn1"] = $foreign.mkFn1;
  exports["mkFn0"] = $foreign.mkFn0;;
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $less$dollar = function (dictFunctor) {
      return function (x) {
          return function (f) {
              return Prelude["<$>"](dictFunctor)(Prelude["const"](x))(f);
          };
      };
  };
  var $dollar$greater = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return Prelude["<$>"](dictFunctor)(Prelude["const"](x))(f);
          };
      };
  };
  exports["$>"] = $dollar$greater;
  exports["<$"] = $less$dollar;;
 
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringImpl = function (just) {
    return function (nothing) {
      return function (s) {
        /* jshint bitwise: false */
        var i = parseFloat(s);
        return (i | 0) === i ? just(i) : nothing;
      };
    };
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int.Bits

  exports.andImpl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 & n2;
    };
  };

  exports.orImpl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 | n2;
    };
  };

  exports.xorImpl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };

  exports.shl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 << n2;
    };
  };

  exports.shr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >> n2;
    };
  };

  exports.zshr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >>> n2;
    };
  };

  exports.complement = function (n) {
    /* jshint bitwise: false */
    return ~n;
  };
 
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int.Bits"]; 
  var $dot$bar$dot = $foreign.orImpl;
  var $dot$up$dot = $foreign.xorImpl;
  var $dot$amp$dot = $foreign.andImpl;
  exports[".^."] = $dot$up$dot;
  exports[".|."] = $dot$bar$dot;
  exports[".&."] = $dot$amp$dot;
  exports["complement"] = $foreign.complement;
  exports["zshr"] = $foreign.zshr;
  exports["shr"] = $foreign.shr;
  exports["shl"] = $foreign.shl;;
 
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.acos = Math.acos;

  exports.asin = Math.asin;

  exports.atan = Math.atan;

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };

  exports.ceil = Math.ceil;

  exports.cos = Math.cos;

  exports.exp = Math.exp;

  exports.floor = Math.floor;

  exports.log = Math.log;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;

  exports.tan = Math.tan;

  exports.e = Math.E;

  exports.ln2 = Math.LN2;

  exports.ln10 = Math.LN10;

  exports.log2e = Math.LOG2E;

  exports.log10e = Math.LOG10E;

  exports.pi = Math.PI;

  exports.sqrt1_2 = Math.SQRT1_2;

  exports.sqrt2 = Math.SQRT2;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Math"];
  exports["sqrt2"] = $foreign.sqrt2;
  exports["sqrt1_2"] = $foreign.sqrt1_2;
  exports["pi"] = $foreign.pi;
  exports["log10e"] = $foreign.log10e;
  exports["log2e"] = $foreign.log2e;
  exports["ln10"] = $foreign.ln10;
  exports["ln2"] = $foreign.ln2;
  exports["e"] = $foreign.e;
  exports["%"] = $foreign["%"];
  exports["tan"] = $foreign.tan;
  exports["sqrt"] = $foreign.sqrt;
  exports["sin"] = $foreign.sin;
  exports["round"] = $foreign.round;
  exports["pow"] = $foreign.pow;
  exports["min"] = $foreign.min;
  exports["max"] = $foreign.max;
  exports["log"] = $foreign.log;
  exports["floor"] = $foreign.floor;
  exports["exp"] = $foreign.exp;
  exports["cos"] = $foreign.cos;
  exports["ceil"] = $foreign.ceil;
  exports["atan2"] = $foreign.atan2;
  exports["atan"] = $foreign.atan;
  exports["asin"] = $foreign.asin;
  exports["acos"] = $foreign.acos;
  exports["abs"] = $foreign.abs;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];     
  var odd = function (x) {
      return (x & 1) !== 0;
  };
  var fromString = $foreign.fromStringImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
  };
  var round = function ($1) {
      return unsafeClamp($$Math.round($1));
  };
  var floor = function ($2) {
      return unsafeClamp($$Math.floor($2));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };
  var ceil = function ($3) {
      return unsafeClamp($$Math.ceil($3));
  };
  exports["odd"] = odd;
  exports["even"] = even;
  exports["fromString"] = fromString;
  exports["round"] = round;
  exports["floor"] = floor;
  exports["ceil"] = ceil;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Lazy

  exports.defer = function () {

    function Defer (thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      delete this.thunk;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
 
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Lazy = PS["Control.Lazy"];     
  var showLazy = function (dictShow) {
      return new Prelude.Show(function (x) {
          return "Lazy " + Prelude.show(dictShow)($foreign.force(x));
      });
  };
  var semiringLazy = function (dictSemiring) {
      return new Prelude.Semiring(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["+"](dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["*"](dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, $foreign.defer(function (v) {
          return Prelude.one(dictSemiring);
      }), $foreign.defer(function (v) {
          return Prelude.zero(dictSemiring);
      }));
  };
  var semigroupLazy = function (dictSemigroup) {
      return new Prelude.Semigroup(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["<>"](dictSemigroup)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var ringLazy = function (dictRing) {
      return new Prelude.Ring(function () {
          return semiringLazy(dictRing["__superclass_Prelude.Semiring_0"]());
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["-"](dictRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var monoidLazy = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupLazy(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, $foreign.defer(function (v) {
          return Data_Monoid.mempty(dictMonoid);
      }));
  };
  var moduloSemiringLazy = function (dictModuloSemiring) {
      return new Prelude.ModuloSemiring(function () {
          return semiringLazy(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["/"](dictModuloSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude.mod(dictModuloSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var lazyLazy = new Control_Lazy.Lazy(function (f) {
      return $foreign.defer(function (v) {
          return $foreign.force(f(Prelude.unit));
      });
  });
  var functorLazy = new Prelude.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var extendLazy = new Control_Extend.Extend(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return f(x);
          });
      };
  });
  var eqLazy = function (dictEq) {
      return new Prelude.Eq(function (x) {
          return function (y) {
              return Prelude["=="](dictEq)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var ordLazy = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqLazy(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (x) {
          return function (y) {
              return Prelude.compare(dictOrd)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var divisionRingLazy = function (dictDivisionRing) {
      return new Prelude.DivisionRing(function () {
          return moduloSemiringLazy(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
      }, function () {
          return ringLazy(dictDivisionRing["__superclass_Prelude.Ring_0"]());
      });
  };
  var numLazy = function (dictNum) {
      return new Prelude.Num(function () {
          return divisionRingLazy(dictNum["__superclass_Prelude.DivisionRing_0"]());
      });
  };
  var comonadLazy = new Control_Comonad.Comonad(function () {
      return extendLazy;
  }, $foreign.force);
  var boundedLazy = function (dictBounded) {
      return new Prelude.Bounded($foreign.defer(function (v) {
          return Prelude.bottom(dictBounded);
      }), $foreign.defer(function (v) {
          return Prelude.top(dictBounded);
      }));
  };
  var boundedOrdLazy = function (dictBoundedOrd) {
      return new Prelude.BoundedOrd(function () {
          return boundedLazy(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
      }, function () {
          return ordLazy(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
      });
  };
  var applyLazy = new Prelude.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Prelude.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  var booleanAlgebraLazy = function (dictBooleanAlgebra) {
      return new Prelude.BooleanAlgebra(function () {
          return boundedLazy(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (a) {
          return function (b) {
              return Prelude["<*>"](applyLazy)(Prelude["<$>"](functorLazy)(Prelude.conj(dictBooleanAlgebra))(a))(b);
          };
      }, function (a) {
          return function (b) {
              return Prelude["<*>"](applyLazy)(Prelude["<$>"](functorLazy)(Prelude.disj(dictBooleanAlgebra))(a))(b);
          };
      }, function (a) {
          return Prelude["<$>"](functorLazy)(Prelude.not(dictBooleanAlgebra))(a);
      });
  };
  var applicativeLazy = new Prelude.Applicative(function () {
      return applyLazy;
  }, function (a) {
      return $foreign.defer(function (v) {
          return a;
      });
  });
  var monadLazy = new Prelude.Monad(function () {
      return applicativeLazy;
  }, function () {
      return bindLazy;
  });
  exports["semiringLazy"] = semiringLazy;
  exports["ringLazy"] = ringLazy;
  exports["moduloSemiringLazy"] = moduloSemiringLazy;
  exports["divisionRingLazy"] = divisionRingLazy;
  exports["numLazy"] = numLazy;
  exports["eqLazy"] = eqLazy;
  exports["ordLazy"] = ordLazy;
  exports["boundedLazy"] = boundedLazy;
  exports["boundedOrdLazy"] = boundedOrdLazy;
  exports["semigroupLazy"] = semigroupLazy;
  exports["monoidLazy"] = monoidLazy;
  exports["booleanAlgebraLazy"] = booleanAlgebraLazy;
  exports["functorLazy"] = functorLazy;
  exports["applyLazy"] = applyLazy;
  exports["applicativeLazy"] = applicativeLazy;
  exports["bindLazy"] = bindLazy;
  exports["monadLazy"] = monadLazy;
  exports["extendLazy"] = extendLazy;
  exports["comonadLazy"] = comonadLazy;
  exports["showLazy"] = showLazy;
  exports["lazyLazy"] = lazyLazy;
  exports["force"] = $foreign.force;
  exports["defer"] = $foreign.defer;;
 
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];     
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function (f) {
      return function (b) {
          return Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(function __do() {
              var v = Data_Array_ST.emptySTArray();
              var v1 = Control_Monad_ST.newSTRef(b)();
              (function () {
                  while (!(function __do() {
                      var v2 = Control_Monad_ST.readSTRef(v1)();
                      return (function () {
                          var $12 = f(v2);
                          if ($12 instanceof Data_Maybe.Nothing) {
                              return Prelude["return"](Control_Monad_Eff.applicativeEff)(true);
                          };
                          if ($12 instanceof Data_Maybe.Just) {
                              return function __do() {
                                  Data_Array_ST.pushSTArray(v)($12.value0.value0)();
                                  Control_Monad_ST.writeSTRef(v1)($12.value0.value1)();
                                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(false)();
                              };
                          };
                          throw new Error("Failed pattern match at Data.Unfoldable line 29, column 1 - line 49, column 1: " + [ $12.constructor.name ]);
                      })()();
                  })()) {

                  };
                  return {};
              })();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          }));
      };
  });
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $16 = i <= 0;
                  if ($16) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (!$16) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1));
                  };
                  throw new Error("Failed pattern match at Data.Unfoldable line 52, column 5 - line 53, column 5: " + [ $16.constructor.name ]);
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  var singleton = function (dictUnfoldable) {
      return replicate(dictUnfoldable)(1);
  };
  var none = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(Prelude["const"](Data_Maybe.Nothing.value))(Prelude.unit);
  };
  exports["Unfoldable"] = Unfoldable;
  exports["singleton"] = singleton;
  exports["none"] = none;
  exports["replicateA"] = replicateA;
  exports["replicate"] = replicate;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;;
 
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var updateAt = function (v) {
      return function (x) {
          return function (v1) {
              if (v === 0 && v1 instanceof Cons) {
                  return new Data_Maybe.Just(new Cons(x, v1.value1));
              };
              if (v1 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(updateAt(v - 1)(x)(v1.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 270, column 1 - line 271, column 1: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 251, column 1 - line 252, column 1: " + [ v.constructor.name ]);
  };
  var span = function (p) {
      return function (v) {
          if (v instanceof Cons && p(v.value0)) {
              var $114 = span(p)(v.value1);
              return {
                  init: new Cons(v.value0, $114.init), 
                  rest: $114.rest
              };
          };
          return {
              init: Nil.value, 
              rest: v
          };
      };
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Cons && v1 instanceof Cons) {
                  if (Prelude["=="](Prelude.eqOrdering)(cmp(v.value0)(v1.value0))(Prelude.GT.value)) {
                      return new Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Prelude.otherwise) {
                      return new Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Nil) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List line 444, column 1 - line 445, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              return new Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && v.value1 instanceof Nil) {
                  return v.value0;
              };
              var __tco_v = mergePairs(v);
              v = __tco_v;
              continue tco;
          };
      };
      var sequences = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              if (Prelude["=="](Prelude.eqOrdering)(cmp(v.value0)(v.value1.value0))(Prelude.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Prelude.otherwise) {
                  return ascending(v.value1.value0)(Cons.create(v.value0))(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function (__copy_a) {
          return function (__copy_as) {
              return function (__copy_v) {
                  var a = __copy_a;
                  var as = __copy_as;
                  var v = __copy_v;
                  tco: while (true) {
                      var a1 = a;
                      var as1 = as;
                      if (v instanceof Cons && Prelude["=="](Prelude.eqOrdering)(cmp(a1)(v.value0))(Prelude.GT.value)) {
                          var __tco_a = v.value0;
                          var __tco_as = new Cons(a1, as1);
                          var __tco_v = v.value1;
                          a = __tco_a;
                          as = __tco_as;
                          v = __tco_v;
                          continue tco;
                      };
                      return new Cons(new Cons(a, as), sequences(v));
                  };
              };
          };
      };
      var ascending = function (a) {
          return function (as) {
              return function (v) {
                  if (v instanceof Cons && Prelude["/="](Prelude.eqOrdering)(cmp(a)(v.value0))(Prelude.GT.value)) {
                      return ascending(v.value0)(function (ys) {
                          return as(new Cons(a, ys));
                      })(v.value1);
                  };
                  return new Cons(as(singleton(a)), sequences(v));
              };
          };
      };
      return function ($345) {
          return mergeAll(sequences($345));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Prelude.compare(dictOrd))(xs);
      };
  };
  var showList = function (dictShow) {
      return new Prelude.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          if (v instanceof Cons) {
              return "Cons (" + (Prelude.show(dictShow)(v.value0) + (") (" + (Prelude.show(showList(dictShow))(v.value1) + ")")));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      });
  };
  var semigroupList = new Prelude.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Nil) {
                      return acc1;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 1 - line 369, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var snoc = function (xs) {
      return function (x) {
          return reverse(new Cons(x, reverse(xs)));
      };
  };
  var take = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var acc = __copy_acc;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      var acc1 = acc;
                      if (v === 0) {
                          return reverse(acc1);
                      };
                      var acc1 = acc;
                      if (v1 instanceof Nil) {
                          return reverse(acc1);
                      };
                      if (v1 instanceof Cons) {
                          var __tco_acc = new Cons(v1.value0, acc);
                          var __tco_v = v - 1;
                          var __tco_v1 = v1.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 490, column 1 - line 491, column 1: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go(Nil.value);
  })();
  var takeWhile = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Cons && p(v.value0)) {
                      var __tco_acc = new Cons(v.value0, acc1);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  return reverse(acc);
              };
          };
      };
      return go(Nil.value);
  };
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function (__copy_source) {
              return function (__copy_memo) {
                  var source = __copy_source;
                  var memo = __copy_memo;
                  tco: while (true) {
                      var $168 = f(source);
                      if ($168 instanceof Data_Maybe.Nothing) {
                          return reverse(memo);
                      };
                      if ($168 instanceof Data_Maybe.Just) {
                          var __tco_memo = new Cons($168.value0.value0, memo);
                          source = $168.value0.value1;
                          memo = __tco_memo;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 748, column 1 - line 755, column 1: " + [ $168.constructor.name ]);
                  };
              };
          };
          return go(b)(Nil.value);
      };
  });
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_acc) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (v instanceof Nil) {
                                  return acc;
                              };
                              if (v1 instanceof Nil) {
                                  return acc;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_acc = new Cons(f(v.value0)(v1.value0), acc);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 654, column 1 - line 655, column 1: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Nil.value);
              };
              if (Prelude.otherwise) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(replicateM(dictMonad)(n - 1)(m))(function (v1) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Cons(v, v1));
                      });
                  });
              };
              throw new Error("Failed pattern match: " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  var replicate = function (n) {
      return function (value) {
          var go = function (__copy_n1) {
              return function (__copy_rest) {
                  var n1 = __copy_n1;
                  var rest = __copy_rest;
                  tco: while (true) {
                      if (n1 <= 0) {
                          return rest;
                      };
                      if (Prelude.otherwise) {
                          var __tco_n1 = n1 - 1;
                          var __tco_rest = new Cons(value, rest);
                          n1 = __tco_n1;
                          rest = __tco_rest;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 148, column 1 - line 149, column 1: " + [ n1.constructor.name, rest.constructor.name ]);
                  };
              };
          };
          return go(n)(Nil.value);
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $191 = start > end;
                  if ($191) {
                      return 1;
                  };
                  if (!$191) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ $191.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var $$null = function (v) {
      if (v instanceof Nil) {
          return true;
      };
      return false;
  };
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var mapMaybe = function (f) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Nil) {
                      return reverse(acc1);
                  };
                  if (v instanceof Cons) {
                      var $195 = f(v.value0);
                      if ($195 instanceof Data_Maybe.Nothing) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if ($195 instanceof Data_Maybe.Just) {
                          var __tco_acc = new Cons($195.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 420, column 1 - line 421, column 1: " + [ $195.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List line 420, column 1 - line 421, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())(Nil.value));
          };
      };
  };
  var last = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v instanceof Cons && v.value1 instanceof Nil) {
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Cons) {
              var __tco_v = v.value1;
              v = __tco_v;
              continue tco;
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var insertBy = function (cmp) {
      return function (x) {
          return function (v) {
              if (v instanceof Nil) {
                  return new Cons(x, Nil.value);
              };
              if (v instanceof Cons) {
                  var $208 = cmp(x)(v.value0);
                  if ($208 instanceof Prelude.GT) {
                      return new Cons(v.value0, insertBy(cmp)(x)(v.value1));
                  };
                  return new Cons(x, v);
              };
              throw new Error("Failed pattern match: " + [ cmp.constructor.name, x.constructor.name, v.constructor.name ]);
          };
      };
  };
  var insertAt = function (v) {
      return function (x) {
          return function (v1) {
              if (v === 0) {
                  return new Data_Maybe.Just(new Cons(x, v1));
              };
              if (v1 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(insertAt(v - 1)(x)(v1.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Prelude.compare(dictOrd));
  };
  var init = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      var go = function (__copy_v1) {
          return function (__copy_acc) {
              var v1 = __copy_v1;
              var acc = __copy_acc;
              tco: while (true) {
                  if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                      return acc;
                  };
                  if (v1 instanceof Cons) {
                      var __tco_v1 = v1.value1;
                      var __tco_acc = new Cons(v1.value0, acc);
                      v1 = __tco_v1;
                      acc = __tco_acc;
                      continue tco;
                  };
                  return acc;
              };
          };
      };
      return Data_Maybe.Just.create(reverse(go(v)(Nil.value)));
  };
  var index = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v instanceof Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Cons && v1 === 0) {
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Cons) {
                  var __tco_v = v.value1;
                  var __tco_v1 = v1 - 1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var $bang$bang = index;
  var head = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 236, column 1 - line 237, column 1: " + [ v.constructor.name ]);
  };
  var groupBy = function (eq) {
      return function (v) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              var $234 = span(eq(v.value0))(v.value1);
              return new Cons(new Cons(v.value0, $234.init), groupBy(eq)($234.rest));
          };
          throw new Error("Failed pattern match: " + [ eq.constructor.name, v.constructor.name ]);
      };
  };
  var group = function (dictEq) {
      return groupBy(Prelude["=="](dictEq));
  };
  var group$prime = function (dictOrd) {
      return function ($346) {
          return group(dictOrd["__superclass_Prelude.Eq_0"]())(sort(dictOrd)($346));
      };
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 731, column 1 - line 738, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromList = function (dictUnfoldable) {
      return toUnfoldable(dictUnfoldable);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($347) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($347));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_o) {
          return function (__copy_b) {
              return function (__copy_v) {
                  var o = __copy_o;
                  var b = __copy_b;
                  var v = __copy_v;
                  tco: while (true) {
                      var b1 = b;
                      if (v instanceof Nil) {
                          return b1;
                      };
                      if (v instanceof Cons) {
                          var __tco_o = o;
                          var __tco_b = o(b)(v.value0);
                          var __tco_v = v.value1;
                          o = __tco_o;
                          b = __tco_b;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (o) {
      return function (b) {
          return function (v) {
              if (v instanceof Nil) {
                  return b;
              };
              if (v instanceof Cons) {
                  return o(v.value0)(Data_Foldable.foldr(foldableList)(o)(b)(v.value1));
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, v.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Nil) {
              return Prelude.pure(dictApplicative)(Nil.value);
          };
          if (v instanceof Cons) {
              return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Nil) {
                  return Prelude.pure(dictApplicative)(Nil.value);
              };
              if (v instanceof Cons) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(v.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(f)(v.value1));
              };
              throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var unzip = Data_Foldable.foldr(foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(new Cons(v.value0, v1.value0), new Cons(v.value1, v1.value1));
      };
  })(new Data_Tuple.Tuple(Nil.value, Nil.value));
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return function (v) {
                  if (v instanceof Nil) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(a);
                  };
                  if (v instanceof Cons) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(f(a)(v.value0))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(v.value1);
                      });
                  };
                  throw new Error("Failed pattern match: " + [ f.constructor.name, a.constructor.name, v.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function (__copy_n) {
          return function (__copy_v) {
              var n = __copy_n;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Cons) {
                      if (fn(v.value0)) {
                          return new Data_Maybe.Just(n);
                      };
                      if (Prelude.otherwise) {
                          var __tco_n = n + 1 | 0;
                          var __tco_v = v.value1;
                          n = __tco_n;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  if (v instanceof Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 301, column 1 - line 302, column 1: " + [ n.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(0);
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude["-"](Prelude.ringInt)(length(xs) - 1))(findIndex(fn)(reverse(xs)));
      };
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return function (v) {
              if (v instanceof Nil) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Nil.value);
              };
              if (v instanceof Cons) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(p(v.value0))(function (v1) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(filterM(dictMonad)(p)(v.value1))(function (v2) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                              if (v1) {
                                  return new Cons(v.value0, v2);
                              };
                              if (!v1) {
                                  return v2;
                              };
                              throw new Error("Failed pattern match: " + [ v1.constructor.name ]);
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match: " + [ p.constructor.name, v.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Nil) {
                      return reverse(acc1);
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Prelude.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 391, column 1 - line 392, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var intersectBy = function (eq) {
      return function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              return filter(function (x) {
                  return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(v1);
              })(v);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Prelude["=="](dictEq));
  };
  var nubBy = function ($eq$eq) {
      return function (v) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, nubBy($eq$eq)(filter(function (y) {
                  return !$eq$eq(v.value0)(y);
              })(v.value1)));
          };
          throw new Error("Failed pattern match: " + [ $eq$eq.constructor.name, v.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Prelude.eq(dictEq));
  };
  var eqList = function (dictEq) {
      return new Prelude.Eq(function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_v2) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var v2 = __copy_v2;
                          tco: while (true) {
                              if (!v2) {
                                  return false;
                              };
                              if (v instanceof Nil && v1 instanceof Nil) {
                                  return v2;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_v2 = v2 && Prelude["=="](dictEq)(v1.value0)(v.value0);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  v2 = __tco_v2;
                                  continue tco;
                              };
                              return false;
                          };
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      });
  };
  var ordList = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqList(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return Prelude.EQ.value;
                          };
                          if (v instanceof Nil) {
                              return Prelude.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              return Prelude.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var $303 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                              if ($303 instanceof Prelude.EQ) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              return $303;
                          };
                          throw new Error("Failed pattern match at Data.List line 713, column 1 - line 724, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
              return go(xs)(ys);
          };
      });
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && p(v.value0)) {
                  var __tco_v = v.value1;
                  v = __tco_v;
                  continue tco;
              };
              return v;
          };
      };
      return go;
  };
  var drop = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v === 0) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v1 instanceof Cons) {
                  var __tco_v = v - 1;
                  var __tco_v1 = v1.value1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start)(drop(start)(xs));
          };
      };
  };
  var deleteBy = function ($eq$eq) {
      return function (x) {
          return function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons && $eq$eq(x)(v.value0)) {
                  return v.value1;
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, deleteBy($eq$eq)(x)(v.value1));
              };
              throw new Error("Failed pattern match: " + [ $eq$eq.constructor.name, x.constructor.name, v.constructor.name ]);
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Prelude["=="](dictEq));
  };
  var deleteAt = function (v) {
      return function (v1) {
          if (v === 0 && v1 instanceof Cons) {
              return new Data_Maybe.Just(v1.value1);
          };
          if (v1 instanceof Cons) {
              return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(deleteAt(v - 1)(v1.value1));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Prelude["=="](dictEq));
  };
  var $bslash$bslash = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(dictEq)));
  };
  var concatMap = function (f) {
      return function (v) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(f(v.value0))(concatMap(f)(v.value1));
          };
          throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
      };
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, function (v) {
      return function (xs) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(v.value0)(xs))(Prelude["<*>"](applyList)(v.value1)(xs));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, xs.constructor.name ]);
      };
  });
  var bindList = new Prelude.Bind(function () {
      return applyList;
  }, Prelude.flip(concatMap));
  var concat = function (v) {
      return Prelude[">>="](bindList)(v)(Prelude.id(Prelude.categoryFn));
  };
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  var monadList = new Prelude.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var alterAt = function (v) {
      return function (f) {
          return function (v1) {
              if (v === 0 && v1 instanceof Cons) {
                  return Data_Maybe.Just.create((function () {
                      var $339 = f(v1.value0);
                      if ($339 instanceof Data_Maybe.Nothing) {
                          return v1.value1;
                      };
                      if ($339 instanceof Data_Maybe.Just) {
                          return new Cons($339.value0, v1.value1);
                      };
                      throw new Error("Failed pattern match: " + [ $339.constructor.name ]);
                  })());
              };
              if (v1 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(alterAt(v - 1)(f)(v1.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($348) {
              return Data_Maybe.Just.create(f($348));
          });
      };
  };
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Prelude.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return plusList;
  }, function () {
      return applicativeList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["foldM"] = foldM;
  exports["unzip"] = unzip;
  exports["zip"] = zip;
  exports["zipWithA"] = zipWithA;
  exports["zipWith"] = zipWith;
  exports["intersectBy"] = intersectBy;
  exports["intersect"] = intersect;
  exports["\\\\"] = $bslash$bslash;
  exports["deleteBy"] = deleteBy;
  exports["delete"] = $$delete;
  exports["unionBy"] = unionBy;
  exports["union"] = union;
  exports["nubBy"] = nubBy;
  exports["nub"] = nub;
  exports["groupBy"] = groupBy;
  exports["group'"] = group$prime;
  exports["group"] = group;
  exports["span"] = span;
  exports["dropWhile"] = dropWhile;
  exports["drop"] = drop;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["slice"] = slice;
  exports["sortBy"] = sortBy;
  exports["sort"] = sort;
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["filterM"] = filterM;
  exports["filter"] = filter;
  exports["concatMap"] = concatMap;
  exports["concat"] = concat;
  exports["reverse"] = reverse;
  exports["alterAt"] = alterAt;
  exports["modifyAt"] = modifyAt;
  exports["updateAt"] = updateAt;
  exports["deleteAt"] = deleteAt;
  exports["insertAt"] = insertAt;
  exports["findLastIndex"] = findLastIndex;
  exports["findIndex"] = findIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["elemIndex"] = elemIndex;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports["insertBy"] = insertBy;
  exports["insert"] = insert;
  exports["snoc"] = snoc;
  exports[":"] = $colon;
  exports["length"] = length;
  exports["null"] = $$null;
  exports["many"] = many;
  exports["some"] = some;
  exports["replicateM"] = replicateM;
  exports["replicate"] = replicate;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["ordList"] = ordList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadPlusList"] = monadPlusList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var runList = function (v) {
      return v;
  };
  var step = function ($220) {
      return Data_Lazy.force(runList($220));
  };
  var semigroupList = new Prelude.Semigroup(function (xs) {
      return function (ys) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return step(ys);
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 671, column 5 - line 672, column 5: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  });
  var showList = function (dictShow) {
      return new Prelude.Show(function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return "Nil";
              };
              if (v instanceof Cons) {
                  return "Cons (" + (Prelude.show(dictShow)(v.value0) + (") (" + (go(step(v.value1)) + ")")));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 640, column 1 - line 646, column 1: " + [ v.constructor.name ]);
          };
          return "fromStrict (" + (go(step(xs)) + ")");
      });
  };
  var uncons = function (xs) {
      var $73 = step(xs);
      if ($73 instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if ($73 instanceof Cons) {
          return new Data_Maybe.Just({
              head: $73.value0, 
              tail: $73.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 281, column 1 - line 282, column 1: " + [ $73.constructor.name ]);
  };
  var tail = function (xs) {
      return Prelude["<$>"](Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      })(uncons(xs));
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var take = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v === 0) {
                      return Nil.value;
                  };
                  if (v1 instanceof Nil) {
                      return Nil.value;
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, take(v - 1)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 448, column 3 - line 449, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Cons && p(v.value0)) {
                  return new Cons(v.value0, takeWhile(p)(v.value1));
              };
              return Nil.value;
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var updateAt = function (n) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v === 0 && v1 instanceof Cons) {
                          return new Cons(x, v1.value1);
                      };
                      if (v1 instanceof Cons) {
                          return new Cons(v1.value0, updateAt(v - 1)(x)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 344, column 3 - line 345, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
          };
      };
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      if (v instanceof Nil) {
                          return Nil.value;
                      };
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v instanceof Cons && v1 instanceof Cons) {
                          return new Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 615, column 3 - line 616, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Prelude["<*>"](Data_Lazy.applyLazy)(Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs)))(runList(ys));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var $$null = function ($221) {
      return Data_Maybe.isNothing(uncons($221));
  };
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, nil);
  var mapMaybe = function (f) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      var $97 = f(v.value0);
                      if ($97 instanceof Data_Maybe.Nothing) {
                          var __tco_v = step(v.value1);
                          v = __tco_v;
                          continue tco;
                      };
                      if ($97 instanceof Data_Maybe.Just) {
                          return new Cons($97.value0, mapMaybe(f)(v.value1));
                      };
                      throw new Error("Failed pattern match: " + [ $97.constructor.name ]);
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var length = function (xs) {
      var go = function (v) {
          if (v instanceof Nil) {
              return 0;
          };
          if (v instanceof Cons) {
              return 1 + go(step(v.value1)) | 0;
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 196, column 1 - line 197, column 1: " + [ v.constructor.name ]);
      };
      return go(step(xs));
  };
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($222) {
          return step(f($222));
      }));
  });
  var last = function (xs) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons) {
                  if ($$null(v.value1)) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (Prelude.otherwise) {
                      var __tco_v = step(v.value1);
                      v = __tco_v;
                      continue tco;
                  };
              };
              return Data_Maybe.Nothing.value;
          };
      };
      return go(step(xs));
  };
  var index = function (xs) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Cons && v1 === 0) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Cons) {
                      var __tco_v = step(v.value1);
                      var __tco_v1 = v1 - 1;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 293, column 1 - line 294, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      return go(step(xs));
  };
  var $bang$bang = index;
  var head = function (xs) {
      return Prelude["<$>"](Data_Maybe.functorMaybe)(function (v) {
          return v.head;
      })(uncons(xs));
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(f(v.value0), Prelude["<$>"](functorList)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 680, column 5 - line 681, column 5: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  });
  var fromStep = function ($223) {
      return List(Prelude.pure(Data_Lazy.applicativeLazy)($223));
  };
  var insertBy = function (cmp) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return new Cons(x, nil);
                  };
                  if (v instanceof Cons) {
                      var $117 = cmp(x)(v.value0);
                      if ($117 instanceof Prelude.GT) {
                          return new Cons(v.value0, insertBy(cmp)(x)(v.value1));
                      };
                      return new Cons(x, fromStep(v));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 234, column 3 - line 235, column 3: " + [ v.constructor.name ]);
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Prelude.compare(dictOrd));
  };
  var fromList = function (dictUnfoldable) {
      return toUnfoldable(dictUnfoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v instanceof Cons) {
                      return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(v.value0))(Data_Foldable.foldMap(foldableList)(dictMonoid)(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 699, column 5 - line 700, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  }, function (o) {
      return function (b) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      return Data_Foldable.foldl(foldableList)(o)(o(b)(v.value0))(v.value1);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 693, column 5 - line 694, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  }, function (o) {
      return function (b) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      return o(v.value0)(Data_Foldable.foldr(foldableList)(o)(b)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 687, column 5 - line 688, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  });
  var filter = function (p) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          return new Cons(v.value0, filter(p)(v.value1));
                      };
                      if (Prelude.otherwise) {
                          var __tco_v = step(v.value1);
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return filter(function (x) {
                  return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(ys);
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Prelude["=="](dictEq));
  };
  var nubBy = function (eq) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, nubBy(eq)(filter(function (y) {
                      return !eq(v.value0)(y);
                  })(v.value1)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 542, column 3 - line 543, column 3: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var nub = function (dictEq) {
      return nubBy(Prelude.eq(dictEq));
  };
  var eqList = function (dictEq) {
      return new Prelude.Eq(function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return true;
                          };
                          if (v instanceof Cons && (v1 instanceof Cons && Prelude["=="](dictEq)(v.value0)(v1.value0))) {
                              var __tco_v = step(v.value1);
                              var __tco_v1 = step(v1.value1);
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          return false;
                      };
                  };
              };
              return go(step(xs))(step(ys));
          };
      });
  };
  var ordList = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqList(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return Prelude.EQ.value;
                          };
                          if (v instanceof Nil) {
                              return Prelude.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              return Prelude.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var $143 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                              if ($143 instanceof Prelude.EQ) {
                                  var __tco_v = step(v.value1);
                                  var __tco_v1 = step(v1.value1);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              return $143;
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy line 654, column 1 - line 665, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
              return go(step(xs))(step(ys));
          };
      });
  };
  var dropWhile = function (p) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Cons && p(v.value0)) {
                      var __tco_v = step(v.value1);
                      v = __tco_v;
                      continue tco;
                  };
                  return fromStep(v);
              };
          };
          return go(step(xs));
      };
  };
  var drop = function (n) {
      return function (xs) {
          var go = function (__copy_v) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v === 0) {
                          return v1;
                      };
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v - 1;
                          var __tco_v1 = step(v1.value1);
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 465, column 1 - line 466, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var deleteBy = function (eq) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      if (eq(x)(v.value0)) {
                          return step(v.value1);
                      };
                      if (Prelude.otherwise) {
                          return new Cons(v.value0, deleteBy(eq)(x)(v.value1));
                      };
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 571, column 3 - line 572, column 3: " + [ v.constructor.name ]);
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Prelude["=="](dictEq));
  };
  var deleteAt = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v1 instanceof Nil) {
                      return Nil.value;
                  };
                  if (v === 0 && v1 instanceof Cons) {
                      return step(v1.value1);
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, deleteAt(v - 1)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 330, column 3 - line 331, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Prelude["=="](dictEq));
  };
  var $bslash$bslash = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(dictEq)));
  };
  var cycle = function (xs) {
      return Control_Lazy.fix(lazyList)(function (ys) {
          return Prelude["<>"](semigroupList)(xs)(ys);
      });
  };
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(cons)(nil);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var init = function (xs) {
      var go = function (v) {
          if (v instanceof Cons) {
              if ($$null(v.value1)) {
                  return new Data_Maybe.Just(nil);
              };
              if (Prelude.otherwise) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(cons(v.value0))(go(step(v.value1)));
              };
          };
          return Data_Maybe.Nothing.value;
      };
      return go(step(xs));
  };
  var insertAt = function (v) {
      return function (x) {
          return function (xs) {
              if (v === 0) {
                  return cons(x)(xs);
              };
              var go = function (v1) {
                  if (v1 instanceof Nil) {
                      return new Cons(x, nil);
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, insertAt(v - 1)(x)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 317, column 3 - line 318, column 3: " + [ v1.constructor.name ]);
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var iterate = function (f) {
      return function (x) {
          return Control_Lazy.fix(lazyList)(function (xs) {
              return cons(x)(Prelude["<$>"](functorList)(f)(xs));
          });
      };
  };
  var repeat = function (x) {
      return Control_Lazy.fix(lazyList)(function (xs) {
          return cons(x)(xs);
      });
  };
  var reverse = function (xs) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Nil) {
                      return acc1;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = cons(v.value0)(acc);
                      var __tco_v = step(v.value1);
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 383, column 1 - line 384, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(nil)(step(xs));
  };
  var singleton = function (a) {
      return cons(a)(nil);
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step$prime) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step$prime = __copy_step$prime;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return cons(s)(rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step$prime | 0;
                                      var __tco_e = e;
                                      var __tco_step$prime = step$prime;
                                      var __tco_rest = cons(s)(rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step$prime = __tco_step$prime;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List.Lazy line 164, column 1 - line 165, column 1: " + [ s.constructor.name, e.constructor.name, step$prime.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $184 = start > end;
                  if ($184) {
                      return 1;
                  };
                  if (!$184) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 164, column 1 - line 165, column 1: " + [ $184.constructor.name ]);
              })())(nil);
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 164, column 1 - line 165, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var span = function (p) {
      return function (xs) {
          var $185 = uncons(xs);
          if ($185 instanceof Data_Maybe.Just && p($185.value0.head)) {
              var $186 = span(p)($185.value0.tail);
              return {
                  init: cons($185.value0.head)($186.init), 
                  rest: $186.rest
              };
          };
          return {
              init: nil, 
              rest: xs
          };
      };
  };
  var groupBy = function (eq) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  var $193 = span(eq(v.value0))(v.value1);
                  return new Cons(cons(v.value0)($193.init), groupBy(eq)($193.rest));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 520, column 3 - line 521, column 3: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var group = function (dictEq) {
      return groupBy(Prelude["=="](dictEq));
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Prelude.pure(dictApplicative)(nil);
              };
              if (v instanceof Cons) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 720, column 5 - line 721, column 5: " + [ v.constructor.name ]);
          };
          return go(step(xs));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Prelude.pure(dictApplicative)(nil);
                  };
                  if (v instanceof Cons) {
                      return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(f(v.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 714, column 5 - line 715, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  });
  var $colon = cons;
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return nil;
              };
              if (v instanceof Data_Maybe.Just) {
                  return $colon(v.value0.value0)(Control_Lazy.defer(lazyList)(function (v1) {
                      return go(f(v.value0.value1));
                  }));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 702, column 1 - line 710, column 1: " + [ v.constructor.name ]);
          };
          return go(f(b));
      };
  });
  var concatMap = function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return step(Prelude["<>"](semigroupList)(f(v.value0))(concatMap(f)(v.value1)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 402, column 3 - line 403, column 3: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  var monadList = new Prelude.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var bindList = new Prelude.Bind(function () {
      return applyList;
  }, Prelude.flip(concatMap));
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, Prelude.ap(monadList));
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, singleton);
  var concat = function (v) {
      return Prelude[">>="](bindList)(v)(Prelude.id(Prelude.categoryFn));
  };
  var alterAt = function (n) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v === 0 && v1 instanceof Cons) {
                          var $214 = f(v1.value0);
                          if ($214 instanceof Data_Maybe.Nothing) {
                              return step(v1.value1);
                          };
                          if ($214 instanceof Data_Maybe.Just) {
                              return new Cons($214.value0, v1.value1);
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy line 370, column 3 - line 371, column 3: " + [ $214.constructor.name ]);
                      };
                      if (v1 instanceof Cons) {
                          return new Cons(v1.value0, alterAt(v - 1)(f)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 370, column 3 - line 371, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($224) {
              return Data_Maybe.Just.create(f($224));
          });
      };
  };
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Prelude.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, nil);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return plusList;
  }, function () {
      return applicativeList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["List"] = List;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["zip"] = zip;
  exports["zipWith"] = zipWith;
  exports["intersectBy"] = intersectBy;
  exports["intersect"] = intersect;
  exports["\\\\"] = $bslash$bslash;
  exports["deleteBy"] = deleteBy;
  exports["delete"] = $$delete;
  exports["unionBy"] = unionBy;
  exports["union"] = union;
  exports["nubBy"] = nubBy;
  exports["nub"] = nub;
  exports["groupBy"] = groupBy;
  exports["group"] = group;
  exports["span"] = span;
  exports["dropWhile"] = dropWhile;
  exports["drop"] = drop;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["filter"] = filter;
  exports["concatMap"] = concatMap;
  exports["concat"] = concat;
  exports["reverse"] = reverse;
  exports["alterAt"] = alterAt;
  exports["modifyAt"] = modifyAt;
  exports["updateAt"] = updateAt;
  exports["deleteAt"] = deleteAt;
  exports["insertAt"] = insertAt;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports["insertBy"] = insertBy;
  exports["insert"] = insert;
  exports["cons"] = cons;
  exports[":"] = $colon;
  exports["length"] = length;
  exports["null"] = $$null;
  exports["cycle"] = cycle;
  exports["iterate"] = iterate;
  exports["repeat"] = repeat;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["nil"] = nil;
  exports["step"] = step;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["runList"] = runList;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["ordList"] = ordList;
  exports["lazyList"] = lazyList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadPlusList"] = monadPlusList;;
 
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.List.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.List.Unsafe"] = PS["Data.List.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.List.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];     
  var tail = function (v) {
      if (v instanceof Data_List.Cons) {
          return v.value1;
      };
      if (v instanceof Data_List.Nil) {
          return $foreign.unsafeThrow("Data.List.Unsafe.tail called on empty list");
      };
      throw new Error("Failed pattern match at Data.List.Unsafe line 26, column 1 - line 27, column 1: " + [ v.constructor.name ]);
  };
  var last = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
              return v.value0;
          };
          if (v instanceof Data_List.Cons) {
              var __tco_v = v.value1;
              v = __tco_v;
              continue tco;
          };
          if (v instanceof Data_List.Nil) {
              return $foreign.unsafeThrow("Data.List.Unsafe.last called on empty list");
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      };
  };
  var init = function (v) {
      if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
          return Data_List.Nil.value;
      };
      if (v instanceof Data_List.Cons) {
          return new Data_List.Cons(v.value0, init(v.value1));
      };
      if (v instanceof Data_List.Nil) {
          return $foreign.unsafeThrow("Data.List.Unsafe.init called on empty list");
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var head = function (v) {
      if (v instanceof Data_List.Cons) {
          return v.value0;
      };
      if (v instanceof Data_List.Nil) {
          return $foreign.unsafeThrow("Data.List.Unsafe.head called on empty list");
      };
      throw new Error("Failed pattern match at Data.List.Unsafe line 19, column 1 - line 20, column 1: " + [ v.constructor.name ]);
  };
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["head"] = head;;
 
})(PS["Data.List.Unsafe"] = PS["Data.List.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var ZipList = function (x) {
      return x;
  };
  var showZipList = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "(ZipList " + (Prelude.show(Data_List_Lazy.showList(dictShow))(v) + ")");
      });
  };
  var runZipList = function (v) {
      return v;
  };
  var semigroupZipList = new Prelude.Semigroup(function (z1) {
      return function (z2) {
          return Prelude["++"](Data_List_Lazy.semigroupList)(runZipList(z1))(runZipList(z2));
      };
  });
  var monoidZipList = new Data_Monoid.Monoid(function () {
      return semigroupZipList;
  }, Data_Monoid.mempty(Data_List_Lazy.monoidList));
  var functorZipList = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude.map(Data_List_Lazy.functorList)(f)(v);
      };
  });
  var foldableZipList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldMap(Data_List_Lazy.foldableList)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldl(Data_List_Lazy.foldableList)(f)(b)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldr(Data_List_Lazy.foldableList)(f)(b)(v);
          };
      };
  });
  var traversableZipList = new Data_Traversable.Traversable(function () {
      return foldableZipList;
  }, function () {
      return functorZipList;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(ZipList)(Data_Traversable.sequence(Data_List_Lazy.traversableList)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(ZipList)(Data_Traversable.traverse(Data_List_Lazy.traversableList)(dictApplicative)(f)(v));
          };
      };
  });
  var eqZipList = function (dictEq) {
      return new Prelude.Eq(function (z1) {
          return function (z2) {
              return Prelude.eq(Data_List_Lazy.eqList(dictEq))(runZipList(z1))(runZipList(z2));
          };
      });
  };
  var ordZipList = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqZipList(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (z1) {
          return function (z2) {
              return Prelude.compare(Data_List_Lazy.ordList(dictOrd))(runZipList(z1))(runZipList(z2));
          };
      });
  };
  var applyZipList = new Prelude.Apply(function () {
      return functorZipList;
  }, function (v) {
      return function (v1) {
          return Data_List_Lazy.zipWith(Prelude["$"])(v)(v1);
      };
  });
  var applicativeZipList = new Prelude.Applicative(function () {
      return applyZipList;
  }, function ($33) {
      return ZipList(Data_List_Lazy.repeat($33));
  });
  var altZipList = new Control_Alt.Alt(function () {
      return functorZipList;
  }, Prelude.append(semigroupZipList));
  var plusZipList = new Control_Plus.Plus(function () {
      return altZipList;
  }, Data_Monoid.mempty(monoidZipList));
  var alternativeZipList = new Control_Alternative.Alternative(function () {
      return plusZipList;
  }, function () {
      return applicativeZipList;
  });
  exports["ZipList"] = ZipList;
  exports["runZipList"] = runZipList;
  exports["showZipList"] = showZipList;
  exports["eqZipList"] = eqZipList;
  exports["ordZipList"] = ordZipList;
  exports["semigroupZipList"] = semigroupZipList;
  exports["monoidZipList"] = monoidZipList;
  exports["foldableZipList"] = foldableZipList;
  exports["traversableZipList"] = traversableZipList;
  exports["functorZipList"] = functorZipList;
  exports["applyZipList"] = applyZipList;
  exports["applicativeZipList"] = applicativeZipList;
  exports["altZipList"] = altZipList;
  exports["plusZipList"] = plusZipList;
  exports["alternativeZipList"] = alternativeZipList;;
 
})(PS["Data.List.ZipList"] = PS["Data.List.ZipList"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];     
  var $div$bslash = function (a) {
      return function (b) {
          return new Data_Tuple.Tuple(a, b);
      };
  };
  var uncurry9 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry8 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry7 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry6 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry5 = function (f) {
      return function (v) {
          return f(v.value0.value0.value0.value0)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry4 = function (f) {
      return function (v) {
          return f(v.value0.value0.value0)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry3 = function (f) {
      return function (v) {
          return f(v.value0.value0)(v.value0.value1)(v.value1);
      };
  };
  var uncurry2 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var uncurry10 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var tuple9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g);
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f);
                      };
                  };
              };
          };
      };
  };
  var tuple5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e);
                  };
              };
          };
      };
  };
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d);
              };
          };
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c);
          };
      };
  };
  var tuple2 = Data_Tuple.Tuple.create;
  var tuple10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry9 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return function (i) {
                                          return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry8 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry7 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry6 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f));
                          };
                      };
                  };
              };
          };
      };
  };
  var curry5 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e));
                      };
                  };
              };
          };
      };
  };
  var curry4 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d));
                  };
              };
          };
      };
  };
  var curry3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c));
              };
          };
      };
  };
  var curry2 = function (f) {
      return function (a) {
          return function (b) {
              return f(new Data_Tuple.Tuple(a, b));
          };
      };
  };
  var curry10 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return function (i) {
                                          return function (j) {
                                              return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j));
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["/\\"] = $div$bslash;
  exports["curry10"] = curry10;
  exports["uncurry10"] = uncurry10;
  exports["curry9"] = curry9;
  exports["uncurry9"] = uncurry9;
  exports["curry8"] = curry8;
  exports["uncurry8"] = uncurry8;
  exports["curry7"] = curry7;
  exports["uncurry7"] = uncurry7;
  exports["curry6"] = curry6;
  exports["uncurry6"] = uncurry6;
  exports["curry5"] = curry5;
  exports["uncurry5"] = uncurry5;
  exports["curry4"] = curry4;
  exports["uncurry4"] = uncurry4;
  exports["curry3"] = curry3;
  exports["uncurry3"] = uncurry3;
  exports["curry2"] = curry2;
  exports["uncurry2"] = uncurry2;
  exports["tuple10"] = tuple10;
  exports["tuple9"] = tuple9;
  exports["tuple8"] = tuple8;
  exports["tuple7"] = tuple7;
  exports["tuple6"] = tuple6;
  exports["tuple5"] = tuple5;
  exports["tuple4"] = tuple4;
  exports["tuple3"] = tuple3;
  exports["tuple2"] = tuple2;;
 
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Graphics.Canvas

  exports.canvasElementToImageSource = function(e) {
      return e;
  };

  exports.withImage = function (src) {
    return function(f) {
          return function () {
              var img = new Image();
              img.src = src;
              img.addEventListener("load", function() {
                  f(img)();
              }, false);

              return {};
          }
      };
  };

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setCanvasWidth = function(width) {
      return function(canvas) {
          return function() {
              canvas.width = width;
              return canvas;
          };
      };
  };

  exports.setCanvasHeight = function(height) {
      return function(canvas) {
          return function() {
              canvas.height = height;
              return canvas;
          };
      };
  };

  exports.canvasToDataURL = function(canvas) {
      return function() {
          return canvas.toDataURL();
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setShadowColor = function(color) {
      return function(ctx) {
          return function() {
              ctx.shadowColor = color;
              return ctx;
          };
      };
  };

  exports.setShadowBlur = function(blur) {
      return function(ctx) {
          return function() {
              ctx.shadowBlur = blur;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetX = function(offsetX) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetX = offsetX;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetY = function(offsetY) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetY = offsetY;
              return ctx;
          };
      };
  };

  exports.setLineCapImpl = function(cap) {
      return function(ctx) {
          return function() {
              ctx.lineCap = cap;
              return ctx;
          };
      };
  };

  exports.setGlobalCompositeOperationImpl = function(ctx) {
      return function(op) {
          return function() {
              ctx.globalCompositeOperation = op;
              return ctx;
          };
      };
  };

  exports.setGlobalAlpha = function(ctx) {
      return function(alpha) {
          return function() {
              ctx.setGlobalAlpha = alpha;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.strokeRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.strokeRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.transform = function(t) {
      return function(ctx) {
          return function() {
              ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.textAlignImpl = function(ctx) {
      return function() {
          return ctx.textAlign;
      }
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
              return ctx;
          }
      }
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.strokeText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.strokeText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.measureText = function(ctx) {
      return function(text) {
          return function() {
              return ctx.measureText(text);
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };

  exports.getImageData = function(ctx) {
      return function(x) {
          return function(y) {
              return function(w) {
                  return function(h) {
                      return function() {
                          return ctx.getImageData(x, y, w, h);
                      };
                  };
              };
          };
      };
  };

  exports.putImageDataFull = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function(dx) {
                      return function(dy) {
                          return function(dw) {
                              return function(dh) {
                                  return function() {
                                      ctx.putImageData(image_data, x, y, dx, dy, dw, dh);
                                      return ctx;
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };

  exports.putImageData = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.putImageData(image_data, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.createImageData = function(ctx) {
      return function(sw) {
          return function(sh) {
              return function() {
                  return ctx.createImageData(sw, sh);
              };
          };
      };
  };

  exports.createImageDataCopy = function(ctx) {
      return function(image_data) {
          return function() {
              return ctx.createImageData(image_data);
          };
      };
  };

  exports.getImageDataWidth = function(image_data) {
      return function() {
          return image_data.width;
      };
  };

  exports.getImageDataHeight = function(image_data) {
      return function() {
          return image_data.height;
      };
  };

  exports.getImageDataPixelArray = function(image_data) {
      return function() {
          return image_data.data;
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.drawImageScale = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function(dWidth) {
                      return function(dHeight) {
                          return function() {
                              ctx.drawImage(image_source, dx, dy, dWidth, dHeight);
                              return ctx;
                          };
                      };
                  };
              };
          };
      };
  };

  exports.drawImageFull = function(ctx) {
      return function(image_source) {
          return function(sx) {
              return function(sy) {
                  return function(sWidth) {
                      return function(sHeight) {
                          return function(dx) {
                              return function(dy) {
                                  return function(dWidth) {
                                      return function(dHeight) {
                                          return function() {
                                              ctx.drawImage(image_source, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
                                              return ctx;
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };

  exports.createLinearGradient = function(linearGradient) {
      return function(ctx) {
          return function() {
              return ctx.createLinearGradient(linearGradient.x0, linearGradient.y0, linearGradient.x1, linearGradient.y1);
          };
      };
  };

  exports.createRadialGradient = function(radialGradient) {
      return function(ctx) {
          return function() {
              return ctx.createRadialGradient(radialGradient.x0, radialGradient.y0, radialGradient.r0, radialGradient.x1, radialGradient.y1, radialGradient.r1);
          };
      };
  };

  exports.addColorStop = function(stop) {
      return function(color) {
          return function(gradient) {
              return function() {
                  gradient.addColorStop(stop, color);
                  return gradient;
              };
          };
      };
  };

  exports.setGradientFillStyle = function(gradient) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = gradient;
              return ctx;
          };
      };
  };

  exports.quadraticCurveTo = function(qCurve) {
      return function(ctx) {
          return function() {
              ctx.quadraticCurveTo(qCurve.cpx, qCurve.cpy, qCurve.x, qCurve.y);
              return ctx;
          };
      };
  };

  exports.bezierCurveTo = function(bCurve) {
      return function(ctx) {
          return function() {
              ctx.bezierCurveTo(bCurve.cp1x, bCurve.cp1y, bCurve.cp2x, bCurve.cp2y, bCurve.x, bCurve.y);
              return ctx;
          };
      };
  };

 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];     
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var Round = (function () {
      function Round() {

      };
      Round.value = new Round();
      return Round;
  })();
  var Square = (function () {
      function Square() {

      };
      Square.value = new Square();
      return Square;
  })();
  var Butt = (function () {
      function Butt() {

      };
      Butt.value = new Butt();
      return Butt;
  })();
  var SourceOver = (function () {
      function SourceOver() {

      };
      SourceOver.value = new SourceOver();
      return SourceOver;
  })();
  var SourceIn = (function () {
      function SourceIn() {

      };
      SourceIn.value = new SourceIn();
      return SourceIn;
  })();
  var SourceOut = (function () {
      function SourceOut() {

      };
      SourceOut.value = new SourceOut();
      return SourceOut;
  })();
  var SourceAtop = (function () {
      function SourceAtop() {

      };
      SourceAtop.value = new SourceAtop();
      return SourceAtop;
  })();
  var DestinationOver = (function () {
      function DestinationOver() {

      };
      DestinationOver.value = new DestinationOver();
      return DestinationOver;
  })();
  var DestinationIn = (function () {
      function DestinationIn() {

      };
      DestinationIn.value = new DestinationIn();
      return DestinationIn;
  })();
  var DestinationOut = (function () {
      function DestinationOut() {

      };
      DestinationOut.value = new DestinationOut();
      return DestinationOut;
  })();
  var DestinationAtop = (function () {
      function DestinationAtop() {

      };
      DestinationAtop.value = new DestinationAtop();
      return DestinationAtop;
  })();
  var Lighter = (function () {
      function Lighter() {

      };
      Lighter.value = new Lighter();
      return Lighter;
  })();
  var Copy = (function () {
      function Copy() {

      };
      Copy.value = new Copy();
      return Copy;
  })();
  var Xor = (function () {
      function Xor() {

      };
      Xor.value = new Xor();
      return Xor;
  })();
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var v = action();
              $foreign.restore(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          };
      };
  };
  var textAlign = function (ctx) {
      var unsafeParseTextAlign = function (v) {
          if (v === "left") {
              return AlignLeft.value;
          };
          if (v === "right") {
              return AlignRight.value;
          };
          if (v === "center") {
              return AlignCenter.value;
          };
          if (v === "start") {
              return AlignStart.value;
          };
          if (v === "end") {
              return AlignEnd.value;
          };
          return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("invalid TextAlign: " + v);
      };
      return Prelude["<$>"](Control_Monad_Eff.functorEff)(unsafeParseTextAlign)($foreign.textAlignImpl(ctx));
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.stroke(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          };
      };
  };
  var showTextAlign = new Prelude.Show(function (v) {
      if (v instanceof AlignLeft) {
          return "left";
      };
      if (v instanceof AlignRight) {
          return "right";
      };
      if (v instanceof AlignCenter) {
          return "center";
      };
      if (v instanceof AlignStart) {
          return "start";
      };
      if (v instanceof AlignEnd) {
          return "end";
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 388, column 1 - line 395, column 1: " + [ v.constructor.name ]);
  });
  var showComposite = new Prelude.Show(function (v) {
      if (v instanceof SourceOver) {
          return "source-over";
      };
      if (v instanceof SourceIn) {
          return "source-in";
      };
      if (v instanceof SourceOut) {
          return "source-out";
      };
      if (v instanceof SourceAtop) {
          return "source-atop";
      };
      if (v instanceof DestinationOver) {
          return "destination-over";
      };
      if (v instanceof DestinationIn) {
          return "destination-in";
      };
      if (v instanceof DestinationOut) {
          return "destination-out";
      };
      if (v instanceof DestinationAtop) {
          return "destination-atop";
      };
      if (v instanceof Lighter) {
          return "lighter";
      };
      if (v instanceof Copy) {
          return "copy";
      };
      if (v instanceof Xor) {
          return "xor";
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 228, column 1 - line 241, column 1: " + [ v.constructor.name ]);
  });
  var setTextAlign = function (ctx) {
      return function (textalign) {
          return $foreign.setTextAlignImpl(ctx)(Prelude.show(showTextAlign)(textalign));
      };
  };
  var setLineCap = function (v) {
      if (v instanceof Round) {
          return $foreign.setLineCapImpl("round");
      };
      if (v instanceof Square) {
          return $foreign.setLineCapImpl("square");
      };
      if (v instanceof Butt) {
          return $foreign.setLineCapImpl("butt");
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 209, column 1 - line 210, column 1: " + [ v.constructor.name ]);
  };
  var setGlobalCompositeOperation = function (ctx) {
      return function (composite) {
          return $foreign.setGlobalCompositeOperationImpl(ctx)(Prelude.show(showComposite)(composite));
      };
  };
  var setCanvasDimensions = function (d) {
      return function (ce) {
          return Prelude[">>="](Control_Monad_Eff.bindEff)($foreign.setCanvasHeight(d.height)(ce))($foreign.setCanvasWidth(d.width));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var getCanvasDimensions = function (ce) {
      return function __do() {
          var v = $foreign.getCanvasWidth(ce)();
          var v1 = $foreign.getCanvasHeight(ce)();
          return Prelude["return"](Control_Monad_Eff.applicativeEff)({
              width: v, 
              height: v1
          })();
      };
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.fill(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(v)();
          };
      };
  };
  exports["AlignLeft"] = AlignLeft;
  exports["AlignRight"] = AlignRight;
  exports["AlignCenter"] = AlignCenter;
  exports["AlignStart"] = AlignStart;
  exports["AlignEnd"] = AlignEnd;
  exports["Round"] = Round;
  exports["Square"] = Square;
  exports["Butt"] = Butt;
  exports["SourceOver"] = SourceOver;
  exports["SourceIn"] = SourceIn;
  exports["SourceOut"] = SourceOut;
  exports["SourceAtop"] = SourceAtop;
  exports["DestinationOver"] = DestinationOver;
  exports["DestinationIn"] = DestinationIn;
  exports["DestinationOut"] = DestinationOut;
  exports["DestinationAtop"] = DestinationAtop;
  exports["Lighter"] = Lighter;
  exports["Copy"] = Copy;
  exports["Xor"] = Xor;
  exports["withContext"] = withContext;
  exports["setTextAlign"] = setTextAlign;
  exports["textAlign"] = textAlign;
  exports["fillPath"] = fillPath;
  exports["strokePath"] = strokePath;
  exports["setGlobalCompositeOperation"] = setGlobalCompositeOperation;
  exports["setLineCap"] = setLineCap;
  exports["setCanvasDimensions"] = setCanvasDimensions;
  exports["getCanvasDimensions"] = getCanvasDimensions;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["showComposite"] = showComposite;
  exports["showTextAlign"] = showTextAlign;
  exports["bezierCurveTo"] = $foreign.bezierCurveTo;
  exports["quadraticCurveTo"] = $foreign.quadraticCurveTo;
  exports["setGradientFillStyle"] = $foreign.setGradientFillStyle;
  exports["addColorStop"] = $foreign.addColorStop;
  exports["createRadialGradient"] = $foreign.createRadialGradient;
  exports["createLinearGradient"] = $foreign.createLinearGradient;
  exports["drawImageFull"] = $foreign.drawImageFull;
  exports["drawImageScale"] = $foreign.drawImageScale;
  exports["drawImage"] = $foreign.drawImage;
  exports["canvasElementToImageSource"] = $foreign.canvasElementToImageSource;
  exports["createImageDataCopy"] = $foreign.createImageDataCopy;
  exports["createImageData"] = $foreign.createImageData;
  exports["putImageDataFull"] = $foreign.putImageDataFull;
  exports["putImageData"] = $foreign.putImageData;
  exports["getImageDataPixelArray"] = $foreign.getImageDataPixelArray;
  exports["getImageDataHeight"] = $foreign.getImageDataHeight;
  exports["getImageDataWidth"] = $foreign.getImageDataWidth;
  exports["getImageData"] = $foreign.getImageData;
  exports["withImage"] = $foreign.withImage;
  exports["restore"] = $foreign.restore;
  exports["save"] = $foreign.save;
  exports["measureText"] = $foreign.measureText;
  exports["strokeText"] = $foreign.strokeText;
  exports["fillText"] = $foreign.fillText;
  exports["setFont"] = $foreign.setFont;
  exports["font"] = $foreign.font;
  exports["transform"] = $foreign.transform;
  exports["translate"] = $foreign.translate;
  exports["rotate"] = $foreign.rotate;
  exports["scale"] = $foreign.scale;
  exports["clearRect"] = $foreign.clearRect;
  exports["strokeRect"] = $foreign.strokeRect;
  exports["fillRect"] = $foreign.fillRect;
  exports["rect"] = $foreign.rect;
  exports["arc"] = $foreign.arc;
  exports["closePath"] = $foreign.closePath;
  exports["moveTo"] = $foreign.moveTo;
  exports["lineTo"] = $foreign.lineTo;
  exports["clip"] = $foreign.clip;
  exports["fill"] = $foreign.fill;
  exports["stroke"] = $foreign.stroke;
  exports["beginPath"] = $foreign.beginPath;
  exports["setGlobalAlpha"] = $foreign.setGlobalAlpha;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["canvasToDataURL"] = $foreign.canvasToDataURL;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Data_Int = PS["Data.Int"];     
  var Color = (function () {
      function Color(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Color.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Color(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Color;
  })();
  var rgba = Color.create;
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return new Color(r, g, b, 1.0);
          };
      };
  };
  var silver = rgb(192.0)(192.0)(192.0);
  var teal = rgb(0.0)(128.0)(128.0);
  var white = rgb(255.0)(255.0)(255.0);
  var yellow = rgb(255.0)(255.0)(0.0);
  var red = rgb(255.0)(0.0)(0.0);
  var purple = rgb(128.0)(0.0)(128.0);
  var olive = rgb(128.0)(128.0)(0.0);
  var navy = rgb(0.0)(0.0)(128.0);
  var maroon = rgb(128.0)(0.0)(0.0);
  var lime = rgb(0.0)(255.0)(0.0);
  var lighten = function (l) {
      return function (v) {
          var interp = function (c) {
              return 255.0 * l + c * (1.0 - l);
          };
          return new Color(interp(v.value0), interp(v.value1), interp(v.value2), v.value3);
      };
  };
  var hsl = function (h) {
      return function (s) {
          return function (l) {
              var h$prime = h / 60.0;
              var chr = (1.0 - $$Math.abs(2.0 * l - 1.0)) * s;
              var m = l - chr / 2.0;
              var x = chr * (1.0 - $$Math.abs($$Math["%"](h$prime)(2.0) - 1.0));
              var rgb1 = (function () {
                  if (h$prime < 1.0) {
                      return {
                          r: chr, 
                          g: x, 
                          b: 0.0
                      };
                  };
                  if (1.0 <= h$prime && h$prime < 2.0) {
                      return {
                          r: x, 
                          g: chr, 
                          b: 0.0
                      };
                  };
                  if (2.0 <= h$prime && h$prime < 3.0) {
                      return {
                          r: 0.0, 
                          g: chr, 
                          b: x
                      };
                  };
                  if (3.0 <= h$prime && h$prime < 4.0) {
                      return {
                          r: 0.0, 
                          g: x, 
                          b: chr
                      };
                  };
                  if (4.0 <= h$prime && h$prime < 5.0) {
                      return {
                          r: x, 
                          g: 0.0, 
                          b: chr
                      };
                  };
                  if (Prelude.otherwise) {
                      return {
                          r: chr, 
                          g: 0.0, 
                          b: x
                      };
                  };
                  throw new Error("Failed pattern match at Graphics.Drawing.Color line 56, column 1 - line 57, column 1: " + [  ]);
              })();
              return rgb(255.0 * (rgb1.r + m))(255.0 * (rgb1.g + m))(255.0 * (rgb1.b + m));
          };
      };
  };
  var green = rgb(0.0)(128.0)(0.0);
  var gray = rgb(128.0)(128.0)(128.0);
  var fuchsia = rgb(255.0)(0.0)(255.0);
  var eqColor = new Prelude.Eq(function (v) {
      return function (v1) {
          return v.value0 === v1.value0 && (v.value1 === v1.value1 && (v.value2 === v1.value2 && v.value3 === v1.value3));
      };
  });
  var darken = function (d) {
      return function (v) {
          var interp = function (c) {
              return c * (1.0 - d);
          };
          return new Color(interp(v.value0), interp(v.value1), interp(v.value2), v.value3);
      };
  };
  var colorString = function (v) {
      return "rgba(" + (Prelude.show(Prelude.showInt)(Data_Int.floor(v.value0)) + ("," + (Prelude.show(Prelude.showInt)(Data_Int.floor(v.value1)) + ("," + (Prelude.show(Prelude.showInt)(Data_Int.floor(v.value2)) + ("," + (Prelude.show(Prelude.showNumber)(v.value3) + ")")))))));
  };
  var blue = rgb(0.0)(0.0)(255.0);
  var black = rgb(0.0)(0.0)(0.0);
  var aqua = rgb(0.0)(255.0)(255.0);
  exports["purple"] = purple;
  exports["fuchsia"] = fuchsia;
  exports["navy"] = navy;
  exports["blue"] = blue;
  exports["teal"] = teal;
  exports["aqua"] = aqua;
  exports["green"] = green;
  exports["lime"] = lime;
  exports["olive"] = olive;
  exports["yellow"] = yellow;
  exports["maroon"] = maroon;
  exports["red"] = red;
  exports["black"] = black;
  exports["gray"] = gray;
  exports["silver"] = silver;
  exports["white"] = white;
  exports["darken"] = darken;
  exports["lighten"] = lighten;
  exports["hsl"] = hsl;
  exports["rgba"] = rgba;
  exports["rgb"] = rgb;
  exports["colorString"] = colorString;
  exports["eqColor"] = eqColor;;
 
})(PS["Graphics.Drawing.Color"] = PS["Graphics.Drawing.Color"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];     
  var FontOptions = function (x) {
      return x;
  };
  var FontFamily = function (x) {
      return x;
  };
  var Font = (function () {
      function Font(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Font.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Font(value0, value1, value2);
              };
          };
      };
      return Font;
  })();
  var smallCaps = {
      style: Data_Maybe.Nothing.value, 
      variant: new Data_Maybe.Just("small-caps"), 
      weight: Data_Maybe.Nothing.value
  };
  var serif = "serif";
  var semigroupFontOptions = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return {
              style: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.style)(v1.style), 
              variant: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.variant)(v1.variant), 
              weight: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.weight)(v1.weight)
          };
      };
  });
  var sansSerif = "sans-serif";
  var optionsString = function (v) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.style), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.variant), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.weight) ]);
  };
  var oblique = {
      style: new Data_Maybe.Just("oblique"), 
      variant: Data_Maybe.Nothing.value, 
      weight: Data_Maybe.Nothing.value
  };
  var monospace = "monospace";
  var monoidFontOptions = new Data_Monoid.Monoid(function () {
      return semigroupFontOptions;
  }, {
      style: Data_Maybe.Nothing.value, 
      variant: Data_Maybe.Nothing.value, 
      weight: Data_Maybe.Nothing.value
  });
  var light = {
      style: Data_Maybe.Nothing.value, 
      variant: Data_Maybe.Nothing.value, 
      weight: new Data_Maybe.Just("lighter")
  };
  var italic = {
      style: new Data_Maybe.Just("italic"), 
      variant: Data_Maybe.Nothing.value, 
      weight: Data_Maybe.Nothing.value
  };
  var fontString = function (v) {
      return optionsString(v.value2) + (" " + (Prelude.show(Prelude.showInt)(v.value1) + ("px " + v.value0)));
  };
  var font = Font.create;
  var fantasy = "fantasy";
  var eqFontOptions = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqString))(v.style)(v1.style) && (Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqString))(v.variant)(v1.variant) && Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqString))(v.weight)(v1.weight));
      };
  });
  var eqFontFamily = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Prelude.eqString)(v)(v1);
      };
  });
  var eqFont = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](eqFontFamily)(v.value0)(v1.value0) && (v.value1 === v1.value1 && Prelude["=="](eqFontOptions)(v.value2)(v1.value2));
      };
  });
  var customFont = FontFamily;
  var cursive = "cursive";
  var bolder = {
      style: Data_Maybe.Nothing.value, 
      variant: Data_Maybe.Nothing.value, 
      weight: new Data_Maybe.Just("bolder")
  };
  var bold = {
      style: Data_Maybe.Nothing.value, 
      variant: Data_Maybe.Nothing.value, 
      weight: new Data_Maybe.Just("bold")
  };
  exports["smallCaps"] = smallCaps;
  exports["oblique"] = oblique;
  exports["italic"] = italic;
  exports["light"] = light;
  exports["bolder"] = bolder;
  exports["bold"] = bold;
  exports["customFont"] = customFont;
  exports["fantasy"] = fantasy;
  exports["cursive"] = cursive;
  exports["monospace"] = monospace;
  exports["sansSerif"] = sansSerif;
  exports["serif"] = serif;
  exports["fontString"] = fontString;
  exports["font"] = font;
  exports["eqFont"] = eqFont;
  exports["eqFontFamily"] = eqFontFamily;
  exports["eqFontOptions"] = eqFontOptions;
  exports["semigroupFontOptions"] = semigroupFontOptions;
  exports["monoidFontOptions"] = monoidFontOptions;;
 
})(PS["Graphics.Drawing.Font"] = PS["Graphics.Drawing.Font"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Drawing_Color = PS["Graphics.Drawing.Color"];
  var Graphics_Drawing_Font = PS["Graphics.Drawing.Font"];
  var $$Math = PS["Math"];     
  var Shadow = function (x) {
      return x;
  };
  var Path = (function () {
      function Path(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Path.create = function (value0) {
          return function (value1) {
              return new Path(value0, value1);
          };
      };
      return Path;
  })();
  var Rectangle = (function () {
      function Rectangle(value0) {
          this.value0 = value0;
      };
      Rectangle.create = function (value0) {
          return new Rectangle(value0);
      };
      return Rectangle;
  })();
  var Circle = (function () {
      function Circle(value0) {
          this.value0 = value0;
      };
      Circle.create = function (value0) {
          return new Circle(value0);
      };
      return Circle;
  })();
  var Composite = (function () {
      function Composite(value0) {
          this.value0 = value0;
      };
      Composite.create = function (value0) {
          return new Composite(value0);
      };
      return Composite;
  })();
  var OutlineStyle = function (x) {
      return x;
  };
  var FillStyle = function (x) {
      return x;
  };
  var Fill = (function () {
      function Fill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fill.create = function (value0) {
          return function (value1) {
              return new Fill(value0, value1);
          };
      };
      return Fill;
  })();
  var Outline = (function () {
      function Outline(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Outline.create = function (value0) {
          return function (value1) {
              return new Outline(value0, value1);
          };
      };
      return Outline;
  })();
  var Text = (function () {
      function Text(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Text.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Text(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Text;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var Scale = (function () {
      function Scale(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return new Scale(value0, value1);
          };
      };
      return Scale;
  })();
  var Translate = (function () {
      function Translate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return new Translate(value0, value1);
          };
      };
      return Translate;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Clipped = (function () {
      function Clipped(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Clipped.create = function (value0) {
          return function (value1) {
              return new Clipped(value0, value1);
          };
      };
      return Clipped;
  })();
  var WithShadow = (function () {
      function WithShadow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WithShadow.create = function (value0) {
          return function (value1) {
              return new WithShadow(value0, value1);
          };
      };
      return WithShadow;
  })();
  var translate = function (tx) {
      return function (ty) {
          return Translate.create({
              translateX: tx, 
              translateY: ty
          });
      };
  };
  var text = Text.create;
  var shadowOffset = function (x) {
      return function (y) {
          return {
              color: Data_Maybe.Nothing.value, 
              blur: Data_Maybe.Nothing.value, 
              offset: new Data_Maybe.Just({
                  x: x, 
                  y: y
              })
          };
      };
  };
  var shadowColor = function (c) {
      return {
          color: new Data_Maybe.Just(c), 
          blur: Data_Maybe.Nothing.value, 
          offset: Data_Maybe.Nothing.value
      };
  };
  var shadowBlur = function (b) {
      return {
          color: Data_Maybe.Nothing.value, 
          blur: new Data_Maybe.Just(b), 
          offset: Data_Maybe.Nothing.value
      };
  };
  var shadow = WithShadow.create;
  var semigroupShape = new Prelude.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Composite) {
              return new Composite(Prelude["++"](Data_List.semigroupList)(v.value0)(Data_List.singleton(v1)));
          };
          if (v1 instanceof Composite) {
              return new Composite(Data_List[":"](v)(v1.value0));
          };
          return new Composite(new Data_List.Cons(v, new Data_List.Cons(v1, Data_List.Nil.value)));
      };
  });
  var semigroupShadow = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return {
              color: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.color)(v1.color), 
              blur: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.blur)(v1.blur), 
              offset: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.offset)(v1.offset)
          };
      };
  });
  var semigroupOutlineStyle = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return {
              color: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.color)(v1.color), 
              lineWidth: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.lineWidth)(v1.lineWidth)
          };
      };
  });
  var semigroupFillStyle = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return {
              color: Control_Alt["<|>"](Data_Maybe.altMaybe)(v.color)(v1.color)
          };
      };
  });
  var semigroupDrawing = new Prelude.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Many) {
              return new Many(Prelude["++"](Data_List.semigroupList)(v.value0)(Data_List.singleton(v1)));
          };
          if (v1 instanceof Many) {
              return new Many(Data_List[":"](v)(v1.value0));
          };
          return new Many(new Data_List.Cons(v, new Data_List.Cons(v1, Data_List.Nil.value)));
      };
  });
  var scale = function (sx) {
      return function (sy) {
          return Scale.create({
              scaleX: sx, 
              scaleY: sy
          });
      };
  };
  var rotate = Rotate.create;
  var render = function (ctx) {
      var renderShape = function (v) {
          if (v instanceof Path && v.value1 instanceof Data_List.Nil) {
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
          };
          if (v instanceof Path && v.value1 instanceof Data_List.Cons) {
              return function __do() {
                  Graphics_Canvas.moveTo(ctx)(v.value1.value0.x)(v.value1.value0.y)();
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value1.value1)(function (p1) {
                      return Graphics_Canvas.lineTo(ctx)(p1.x)(p1.y);
                  })();
                  return Control_Monad.when(Control_Monad_Eff.monadEff)(v.value0)(Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.closePath(ctx)))();
              };
          };
          if (v instanceof Rectangle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.rect(ctx)(v.value0));
          };
          if (v instanceof Circle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.arc(ctx)({
                  x: v.value0.x, 
                  y: v.value0.y, 
                  r: v.value0.r, 
                  start: 0.0, 
                  end: $$Math.pi * 2.0
              }));
          };
          if (v instanceof Composite) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value0)(renderShape);
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 261, column 1 - line 262, column 1: " + [ v.constructor.name ]);
      };
      var applyShadow = function (v) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setShadowColor(Graphics_Drawing_Color.colorString(color))(ctx);
              })();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.blur)(function (blur) {
                  return Graphics_Canvas.setShadowBlur(blur)(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.offset)(function (offset) {
                  return function __do() {
                      Graphics_Canvas.setShadowOffsetX(offset.x)(ctx)();
                      return Graphics_Canvas.setShadowOffsetY(offset.y)(ctx)();
                  };
              })();
          };
      };
      var applyOutlineStyle = function (v) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setStrokeStyle(Graphics_Drawing_Color.colorString(color))(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.lineWidth)(function (width) {
                  return Graphics_Canvas.setLineWidth(width)(ctx);
              })();
          };
      };
      var applyFillStyle = function (v) {
          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
              return Graphics_Canvas.setFillStyle(Graphics_Drawing_Color.colorString(color))(ctx);
          });
      };
      var go = function (v) {
          if (v instanceof Fill) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyFillStyle(v.value1)();
                  return Graphics_Canvas.fillPath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Outline) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyOutlineStyle(v.value1)();
                  return Graphics_Canvas.strokePath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Many) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value0)(go);
          };
          if (v instanceof Scale) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.scale(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Translate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.translate(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Rotate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.rotate(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Clipped) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  renderShape(v.value0)();
                  Graphics_Canvas.clip(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof WithShadow) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyShadow(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Text) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.setFont(Graphics_Drawing_Font.fontString(v.value0))(ctx)();
                  applyFillStyle(v.value3)();
                  return Graphics_Canvas.fillText(ctx)(v.value4)(v.value1)(v.value2)();
              }));
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 261, column 1 - line 262, column 1: " + [ v.constructor.name ]);
      };
      return go;
  };
  var rectangle = function (x) {
      return function (y) {
          return function (w) {
              return function (h) {
                  return new Rectangle({
                      x: x, 
                      y: y, 
                      w: w, 
                      h: h
                  });
              };
          };
      };
  };
  var path = function (dictFoldable) {
      return function ($152) {
          return Path.create(false)(Data_List.toList(dictFoldable)($152));
      };
  };
  var outlined = Prelude.flip(Outline.create);
  var outlineColor = function (c) {
      return {
          color: new Data_Maybe.Just(c), 
          lineWidth: Data_Maybe.Nothing.value
      };
  };
  var monoidShape = new Data_Monoid.Monoid(function () {
      return semigroupShape;
  }, new Composite(Data_Monoid.mempty(Data_List.monoidList)));
  var monoidShadow = new Data_Monoid.Monoid(function () {
      return semigroupShadow;
  }, {
      color: Data_Maybe.Nothing.value, 
      blur: Data_Maybe.Nothing.value, 
      offset: Data_Maybe.Nothing.value
  });
  var monoidOutlineStyle = new Data_Monoid.Monoid(function () {
      return semigroupOutlineStyle;
  }, {
      color: Data_Maybe.Nothing.value, 
      lineWidth: Data_Maybe.Nothing.value
  });
  var monoidFillStyle = new Data_Monoid.Monoid(function () {
      return semigroupFillStyle;
  }, {
      color: Data_Maybe.Nothing.value
  });
  var monoidDrawing = new Data_Monoid.Monoid(function () {
      return semigroupDrawing;
  }, new Many(Data_Monoid.mempty(Data_List.monoidList)));
  var lineWidth = function (c) {
      return {
          color: Data_Maybe.Nothing.value, 
          lineWidth: new Data_Maybe.Just(c)
      };
  };
  var filled = Prelude.flip(Fill.create);
  var fillColor = function (c) {
      return {
          color: new Data_Maybe.Just(c)
      };
  };
  var everywhere = function (f) {
      var go = function (v) {
          if (v instanceof Many) {
              return f(new Many(Prelude.map(Data_List.functorList)(go)(v.value0)));
          };
          if (v instanceof Scale) {
              return f(new Scale(v.value0, go(v.value1)));
          };
          if (v instanceof Translate) {
              return f(new Translate(v.value0, go(v.value1)));
          };
          if (v instanceof Rotate) {
              return f(new Rotate(v.value0, go(v.value1)));
          };
          if (v instanceof Clipped) {
              return f(new Clipped(v.value0, go(v.value1)));
          };
          if (v instanceof WithShadow) {
              return f(new WithShadow(v.value0, go(v.value1)));
          };
          return f(v);
      };
      return go;
  };
  var eqShape = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof Path && v1 instanceof Path) {
              return Prelude["=="](Prelude.eqBoolean)(v.value0)(v1.value0) && (Prelude["=="](Data_List.eqList(Prelude.eqNumber))(Prelude.map(Data_List.functorList)(function (v2) {
                  return v2.x;
              })(v.value1))(Prelude.map(Data_List.functorList)(function (v2) {
                  return v2.x;
              })(v1.value1)) && Prelude["=="](Data_List.eqList(Prelude.eqNumber))(Prelude.map(Data_List.functorList)(function (v2) {
                  return v2.y;
              })(v.value1))(Prelude.map(Data_List.functorList)(function (v2) {
                  return v2.y;
              })(v1.value1)));
          };
          if (v instanceof Rectangle && v1 instanceof Rectangle) {
              return v.value0.x === v1.value0.x && (v.value0.y === v1.value0.y && (v.value0.w === v1.value0.w && v.value0.h === v1.value0.h));
          };
          if (v instanceof Circle && v1 instanceof Circle) {
              return v.value0.x === v1.value0.x && (v.value0.y === v1.value0.y && v.value0.r === v1.value0.r);
          };
          if (v instanceof Composite && v1 instanceof Composite) {
              return Prelude["=="](Data_List.eqList(eqShape))(v.value0)(v1.value0);
          };
          return false;
      };
  });
  var eqShadow = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Data_Maybe.eqMaybe(Graphics_Drawing_Color.eqColor))(v.color)(v1.color) && (Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqNumber))(v.blur)(v1.blur) && Data_Maybe.maybe(Data_Maybe.isNothing(v1.offset))(function (o) {
              return Data_Maybe.maybe(false)(function (o$prime) {
                  return o.x === o$prime.x && o.y === o$prime.y;
              })(v1.offset);
          })(v.offset));
      };
  });
  var eqOutlineStyle = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Data_Maybe.eqMaybe(Graphics_Drawing_Color.eqColor))(v.color)(v1.color) && Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqNumber))(v.lineWidth)(v1.lineWidth);
      };
  });
  var eqFillStyle = new Prelude.Eq(function (v) {
      return function (v1) {
          return Prelude["=="](Data_Maybe.eqMaybe(Graphics_Drawing_Color.eqColor))(v.color)(v1.color);
      };
  });
  var eqDrawing = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof Fill && v1 instanceof Fill) {
              return Prelude["=="](eqShape)(v.value0)(v1.value0) && Prelude["=="](eqFillStyle)(v.value1)(v1.value1);
          };
          if (v instanceof Outline && v1 instanceof Outline) {
              return Prelude["=="](eqShape)(v.value0)(v1.value0) && Prelude["=="](eqOutlineStyle)(v.value1)(v1.value1);
          };
          if (v instanceof Text && v1 instanceof Text) {
              return Prelude["=="](Graphics_Drawing_Font.eqFont)(v.value0)(v1.value0) && (v.value1 === v1.value1 && (v.value2 === v1.value2 && (Prelude["=="](eqFillStyle)(v.value3)(v1.value3) && Prelude["=="](Prelude.eqString)(v.value4)(v1.value4))));
          };
          if (v instanceof Many && v1 instanceof Many) {
              return Prelude["=="](Data_List.eqList(eqDrawing))(v.value0)(v1.value0);
          };
          if (v instanceof Scale && v1 instanceof Scale) {
              return v.value0.scaleX === v1.value0.scaleX && (v.value0.scaleY === v1.value0.scaleY && Prelude["=="](eqDrawing)(v.value1)(v1.value1));
          };
          if (v instanceof Translate && v1 instanceof Translate) {
              return v.value0.translateX === v1.value0.translateX && (v.value0.translateY === v1.value0.translateY && Prelude["=="](eqDrawing)(v.value1)(v1.value1));
          };
          if (v instanceof Rotate && v1 instanceof Rotate) {
              return v.value0 === v1.value0 && Prelude["=="](eqDrawing)(v.value1)(v1.value1);
          };
          if (v instanceof Clipped && v1 instanceof Clipped) {
              return Prelude["=="](eqShape)(v.value0)(v1.value0) && Prelude["=="](eqDrawing)(v.value1)(v1.value1);
          };
          if (v instanceof WithShadow && v1 instanceof WithShadow) {
              return Prelude["=="](eqShadow)(v.value0)(v1.value0) && Prelude["=="](eqDrawing)(v.value1)(v1.value1);
          };
          return false;
      };
  });
  var closed = function (dictFoldable) {
      return function ($153) {
          return Path.create(true)(Data_List.toList(dictFoldable)($153));
      };
  };
  var clipped = Clipped.create;
  var circle = function (x) {
      return function (y) {
          return function (r) {
              return new Circle({
                  x: x, 
                  y: y, 
                  r: r
              });
          };
      };
  };
  exports["render"] = render;
  exports["everywhere"] = everywhere;
  exports["text"] = text;
  exports["rotate"] = rotate;
  exports["translate"] = translate;
  exports["scale"] = scale;
  exports["clipped"] = clipped;
  exports["outlined"] = outlined;
  exports["filled"] = filled;
  exports["shadow"] = shadow;
  exports["shadowColor"] = shadowColor;
  exports["shadowBlur"] = shadowBlur;
  exports["shadowOffset"] = shadowOffset;
  exports["lineWidth"] = lineWidth;
  exports["outlineColor"] = outlineColor;
  exports["fillColor"] = fillColor;
  exports["circle"] = circle;
  exports["rectangle"] = rectangle;
  exports["closed"] = closed;
  exports["path"] = path;
  exports["semigroupShape"] = semigroupShape;
  exports["monoidShape"] = monoidShape;
  exports["eqShape"] = eqShape;
  exports["semigroupFillStyle"] = semigroupFillStyle;
  exports["monoidFillStyle"] = monoidFillStyle;
  exports["eqFillStyle"] = eqFillStyle;
  exports["semigroupOutlineStyle"] = semigroupOutlineStyle;
  exports["monoidOutlineStyle"] = monoidOutlineStyle;
  exports["eqOutlineStyle"] = eqOutlineStyle;
  exports["eqShadow"] = eqShadow;
  exports["semigroupShadow"] = semigroupShadow;
  exports["monoidShadow"] = monoidShadow;
  exports["semigroupDrawing"] = semigroupDrawing;
  exports["monoidDrawing"] = monoidDrawing;
  exports["eqDrawing"] = eqDrawing;;
 
})(PS["Graphics.Drawing"] = PS["Graphics.Drawing"] || {});

